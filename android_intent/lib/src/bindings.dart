// AUTO GENERATED BY JNIGEN 0.14.2. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: comment_references
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

/// from: `android.content.Intent$FilterComparison`
class Intent$FilterComparison extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<Intent$FilterComparison> $type;

  @jni$_.internal
  Intent$FilterComparison.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/content/Intent$FilterComparison');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $Intent$FilterComparison$NullableType();
  static const type = $Intent$FilterComparison$Type();
  static final _id_new$ = _class.constructorId(
    r'(Landroid/content/Intent;)V',
  );

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void <init>(android.content.Intent intent)`
  /// The returned object must be released after use, by calling the [release] method.
  factory Intent$FilterComparison(
    Intent? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    return Intent$FilterComparison.fromReference(
      _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr, _$intent.pointer).reference,
    );
  }

  static final _id_getIntent = _class.instanceMethodId(
    r'getIntent',
    r'()Landroid/content/Intent;',
  );

  static final _getIntent =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.content.Intent getIntent()`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? getIntent() {
    return _getIntent(
      reference.pointer,
      _id_getIntent as jni$_.JMethodIDPtr,
    ).object<Intent?>(const $Intent$NullableType());
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(
    jni$_.JObject? object,
  ) {
    final _$object = object?.reference ?? jni$_.jNullReference;
    return _equals(reference.pointer, _id_equals as jni$_.JMethodIDPtr, _$object.pointer).boolean;
  }

  static final _id_hashCode$1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int hashCode()`
  int hashCode$1() {
    return _hashCode$1(reference.pointer, _id_hashCode$1 as jni$_.JMethodIDPtr).integer;
  }
}

final class $Intent$FilterComparison$NullableType extends jni$_.JObjType<Intent$FilterComparison?> {
  @jni$_.internal
  const $Intent$FilterComparison$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/content/Intent$FilterComparison;';

  @jni$_.internal
  @core$_.override
  Intent$FilterComparison? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : Intent$FilterComparison.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Intent$FilterComparison?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Intent$FilterComparison$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Intent$FilterComparison$NullableType) &&
        other is $Intent$FilterComparison$NullableType;
  }
}

final class $Intent$FilterComparison$Type extends jni$_.JObjType<Intent$FilterComparison> {
  @jni$_.internal
  const $Intent$FilterComparison$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/content/Intent$FilterComparison;';

  @jni$_.internal
  @core$_.override
  Intent$FilterComparison fromReference(jni$_.JReference reference) => Intent$FilterComparison.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Intent$FilterComparison?> get nullableType => const $Intent$FilterComparison$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Intent$FilterComparison$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Intent$FilterComparison$Type) && other is $Intent$FilterComparison$Type;
  }
}

/// from: `android.content.Intent$ShortcutIconResource`
class Intent$ShortcutIconResource extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<Intent$ShortcutIconResource> $type;

  @jni$_.internal
  Intent$ShortcutIconResource.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/content/Intent$ShortcutIconResource');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $Intent$ShortcutIconResource$NullableType();
  static const type = $Intent$ShortcutIconResource$Type();
  static final _id_CREATOR = _class.staticFieldId(
    r'CREATOR',
    r'Landroid/os/Parcelable$Creator;',
  );

  /// from: `static public final android.os.Parcelable$Creator<android.content.Intent$ShortcutIconResource> CREATOR`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JObject? get CREATOR => _id_CREATOR.get(_class, const jni$_.JObjectNullableType());

  static final _id_packageName = _class.instanceFieldId(
    r'packageName',
    r'Ljava/lang/String;',
  );

  /// from: `public java.lang.String packageName`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? get packageName => _id_packageName.get(this, const jni$_.JStringNullableType());

  /// from: `public java.lang.String packageName`
  /// The returned object must be released after use, by calling the [release] method.
  set packageName(jni$_.JString? value) => _id_packageName.set(this, const jni$_.JStringNullableType(), value);

  static final _id_resourceName = _class.instanceFieldId(
    r'resourceName',
    r'Ljava/lang/String;',
  );

  /// from: `public java.lang.String resourceName`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? get resourceName => _id_resourceName.get(this, const jni$_.JStringNullableType());

  /// from: `public java.lang.String resourceName`
  /// The returned object must be released after use, by calling the [release] method.
  set resourceName(jni$_.JString? value) => _id_resourceName.set(this, const jni$_.JStringNullableType(), value);

  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory Intent$ShortcutIconResource() {
    return Intent$ShortcutIconResource.fromReference(
      _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr).reference,
    );
  }

  static final _id_fromContext = _class.staticMethodId(
    r'fromContext',
    r'(Landroid/content/Context;I)Landroid/content/Intent$ShortcutIconResource;',
  );

  static final _fromContext =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)
          >();

  /// from: `static public android.content.Intent$ShortcutIconResource fromContext(android.content.Context context, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static Intent$ShortcutIconResource? fromContext(
    Context? context,
    int i,
  ) {
    final _$context = context?.reference ?? jni$_.jNullReference;
    return _fromContext(
      _class.reference.pointer,
      _id_fromContext as jni$_.JMethodIDPtr,
      _$context.pointer,
      i,
    ).object<Intent$ShortcutIconResource?>(const $Intent$ShortcutIconResource$NullableType());
  }

  static final _id_describeContents = _class.instanceMethodId(
    r'describeContents',
    r'()I',
  );

  static final _describeContents =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int describeContents()`
  int describeContents() {
    return _describeContents(reference.pointer, _id_describeContents as jni$_.JMethodIDPtr).integer;
  }

  static final _id_writeToParcel = _class.instanceMethodId(
    r'writeToParcel',
    r'(Landroid/os/Parcel;I)V',
  );

  static final _writeToParcel =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)
          >();

  /// from: `public void writeToParcel(android.os.Parcel parcel, int i)`
  void writeToParcel(
    jni$_.JObject? parcel,
    int i,
  ) {
    final _$parcel = parcel?.reference ?? jni$_.jNullReference;
    _writeToParcel(reference.pointer, _id_writeToParcel as jni$_.JMethodIDPtr, _$parcel.pointer, i).check();
  }

  static final _id_toString$1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.lang.String toString()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? toString$1() {
    return _toString$1(
      reference.pointer,
      _id_toString$1 as jni$_.JMethodIDPtr,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }
}

final class $Intent$ShortcutIconResource$NullableType extends jni$_.JObjType<Intent$ShortcutIconResource?> {
  @jni$_.internal
  const $Intent$ShortcutIconResource$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/content/Intent$ShortcutIconResource;';

  @jni$_.internal
  @core$_.override
  Intent$ShortcutIconResource? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : Intent$ShortcutIconResource.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Intent$ShortcutIconResource?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Intent$ShortcutIconResource$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Intent$ShortcutIconResource$NullableType) &&
        other is $Intent$ShortcutIconResource$NullableType;
  }
}

final class $Intent$ShortcutIconResource$Type extends jni$_.JObjType<Intent$ShortcutIconResource> {
  @jni$_.internal
  const $Intent$ShortcutIconResource$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/content/Intent$ShortcutIconResource;';

  @jni$_.internal
  @core$_.override
  Intent$ShortcutIconResource fromReference(jni$_.JReference reference) => Intent$ShortcutIconResource.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Intent$ShortcutIconResource?> get nullableType => const $Intent$ShortcutIconResource$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Intent$ShortcutIconResource$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Intent$ShortcutIconResource$Type) && other is $Intent$ShortcutIconResource$Type;
  }
}

/// from: `android.content.Intent`
class Intent extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<Intent> $type;

  @jni$_.internal
  Intent.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/content/Intent');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $Intent$NullableType();
  static const type = $Intent$Type();
  static final _id_ACTION_AIRPLANE_MODE_CHANGED = _class.staticFieldId(
    r'ACTION_AIRPLANE_MODE_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_AIRPLANE_MODE_CHANGED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_AIRPLANE_MODE_CHANGED =>
      _id_ACTION_AIRPLANE_MODE_CHANGED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_ALL_APPS = _class.staticFieldId(
    r'ACTION_ALL_APPS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_ALL_APPS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_ALL_APPS => _id_ACTION_ALL_APPS.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_ANSWER = _class.staticFieldId(
    r'ACTION_ANSWER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_ANSWER`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_ANSWER => _id_ACTION_ANSWER.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_APPLICATION_LOCALE_CHANGED = _class.staticFieldId(
    r'ACTION_APPLICATION_LOCALE_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_APPLICATION_LOCALE_CHANGED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_APPLICATION_LOCALE_CHANGED =>
      _id_ACTION_APPLICATION_LOCALE_CHANGED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_APPLICATION_PREFERENCES = _class.staticFieldId(
    r'ACTION_APPLICATION_PREFERENCES',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_APPLICATION_PREFERENCES`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_APPLICATION_PREFERENCES =>
      _id_ACTION_APPLICATION_PREFERENCES.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_APPLICATION_RESTRICTIONS_CHANGED = _class.staticFieldId(
    r'ACTION_APPLICATION_RESTRICTIONS_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_APPLICATION_RESTRICTIONS_CHANGED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_APPLICATION_RESTRICTIONS_CHANGED =>
      _id_ACTION_APPLICATION_RESTRICTIONS_CHANGED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_APP_ERROR = _class.staticFieldId(
    r'ACTION_APP_ERROR',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_APP_ERROR`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_APP_ERROR => _id_ACTION_APP_ERROR.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_ASSIST = _class.staticFieldId(
    r'ACTION_ASSIST',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_ASSIST`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_ASSIST => _id_ACTION_ASSIST.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_ATTACH_DATA = _class.staticFieldId(
    r'ACTION_ATTACH_DATA',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_ATTACH_DATA`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_ATTACH_DATA => _id_ACTION_ATTACH_DATA.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_AUTO_REVOKE_PERMISSIONS = _class.staticFieldId(
    r'ACTION_AUTO_REVOKE_PERMISSIONS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_AUTO_REVOKE_PERMISSIONS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_AUTO_REVOKE_PERMISSIONS =>
      _id_ACTION_AUTO_REVOKE_PERMISSIONS.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_BATTERY_CHANGED = _class.staticFieldId(
    r'ACTION_BATTERY_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_BATTERY_CHANGED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_BATTERY_CHANGED =>
      _id_ACTION_BATTERY_CHANGED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_BATTERY_LOW = _class.staticFieldId(
    r'ACTION_BATTERY_LOW',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_BATTERY_LOW`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_BATTERY_LOW => _id_ACTION_BATTERY_LOW.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_BATTERY_OKAY = _class.staticFieldId(
    r'ACTION_BATTERY_OKAY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_BATTERY_OKAY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_BATTERY_OKAY =>
      _id_ACTION_BATTERY_OKAY.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_BOOT_COMPLETED = _class.staticFieldId(
    r'ACTION_BOOT_COMPLETED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_BOOT_COMPLETED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_BOOT_COMPLETED =>
      _id_ACTION_BOOT_COMPLETED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_BUG_REPORT = _class.staticFieldId(
    r'ACTION_BUG_REPORT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_BUG_REPORT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_BUG_REPORT => _id_ACTION_BUG_REPORT.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_CALL = _class.staticFieldId(
    r'ACTION_CALL',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_CALL`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_CALL => _id_ACTION_CALL.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_CALL_BUTTON = _class.staticFieldId(
    r'ACTION_CALL_BUTTON',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_CALL_BUTTON`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_CALL_BUTTON => _id_ACTION_CALL_BUTTON.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_CAMERA_BUTTON = _class.staticFieldId(
    r'ACTION_CAMERA_BUTTON',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_CAMERA_BUTTON`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_CAMERA_BUTTON =>
      _id_ACTION_CAMERA_BUTTON.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_CARRIER_SETUP = _class.staticFieldId(
    r'ACTION_CARRIER_SETUP',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_CARRIER_SETUP`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_CARRIER_SETUP =>
      _id_ACTION_CARRIER_SETUP.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_CHOOSER = _class.staticFieldId(
    r'ACTION_CHOOSER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_CHOOSER`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_CHOOSER => _id_ACTION_CHOOSER.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_CLOSE_SYSTEM_DIALOGS = _class.staticFieldId(
    r'ACTION_CLOSE_SYSTEM_DIALOGS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_CLOSE_SYSTEM_DIALOGS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_CLOSE_SYSTEM_DIALOGS =>
      _id_ACTION_CLOSE_SYSTEM_DIALOGS.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_CONFIGURATION_CHANGED = _class.staticFieldId(
    r'ACTION_CONFIGURATION_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_CONFIGURATION_CHANGED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_CONFIGURATION_CHANGED =>
      _id_ACTION_CONFIGURATION_CHANGED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_CREATE_DOCUMENT = _class.staticFieldId(
    r'ACTION_CREATE_DOCUMENT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_CREATE_DOCUMENT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_CREATE_DOCUMENT =>
      _id_ACTION_CREATE_DOCUMENT.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_CREATE_NOTE = _class.staticFieldId(
    r'ACTION_CREATE_NOTE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_CREATE_NOTE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_CREATE_NOTE => _id_ACTION_CREATE_NOTE.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_CREATE_REMINDER = _class.staticFieldId(
    r'ACTION_CREATE_REMINDER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_CREATE_REMINDER`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_CREATE_REMINDER =>
      _id_ACTION_CREATE_REMINDER.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_CREATE_SHORTCUT = _class.staticFieldId(
    r'ACTION_CREATE_SHORTCUT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_CREATE_SHORTCUT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_CREATE_SHORTCUT =>
      _id_ACTION_CREATE_SHORTCUT.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_DATE_CHANGED = _class.staticFieldId(
    r'ACTION_DATE_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_DATE_CHANGED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_DATE_CHANGED =>
      _id_ACTION_DATE_CHANGED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_DEFAULT = _class.staticFieldId(
    r'ACTION_DEFAULT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_DEFAULT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_DEFAULT => _id_ACTION_DEFAULT.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_DEFINE = _class.staticFieldId(
    r'ACTION_DEFINE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_DEFINE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_DEFINE => _id_ACTION_DEFINE.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_DELETE = _class.staticFieldId(
    r'ACTION_DELETE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_DELETE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_DELETE => _id_ACTION_DELETE.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_DEVICE_STORAGE_LOW = _class.staticFieldId(
    r'ACTION_DEVICE_STORAGE_LOW',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_DEVICE_STORAGE_LOW`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_DEVICE_STORAGE_LOW =>
      _id_ACTION_DEVICE_STORAGE_LOW.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_DEVICE_STORAGE_OK = _class.staticFieldId(
    r'ACTION_DEVICE_STORAGE_OK',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_DEVICE_STORAGE_OK`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_DEVICE_STORAGE_OK =>
      _id_ACTION_DEVICE_STORAGE_OK.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_DIAL = _class.staticFieldId(
    r'ACTION_DIAL',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_DIAL`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_DIAL => _id_ACTION_DIAL.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_DOCK_EVENT = _class.staticFieldId(
    r'ACTION_DOCK_EVENT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_DOCK_EVENT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_DOCK_EVENT => _id_ACTION_DOCK_EVENT.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_DREAMING_STARTED = _class.staticFieldId(
    r'ACTION_DREAMING_STARTED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_DREAMING_STARTED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_DREAMING_STARTED =>
      _id_ACTION_DREAMING_STARTED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_DREAMING_STOPPED = _class.staticFieldId(
    r'ACTION_DREAMING_STOPPED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_DREAMING_STOPPED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_DREAMING_STOPPED =>
      _id_ACTION_DREAMING_STOPPED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_EDIT = _class.staticFieldId(
    r'ACTION_EDIT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_EDIT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_EDIT => _id_ACTION_EDIT.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_EXTERNAL_APPLICATIONS_AVAILABLE = _class.staticFieldId(
    r'ACTION_EXTERNAL_APPLICATIONS_AVAILABLE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_EXTERNAL_APPLICATIONS_AVAILABLE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_EXTERNAL_APPLICATIONS_AVAILABLE =>
      _id_ACTION_EXTERNAL_APPLICATIONS_AVAILABLE.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE = _class.staticFieldId(
    r'ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE =>
      _id_ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_FACTORY_TEST = _class.staticFieldId(
    r'ACTION_FACTORY_TEST',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_FACTORY_TEST`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_FACTORY_TEST =>
      _id_ACTION_FACTORY_TEST.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_GET_CONTENT = _class.staticFieldId(
    r'ACTION_GET_CONTENT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_GET_CONTENT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_GET_CONTENT => _id_ACTION_GET_CONTENT.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_GET_RESTRICTION_ENTRIES = _class.staticFieldId(
    r'ACTION_GET_RESTRICTION_ENTRIES',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_GET_RESTRICTION_ENTRIES`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_GET_RESTRICTION_ENTRIES =>
      _id_ACTION_GET_RESTRICTION_ENTRIES.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_GTALK_SERVICE_CONNECTED = _class.staticFieldId(
    r'ACTION_GTALK_SERVICE_CONNECTED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_GTALK_SERVICE_CONNECTED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_GTALK_SERVICE_CONNECTED =>
      _id_ACTION_GTALK_SERVICE_CONNECTED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_GTALK_SERVICE_DISCONNECTED = _class.staticFieldId(
    r'ACTION_GTALK_SERVICE_DISCONNECTED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_GTALK_SERVICE_DISCONNECTED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_GTALK_SERVICE_DISCONNECTED =>
      _id_ACTION_GTALK_SERVICE_DISCONNECTED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_HEADSET_PLUG = _class.staticFieldId(
    r'ACTION_HEADSET_PLUG',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_HEADSET_PLUG`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_HEADSET_PLUG =>
      _id_ACTION_HEADSET_PLUG.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_INPUT_METHOD_CHANGED = _class.staticFieldId(
    r'ACTION_INPUT_METHOD_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_INPUT_METHOD_CHANGED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_INPUT_METHOD_CHANGED =>
      _id_ACTION_INPUT_METHOD_CHANGED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_INSERT = _class.staticFieldId(
    r'ACTION_INSERT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_INSERT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_INSERT => _id_ACTION_INSERT.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_INSERT_OR_EDIT = _class.staticFieldId(
    r'ACTION_INSERT_OR_EDIT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_INSERT_OR_EDIT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_INSERT_OR_EDIT =>
      _id_ACTION_INSERT_OR_EDIT.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_INSTALL_FAILURE = _class.staticFieldId(
    r'ACTION_INSTALL_FAILURE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_INSTALL_FAILURE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_INSTALL_FAILURE =>
      _id_ACTION_INSTALL_FAILURE.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_INSTALL_PACKAGE = _class.staticFieldId(
    r'ACTION_INSTALL_PACKAGE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_INSTALL_PACKAGE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_INSTALL_PACKAGE =>
      _id_ACTION_INSTALL_PACKAGE.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_LAUNCH_CAPTURE_CONTENT_ACTIVITY_FOR_NOTE = _class.staticFieldId(
    r'ACTION_LAUNCH_CAPTURE_CONTENT_ACTIVITY_FOR_NOTE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_LAUNCH_CAPTURE_CONTENT_ACTIVITY_FOR_NOTE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_LAUNCH_CAPTURE_CONTENT_ACTIVITY_FOR_NOTE =>
      _id_ACTION_LAUNCH_CAPTURE_CONTENT_ACTIVITY_FOR_NOTE.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_LOCALE_CHANGED = _class.staticFieldId(
    r'ACTION_LOCALE_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_LOCALE_CHANGED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_LOCALE_CHANGED =>
      _id_ACTION_LOCALE_CHANGED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_LOCKED_BOOT_COMPLETED = _class.staticFieldId(
    r'ACTION_LOCKED_BOOT_COMPLETED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_LOCKED_BOOT_COMPLETED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_LOCKED_BOOT_COMPLETED =>
      _id_ACTION_LOCKED_BOOT_COMPLETED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_MAIN = _class.staticFieldId(
    r'ACTION_MAIN',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MAIN`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MAIN => _id_ACTION_MAIN.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_MANAGED_PROFILE_ADDED = _class.staticFieldId(
    r'ACTION_MANAGED_PROFILE_ADDED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MANAGED_PROFILE_ADDED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MANAGED_PROFILE_ADDED =>
      _id_ACTION_MANAGED_PROFILE_ADDED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_MANAGED_PROFILE_AVAILABLE = _class.staticFieldId(
    r'ACTION_MANAGED_PROFILE_AVAILABLE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MANAGED_PROFILE_AVAILABLE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MANAGED_PROFILE_AVAILABLE =>
      _id_ACTION_MANAGED_PROFILE_AVAILABLE.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_MANAGED_PROFILE_REMOVED = _class.staticFieldId(
    r'ACTION_MANAGED_PROFILE_REMOVED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MANAGED_PROFILE_REMOVED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MANAGED_PROFILE_REMOVED =>
      _id_ACTION_MANAGED_PROFILE_REMOVED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_MANAGED_PROFILE_UNAVAILABLE = _class.staticFieldId(
    r'ACTION_MANAGED_PROFILE_UNAVAILABLE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MANAGED_PROFILE_UNAVAILABLE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MANAGED_PROFILE_UNAVAILABLE =>
      _id_ACTION_MANAGED_PROFILE_UNAVAILABLE.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_MANAGED_PROFILE_UNLOCKED = _class.staticFieldId(
    r'ACTION_MANAGED_PROFILE_UNLOCKED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MANAGED_PROFILE_UNLOCKED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MANAGED_PROFILE_UNLOCKED =>
      _id_ACTION_MANAGED_PROFILE_UNLOCKED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_MANAGE_NETWORK_USAGE = _class.staticFieldId(
    r'ACTION_MANAGE_NETWORK_USAGE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MANAGE_NETWORK_USAGE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MANAGE_NETWORK_USAGE =>
      _id_ACTION_MANAGE_NETWORK_USAGE.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_MANAGE_PACKAGE_STORAGE = _class.staticFieldId(
    r'ACTION_MANAGE_PACKAGE_STORAGE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MANAGE_PACKAGE_STORAGE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MANAGE_PACKAGE_STORAGE =>
      _id_ACTION_MANAGE_PACKAGE_STORAGE.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_MANAGE_UNUSED_APPS = _class.staticFieldId(
    r'ACTION_MANAGE_UNUSED_APPS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MANAGE_UNUSED_APPS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MANAGE_UNUSED_APPS =>
      _id_ACTION_MANAGE_UNUSED_APPS.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_MEDIA_BAD_REMOVAL = _class.staticFieldId(
    r'ACTION_MEDIA_BAD_REMOVAL',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MEDIA_BAD_REMOVAL`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MEDIA_BAD_REMOVAL =>
      _id_ACTION_MEDIA_BAD_REMOVAL.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_MEDIA_BUTTON = _class.staticFieldId(
    r'ACTION_MEDIA_BUTTON',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MEDIA_BUTTON`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MEDIA_BUTTON =>
      _id_ACTION_MEDIA_BUTTON.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_MEDIA_CHECKING = _class.staticFieldId(
    r'ACTION_MEDIA_CHECKING',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MEDIA_CHECKING`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MEDIA_CHECKING =>
      _id_ACTION_MEDIA_CHECKING.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_MEDIA_EJECT = _class.staticFieldId(
    r'ACTION_MEDIA_EJECT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MEDIA_EJECT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MEDIA_EJECT => _id_ACTION_MEDIA_EJECT.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_MEDIA_MOUNTED = _class.staticFieldId(
    r'ACTION_MEDIA_MOUNTED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MEDIA_MOUNTED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MEDIA_MOUNTED =>
      _id_ACTION_MEDIA_MOUNTED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_MEDIA_NOFS = _class.staticFieldId(
    r'ACTION_MEDIA_NOFS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MEDIA_NOFS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MEDIA_NOFS => _id_ACTION_MEDIA_NOFS.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_MEDIA_REMOVED = _class.staticFieldId(
    r'ACTION_MEDIA_REMOVED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MEDIA_REMOVED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MEDIA_REMOVED =>
      _id_ACTION_MEDIA_REMOVED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_MEDIA_SCANNER_FINISHED = _class.staticFieldId(
    r'ACTION_MEDIA_SCANNER_FINISHED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MEDIA_SCANNER_FINISHED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MEDIA_SCANNER_FINISHED =>
      _id_ACTION_MEDIA_SCANNER_FINISHED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_MEDIA_SCANNER_SCAN_FILE = _class.staticFieldId(
    r'ACTION_MEDIA_SCANNER_SCAN_FILE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MEDIA_SCANNER_SCAN_FILE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MEDIA_SCANNER_SCAN_FILE =>
      _id_ACTION_MEDIA_SCANNER_SCAN_FILE.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_MEDIA_SCANNER_STARTED = _class.staticFieldId(
    r'ACTION_MEDIA_SCANNER_STARTED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MEDIA_SCANNER_STARTED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MEDIA_SCANNER_STARTED =>
      _id_ACTION_MEDIA_SCANNER_STARTED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_MEDIA_SHARED = _class.staticFieldId(
    r'ACTION_MEDIA_SHARED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MEDIA_SHARED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MEDIA_SHARED =>
      _id_ACTION_MEDIA_SHARED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_MEDIA_UNMOUNTABLE = _class.staticFieldId(
    r'ACTION_MEDIA_UNMOUNTABLE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MEDIA_UNMOUNTABLE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MEDIA_UNMOUNTABLE =>
      _id_ACTION_MEDIA_UNMOUNTABLE.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_MEDIA_UNMOUNTED = _class.staticFieldId(
    r'ACTION_MEDIA_UNMOUNTED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MEDIA_UNMOUNTED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MEDIA_UNMOUNTED =>
      _id_ACTION_MEDIA_UNMOUNTED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_MY_PACKAGE_REPLACED = _class.staticFieldId(
    r'ACTION_MY_PACKAGE_REPLACED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MY_PACKAGE_REPLACED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MY_PACKAGE_REPLACED =>
      _id_ACTION_MY_PACKAGE_REPLACED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_MY_PACKAGE_SUSPENDED = _class.staticFieldId(
    r'ACTION_MY_PACKAGE_SUSPENDED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MY_PACKAGE_SUSPENDED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MY_PACKAGE_SUSPENDED =>
      _id_ACTION_MY_PACKAGE_SUSPENDED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_MY_PACKAGE_UNSUSPENDED = _class.staticFieldId(
    r'ACTION_MY_PACKAGE_UNSUSPENDED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_MY_PACKAGE_UNSUSPENDED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_MY_PACKAGE_UNSUSPENDED =>
      _id_ACTION_MY_PACKAGE_UNSUSPENDED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_NEW_OUTGOING_CALL = _class.staticFieldId(
    r'ACTION_NEW_OUTGOING_CALL',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_NEW_OUTGOING_CALL`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_NEW_OUTGOING_CALL =>
      _id_ACTION_NEW_OUTGOING_CALL.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_OPEN_DOCUMENT = _class.staticFieldId(
    r'ACTION_OPEN_DOCUMENT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_OPEN_DOCUMENT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_OPEN_DOCUMENT =>
      _id_ACTION_OPEN_DOCUMENT.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_OPEN_DOCUMENT_TREE = _class.staticFieldId(
    r'ACTION_OPEN_DOCUMENT_TREE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_OPEN_DOCUMENT_TREE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_OPEN_DOCUMENT_TREE =>
      _id_ACTION_OPEN_DOCUMENT_TREE.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_PACKAGES_SUSPENDED = _class.staticFieldId(
    r'ACTION_PACKAGES_SUSPENDED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_PACKAGES_SUSPENDED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_PACKAGES_SUSPENDED =>
      _id_ACTION_PACKAGES_SUSPENDED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_PACKAGES_UNSUSPENDED = _class.staticFieldId(
    r'ACTION_PACKAGES_UNSUSPENDED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_PACKAGES_UNSUSPENDED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_PACKAGES_UNSUSPENDED =>
      _id_ACTION_PACKAGES_UNSUSPENDED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_PACKAGE_ADDED = _class.staticFieldId(
    r'ACTION_PACKAGE_ADDED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_PACKAGE_ADDED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_PACKAGE_ADDED =>
      _id_ACTION_PACKAGE_ADDED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_PACKAGE_CHANGED = _class.staticFieldId(
    r'ACTION_PACKAGE_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_PACKAGE_CHANGED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_PACKAGE_CHANGED =>
      _id_ACTION_PACKAGE_CHANGED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_PACKAGE_DATA_CLEARED = _class.staticFieldId(
    r'ACTION_PACKAGE_DATA_CLEARED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_PACKAGE_DATA_CLEARED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_PACKAGE_DATA_CLEARED =>
      _id_ACTION_PACKAGE_DATA_CLEARED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_PACKAGE_FIRST_LAUNCH = _class.staticFieldId(
    r'ACTION_PACKAGE_FIRST_LAUNCH',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_PACKAGE_FIRST_LAUNCH`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_PACKAGE_FIRST_LAUNCH =>
      _id_ACTION_PACKAGE_FIRST_LAUNCH.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_PACKAGE_FULLY_REMOVED = _class.staticFieldId(
    r'ACTION_PACKAGE_FULLY_REMOVED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_PACKAGE_FULLY_REMOVED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_PACKAGE_FULLY_REMOVED =>
      _id_ACTION_PACKAGE_FULLY_REMOVED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_PACKAGE_INSTALL = _class.staticFieldId(
    r'ACTION_PACKAGE_INSTALL',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_PACKAGE_INSTALL`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_PACKAGE_INSTALL =>
      _id_ACTION_PACKAGE_INSTALL.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_PACKAGE_NEEDS_VERIFICATION = _class.staticFieldId(
    r'ACTION_PACKAGE_NEEDS_VERIFICATION',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_PACKAGE_NEEDS_VERIFICATION`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_PACKAGE_NEEDS_VERIFICATION =>
      _id_ACTION_PACKAGE_NEEDS_VERIFICATION.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_PACKAGE_REMOVED = _class.staticFieldId(
    r'ACTION_PACKAGE_REMOVED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_PACKAGE_REMOVED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_PACKAGE_REMOVED =>
      _id_ACTION_PACKAGE_REMOVED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_PACKAGE_REPLACED = _class.staticFieldId(
    r'ACTION_PACKAGE_REPLACED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_PACKAGE_REPLACED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_PACKAGE_REPLACED =>
      _id_ACTION_PACKAGE_REPLACED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_PACKAGE_RESTARTED = _class.staticFieldId(
    r'ACTION_PACKAGE_RESTARTED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_PACKAGE_RESTARTED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_PACKAGE_RESTARTED =>
      _id_ACTION_PACKAGE_RESTARTED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_PACKAGE_UNSTOPPED = _class.staticFieldId(
    r'ACTION_PACKAGE_UNSTOPPED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_PACKAGE_UNSTOPPED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_PACKAGE_UNSTOPPED =>
      _id_ACTION_PACKAGE_UNSTOPPED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_PACKAGE_VERIFIED = _class.staticFieldId(
    r'ACTION_PACKAGE_VERIFIED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_PACKAGE_VERIFIED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_PACKAGE_VERIFIED =>
      _id_ACTION_PACKAGE_VERIFIED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_PASTE = _class.staticFieldId(
    r'ACTION_PASTE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_PASTE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_PASTE => _id_ACTION_PASTE.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_PICK = _class.staticFieldId(
    r'ACTION_PICK',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_PICK`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_PICK => _id_ACTION_PICK.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_PICK_ACTIVITY = _class.staticFieldId(
    r'ACTION_PICK_ACTIVITY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_PICK_ACTIVITY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_PICK_ACTIVITY =>
      _id_ACTION_PICK_ACTIVITY.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_POWER_CONNECTED = _class.staticFieldId(
    r'ACTION_POWER_CONNECTED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_POWER_CONNECTED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_POWER_CONNECTED =>
      _id_ACTION_POWER_CONNECTED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_POWER_DISCONNECTED = _class.staticFieldId(
    r'ACTION_POWER_DISCONNECTED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_POWER_DISCONNECTED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_POWER_DISCONNECTED =>
      _id_ACTION_POWER_DISCONNECTED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_POWER_USAGE_SUMMARY = _class.staticFieldId(
    r'ACTION_POWER_USAGE_SUMMARY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_POWER_USAGE_SUMMARY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_POWER_USAGE_SUMMARY =>
      _id_ACTION_POWER_USAGE_SUMMARY.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_PROCESS_TEXT = _class.staticFieldId(
    r'ACTION_PROCESS_TEXT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_PROCESS_TEXT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_PROCESS_TEXT =>
      _id_ACTION_PROCESS_TEXT.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_PROFILE_ACCESSIBLE = _class.staticFieldId(
    r'ACTION_PROFILE_ACCESSIBLE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_PROFILE_ACCESSIBLE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_PROFILE_ACCESSIBLE =>
      _id_ACTION_PROFILE_ACCESSIBLE.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_PROFILE_ADDED = _class.staticFieldId(
    r'ACTION_PROFILE_ADDED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_PROFILE_ADDED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_PROFILE_ADDED =>
      _id_ACTION_PROFILE_ADDED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_PROFILE_AVAILABLE = _class.staticFieldId(
    r'ACTION_PROFILE_AVAILABLE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_PROFILE_AVAILABLE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_PROFILE_AVAILABLE =>
      _id_ACTION_PROFILE_AVAILABLE.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_PROFILE_INACCESSIBLE = _class.staticFieldId(
    r'ACTION_PROFILE_INACCESSIBLE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_PROFILE_INACCESSIBLE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_PROFILE_INACCESSIBLE =>
      _id_ACTION_PROFILE_INACCESSIBLE.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_PROFILE_REMOVED = _class.staticFieldId(
    r'ACTION_PROFILE_REMOVED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_PROFILE_REMOVED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_PROFILE_REMOVED =>
      _id_ACTION_PROFILE_REMOVED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_PROFILE_UNAVAILABLE = _class.staticFieldId(
    r'ACTION_PROFILE_UNAVAILABLE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_PROFILE_UNAVAILABLE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_PROFILE_UNAVAILABLE =>
      _id_ACTION_PROFILE_UNAVAILABLE.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_PROVIDER_CHANGED = _class.staticFieldId(
    r'ACTION_PROVIDER_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_PROVIDER_CHANGED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_PROVIDER_CHANGED =>
      _id_ACTION_PROVIDER_CHANGED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_QUICK_CLOCK = _class.staticFieldId(
    r'ACTION_QUICK_CLOCK',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_QUICK_CLOCK`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_QUICK_CLOCK => _id_ACTION_QUICK_CLOCK.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_QUICK_VIEW = _class.staticFieldId(
    r'ACTION_QUICK_VIEW',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_QUICK_VIEW`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_QUICK_VIEW => _id_ACTION_QUICK_VIEW.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_REBOOT = _class.staticFieldId(
    r'ACTION_REBOOT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_REBOOT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_REBOOT => _id_ACTION_REBOOT.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_RUN = _class.staticFieldId(
    r'ACTION_RUN',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_RUN`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_RUN => _id_ACTION_RUN.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_SAFETY_CENTER = _class.staticFieldId(
    r'ACTION_SAFETY_CENTER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_SAFETY_CENTER`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_SAFETY_CENTER =>
      _id_ACTION_SAFETY_CENTER.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_SCREEN_OFF = _class.staticFieldId(
    r'ACTION_SCREEN_OFF',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_SCREEN_OFF`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_SCREEN_OFF => _id_ACTION_SCREEN_OFF.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_SCREEN_ON = _class.staticFieldId(
    r'ACTION_SCREEN_ON',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_SCREEN_ON`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_SCREEN_ON => _id_ACTION_SCREEN_ON.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_SEARCH = _class.staticFieldId(
    r'ACTION_SEARCH',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_SEARCH`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_SEARCH => _id_ACTION_SEARCH.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_SEARCH_LONG_PRESS = _class.staticFieldId(
    r'ACTION_SEARCH_LONG_PRESS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_SEARCH_LONG_PRESS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_SEARCH_LONG_PRESS =>
      _id_ACTION_SEARCH_LONG_PRESS.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_SEND = _class.staticFieldId(
    r'ACTION_SEND',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_SEND`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_SEND => _id_ACTION_SEND.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_SENDTO = _class.staticFieldId(
    r'ACTION_SENDTO',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_SENDTO`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_SENDTO => _id_ACTION_SENDTO.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_SEND_MULTIPLE = _class.staticFieldId(
    r'ACTION_SEND_MULTIPLE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_SEND_MULTIPLE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_SEND_MULTIPLE =>
      _id_ACTION_SEND_MULTIPLE.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_SET_WALLPAPER = _class.staticFieldId(
    r'ACTION_SET_WALLPAPER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_SET_WALLPAPER`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_SET_WALLPAPER =>
      _id_ACTION_SET_WALLPAPER.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_SHOW_APP_INFO = _class.staticFieldId(
    r'ACTION_SHOW_APP_INFO',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_SHOW_APP_INFO`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_SHOW_APP_INFO =>
      _id_ACTION_SHOW_APP_INFO.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_SHOW_WORK_APPS = _class.staticFieldId(
    r'ACTION_SHOW_WORK_APPS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_SHOW_WORK_APPS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_SHOW_WORK_APPS =>
      _id_ACTION_SHOW_WORK_APPS.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_SHUTDOWN = _class.staticFieldId(
    r'ACTION_SHUTDOWN',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_SHUTDOWN`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_SHUTDOWN => _id_ACTION_SHUTDOWN.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_SYNC = _class.staticFieldId(
    r'ACTION_SYNC',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_SYNC`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_SYNC => _id_ACTION_SYNC.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_SYSTEM_TUTORIAL = _class.staticFieldId(
    r'ACTION_SYSTEM_TUTORIAL',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_SYSTEM_TUTORIAL`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_SYSTEM_TUTORIAL =>
      _id_ACTION_SYSTEM_TUTORIAL.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_TIMEZONE_CHANGED = _class.staticFieldId(
    r'ACTION_TIMEZONE_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_TIMEZONE_CHANGED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_TIMEZONE_CHANGED =>
      _id_ACTION_TIMEZONE_CHANGED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_TIME_CHANGED = _class.staticFieldId(
    r'ACTION_TIME_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_TIME_CHANGED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_TIME_CHANGED =>
      _id_ACTION_TIME_CHANGED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_TIME_TICK = _class.staticFieldId(
    r'ACTION_TIME_TICK',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_TIME_TICK`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_TIME_TICK => _id_ACTION_TIME_TICK.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_TRANSLATE = _class.staticFieldId(
    r'ACTION_TRANSLATE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_TRANSLATE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_TRANSLATE => _id_ACTION_TRANSLATE.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_UID_REMOVED = _class.staticFieldId(
    r'ACTION_UID_REMOVED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_UID_REMOVED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_UID_REMOVED => _id_ACTION_UID_REMOVED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_UMS_CONNECTED = _class.staticFieldId(
    r'ACTION_UMS_CONNECTED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_UMS_CONNECTED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_UMS_CONNECTED =>
      _id_ACTION_UMS_CONNECTED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_UMS_DISCONNECTED = _class.staticFieldId(
    r'ACTION_UMS_DISCONNECTED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_UMS_DISCONNECTED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_UMS_DISCONNECTED =>
      _id_ACTION_UMS_DISCONNECTED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_UNARCHIVE_PACKAGE = _class.staticFieldId(
    r'ACTION_UNARCHIVE_PACKAGE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_UNARCHIVE_PACKAGE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_UNARCHIVE_PACKAGE =>
      _id_ACTION_UNARCHIVE_PACKAGE.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_UNINSTALL_PACKAGE = _class.staticFieldId(
    r'ACTION_UNINSTALL_PACKAGE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_UNINSTALL_PACKAGE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_UNINSTALL_PACKAGE =>
      _id_ACTION_UNINSTALL_PACKAGE.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_USER_BACKGROUND = _class.staticFieldId(
    r'ACTION_USER_BACKGROUND',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_USER_BACKGROUND`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_USER_BACKGROUND =>
      _id_ACTION_USER_BACKGROUND.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_USER_FOREGROUND = _class.staticFieldId(
    r'ACTION_USER_FOREGROUND',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_USER_FOREGROUND`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_USER_FOREGROUND =>
      _id_ACTION_USER_FOREGROUND.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_USER_INITIALIZE = _class.staticFieldId(
    r'ACTION_USER_INITIALIZE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_USER_INITIALIZE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_USER_INITIALIZE =>
      _id_ACTION_USER_INITIALIZE.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_USER_PRESENT = _class.staticFieldId(
    r'ACTION_USER_PRESENT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_USER_PRESENT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_USER_PRESENT =>
      _id_ACTION_USER_PRESENT.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_USER_UNLOCKED = _class.staticFieldId(
    r'ACTION_USER_UNLOCKED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_USER_UNLOCKED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_USER_UNLOCKED =>
      _id_ACTION_USER_UNLOCKED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_VIEW = _class.staticFieldId(
    r'ACTION_VIEW',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_VIEW`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_VIEW => _id_ACTION_VIEW.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_VIEW_LOCUS = _class.staticFieldId(
    r'ACTION_VIEW_LOCUS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_VIEW_LOCUS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_VIEW_LOCUS => _id_ACTION_VIEW_LOCUS.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_VIEW_PERMISSION_USAGE = _class.staticFieldId(
    r'ACTION_VIEW_PERMISSION_USAGE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_VIEW_PERMISSION_USAGE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_VIEW_PERMISSION_USAGE =>
      _id_ACTION_VIEW_PERMISSION_USAGE.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_VIEW_PERMISSION_USAGE_FOR_PERIOD = _class.staticFieldId(
    r'ACTION_VIEW_PERMISSION_USAGE_FOR_PERIOD',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_VIEW_PERMISSION_USAGE_FOR_PERIOD`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_VIEW_PERMISSION_USAGE_FOR_PERIOD =>
      _id_ACTION_VIEW_PERMISSION_USAGE_FOR_PERIOD.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_VOICE_COMMAND = _class.staticFieldId(
    r'ACTION_VOICE_COMMAND',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_VOICE_COMMAND`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_VOICE_COMMAND =>
      _id_ACTION_VOICE_COMMAND.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_WALLPAPER_CHANGED = _class.staticFieldId(
    r'ACTION_WALLPAPER_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_WALLPAPER_CHANGED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_WALLPAPER_CHANGED =>
      _id_ACTION_WALLPAPER_CHANGED.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTION_WEB_SEARCH = _class.staticFieldId(
    r'ACTION_WEB_SEARCH',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_WEB_SEARCH`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_WEB_SEARCH => _id_ACTION_WEB_SEARCH.get(_class, const jni$_.JStringNullableType());

  /// from: `static public final int CAPTURE_CONTENT_FOR_NOTE_BLOCKED_BY_ADMIN`
  static const CAPTURE_CONTENT_FOR_NOTE_BLOCKED_BY_ADMIN = 4;

  /// from: `static public final int CAPTURE_CONTENT_FOR_NOTE_FAILED`
  static const CAPTURE_CONTENT_FOR_NOTE_FAILED = 1;

  /// from: `static public final int CAPTURE_CONTENT_FOR_NOTE_SUCCESS`
  static const CAPTURE_CONTENT_FOR_NOTE_SUCCESS = 0;

  /// from: `static public final int CAPTURE_CONTENT_FOR_NOTE_USER_CANCELED`
  static const CAPTURE_CONTENT_FOR_NOTE_USER_CANCELED = 2;

  /// from: `static public final int CAPTURE_CONTENT_FOR_NOTE_WINDOW_MODE_UNSUPPORTED`
  static const CAPTURE_CONTENT_FOR_NOTE_WINDOW_MODE_UNSUPPORTED = 3;
  static final _id_CATEGORY_ACCESSIBILITY_SHORTCUT_TARGET = _class.staticFieldId(
    r'CATEGORY_ACCESSIBILITY_SHORTCUT_TARGET',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_ACCESSIBILITY_SHORTCUT_TARGET`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_ACCESSIBILITY_SHORTCUT_TARGET =>
      _id_CATEGORY_ACCESSIBILITY_SHORTCUT_TARGET.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_ALTERNATIVE = _class.staticFieldId(
    r'CATEGORY_ALTERNATIVE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_ALTERNATIVE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_ALTERNATIVE =>
      _id_CATEGORY_ALTERNATIVE.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_APP_BROWSER = _class.staticFieldId(
    r'CATEGORY_APP_BROWSER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_APP_BROWSER`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_APP_BROWSER =>
      _id_CATEGORY_APP_BROWSER.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_APP_CALCULATOR = _class.staticFieldId(
    r'CATEGORY_APP_CALCULATOR',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_APP_CALCULATOR`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_APP_CALCULATOR =>
      _id_CATEGORY_APP_CALCULATOR.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_APP_CALENDAR = _class.staticFieldId(
    r'CATEGORY_APP_CALENDAR',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_APP_CALENDAR`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_APP_CALENDAR =>
      _id_CATEGORY_APP_CALENDAR.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_APP_CONTACTS = _class.staticFieldId(
    r'CATEGORY_APP_CONTACTS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_APP_CONTACTS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_APP_CONTACTS =>
      _id_CATEGORY_APP_CONTACTS.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_APP_EMAIL = _class.staticFieldId(
    r'CATEGORY_APP_EMAIL',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_APP_EMAIL`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_APP_EMAIL => _id_CATEGORY_APP_EMAIL.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_APP_FILES = _class.staticFieldId(
    r'CATEGORY_APP_FILES',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_APP_FILES`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_APP_FILES => _id_CATEGORY_APP_FILES.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_APP_FITNESS = _class.staticFieldId(
    r'CATEGORY_APP_FITNESS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_APP_FITNESS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_APP_FITNESS =>
      _id_CATEGORY_APP_FITNESS.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_APP_GALLERY = _class.staticFieldId(
    r'CATEGORY_APP_GALLERY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_APP_GALLERY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_APP_GALLERY =>
      _id_CATEGORY_APP_GALLERY.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_APP_MAPS = _class.staticFieldId(
    r'CATEGORY_APP_MAPS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_APP_MAPS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_APP_MAPS => _id_CATEGORY_APP_MAPS.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_APP_MARKET = _class.staticFieldId(
    r'CATEGORY_APP_MARKET',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_APP_MARKET`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_APP_MARKET =>
      _id_CATEGORY_APP_MARKET.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_APP_MESSAGING = _class.staticFieldId(
    r'CATEGORY_APP_MESSAGING',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_APP_MESSAGING`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_APP_MESSAGING =>
      _id_CATEGORY_APP_MESSAGING.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_APP_MUSIC = _class.staticFieldId(
    r'CATEGORY_APP_MUSIC',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_APP_MUSIC`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_APP_MUSIC => _id_CATEGORY_APP_MUSIC.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_APP_WEATHER = _class.staticFieldId(
    r'CATEGORY_APP_WEATHER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_APP_WEATHER`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_APP_WEATHER =>
      _id_CATEGORY_APP_WEATHER.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_BROWSABLE = _class.staticFieldId(
    r'CATEGORY_BROWSABLE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_BROWSABLE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_BROWSABLE => _id_CATEGORY_BROWSABLE.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_CAR_DOCK = _class.staticFieldId(
    r'CATEGORY_CAR_DOCK',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_CAR_DOCK`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_CAR_DOCK => _id_CATEGORY_CAR_DOCK.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_CAR_MODE = _class.staticFieldId(
    r'CATEGORY_CAR_MODE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_CAR_MODE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_CAR_MODE => _id_CATEGORY_CAR_MODE.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_DEFAULT = _class.staticFieldId(
    r'CATEGORY_DEFAULT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_DEFAULT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_DEFAULT => _id_CATEGORY_DEFAULT.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_DESK_DOCK = _class.staticFieldId(
    r'CATEGORY_DESK_DOCK',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_DESK_DOCK`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_DESK_DOCK => _id_CATEGORY_DESK_DOCK.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_DEVELOPMENT_PREFERENCE = _class.staticFieldId(
    r'CATEGORY_DEVELOPMENT_PREFERENCE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_DEVELOPMENT_PREFERENCE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_DEVELOPMENT_PREFERENCE =>
      _id_CATEGORY_DEVELOPMENT_PREFERENCE.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_EMBED = _class.staticFieldId(
    r'CATEGORY_EMBED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_EMBED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_EMBED => _id_CATEGORY_EMBED.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_FRAMEWORK_INSTRUMENTATION_TEST = _class.staticFieldId(
    r'CATEGORY_FRAMEWORK_INSTRUMENTATION_TEST',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_FRAMEWORK_INSTRUMENTATION_TEST`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_FRAMEWORK_INSTRUMENTATION_TEST =>
      _id_CATEGORY_FRAMEWORK_INSTRUMENTATION_TEST.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_HE_DESK_DOCK = _class.staticFieldId(
    r'CATEGORY_HE_DESK_DOCK',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_HE_DESK_DOCK`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_HE_DESK_DOCK =>
      _id_CATEGORY_HE_DESK_DOCK.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_HOME = _class.staticFieldId(
    r'CATEGORY_HOME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_HOME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_HOME => _id_CATEGORY_HOME.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_INFO = _class.staticFieldId(
    r'CATEGORY_INFO',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_INFO`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_INFO => _id_CATEGORY_INFO.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_LAUNCHER = _class.staticFieldId(
    r'CATEGORY_LAUNCHER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_LAUNCHER`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_LAUNCHER => _id_CATEGORY_LAUNCHER.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_LEANBACK_LAUNCHER = _class.staticFieldId(
    r'CATEGORY_LEANBACK_LAUNCHER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_LEANBACK_LAUNCHER`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_LEANBACK_LAUNCHER =>
      _id_CATEGORY_LEANBACK_LAUNCHER.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_LE_DESK_DOCK = _class.staticFieldId(
    r'CATEGORY_LE_DESK_DOCK',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_LE_DESK_DOCK`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_LE_DESK_DOCK =>
      _id_CATEGORY_LE_DESK_DOCK.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_MONKEY = _class.staticFieldId(
    r'CATEGORY_MONKEY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_MONKEY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_MONKEY => _id_CATEGORY_MONKEY.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_OPENABLE = _class.staticFieldId(
    r'CATEGORY_OPENABLE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_OPENABLE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_OPENABLE => _id_CATEGORY_OPENABLE.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_PREFERENCE = _class.staticFieldId(
    r'CATEGORY_PREFERENCE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_PREFERENCE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_PREFERENCE =>
      _id_CATEGORY_PREFERENCE.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_SAMPLE_CODE = _class.staticFieldId(
    r'CATEGORY_SAMPLE_CODE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_SAMPLE_CODE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_SAMPLE_CODE =>
      _id_CATEGORY_SAMPLE_CODE.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_SECONDARY_HOME = _class.staticFieldId(
    r'CATEGORY_SECONDARY_HOME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_SECONDARY_HOME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_SECONDARY_HOME =>
      _id_CATEGORY_SECONDARY_HOME.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_SELECTED_ALTERNATIVE = _class.staticFieldId(
    r'CATEGORY_SELECTED_ALTERNATIVE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_SELECTED_ALTERNATIVE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_SELECTED_ALTERNATIVE =>
      _id_CATEGORY_SELECTED_ALTERNATIVE.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_TAB = _class.staticFieldId(
    r'CATEGORY_TAB',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_TAB`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_TAB => _id_CATEGORY_TAB.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_TEST = _class.staticFieldId(
    r'CATEGORY_TEST',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_TEST`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_TEST => _id_CATEGORY_TEST.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_TYPED_OPENABLE = _class.staticFieldId(
    r'CATEGORY_TYPED_OPENABLE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_TYPED_OPENABLE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_TYPED_OPENABLE =>
      _id_CATEGORY_TYPED_OPENABLE.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_UNIT_TEST = _class.staticFieldId(
    r'CATEGORY_UNIT_TEST',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_UNIT_TEST`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_UNIT_TEST => _id_CATEGORY_UNIT_TEST.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_VOICE = _class.staticFieldId(
    r'CATEGORY_VOICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_VOICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_VOICE => _id_CATEGORY_VOICE.get(_class, const jni$_.JStringNullableType());

  static final _id_CATEGORY_VR_HOME = _class.staticFieldId(
    r'CATEGORY_VR_HOME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CATEGORY_VR_HOME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CATEGORY_VR_HOME => _id_CATEGORY_VR_HOME.get(_class, const jni$_.JStringNullableType());

  /// from: `static public final int CHOOSER_CONTENT_TYPE_ALBUM`
  static const CHOOSER_CONTENT_TYPE_ALBUM = 1;
  static final _id_CREATOR = _class.staticFieldId(
    r'CREATOR',
    r'Landroid/os/Parcelable$Creator;',
  );

  /// from: `static public final android.os.Parcelable$Creator<android.content.Intent> CREATOR`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JObject? get CREATOR => _id_CREATOR.get(_class, const jni$_.JObjectNullableType());

  static final _id_EXTRA_ALARM_COUNT = _class.staticFieldId(
    r'EXTRA_ALARM_COUNT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ALARM_COUNT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ALARM_COUNT => _id_EXTRA_ALARM_COUNT.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ALLOW_MULTIPLE = _class.staticFieldId(
    r'EXTRA_ALLOW_MULTIPLE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ALLOW_MULTIPLE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ALLOW_MULTIPLE =>
      _id_EXTRA_ALLOW_MULTIPLE.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ALLOW_REPLACE = _class.staticFieldId(
    r'EXTRA_ALLOW_REPLACE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ALLOW_REPLACE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ALLOW_REPLACE =>
      _id_EXTRA_ALLOW_REPLACE.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ALTERNATE_INTENTS = _class.staticFieldId(
    r'EXTRA_ALTERNATE_INTENTS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ALTERNATE_INTENTS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ALTERNATE_INTENTS =>
      _id_EXTRA_ALTERNATE_INTENTS.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ARCHIVAL = _class.staticFieldId(
    r'EXTRA_ARCHIVAL',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ARCHIVAL`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ARCHIVAL => _id_EXTRA_ARCHIVAL.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ASSIST_CONTEXT = _class.staticFieldId(
    r'EXTRA_ASSIST_CONTEXT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ASSIST_CONTEXT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ASSIST_CONTEXT =>
      _id_EXTRA_ASSIST_CONTEXT.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ASSIST_INPUT_DEVICE_ID = _class.staticFieldId(
    r'EXTRA_ASSIST_INPUT_DEVICE_ID',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ASSIST_INPUT_DEVICE_ID`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ASSIST_INPUT_DEVICE_ID =>
      _id_EXTRA_ASSIST_INPUT_DEVICE_ID.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ASSIST_INPUT_HINT_KEYBOARD = _class.staticFieldId(
    r'EXTRA_ASSIST_INPUT_HINT_KEYBOARD',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ASSIST_INPUT_HINT_KEYBOARD`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ASSIST_INPUT_HINT_KEYBOARD =>
      _id_EXTRA_ASSIST_INPUT_HINT_KEYBOARD.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ASSIST_PACKAGE = _class.staticFieldId(
    r'EXTRA_ASSIST_PACKAGE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ASSIST_PACKAGE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ASSIST_PACKAGE =>
      _id_EXTRA_ASSIST_PACKAGE.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ASSIST_UID = _class.staticFieldId(
    r'EXTRA_ASSIST_UID',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ASSIST_UID`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ASSIST_UID => _id_EXTRA_ASSIST_UID.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ATTRIBUTION_TAGS = _class.staticFieldId(
    r'EXTRA_ATTRIBUTION_TAGS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ATTRIBUTION_TAGS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ATTRIBUTION_TAGS =>
      _id_EXTRA_ATTRIBUTION_TAGS.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_AUTO_LAUNCH_SINGLE_CHOICE = _class.staticFieldId(
    r'EXTRA_AUTO_LAUNCH_SINGLE_CHOICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_AUTO_LAUNCH_SINGLE_CHOICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_AUTO_LAUNCH_SINGLE_CHOICE =>
      _id_EXTRA_AUTO_LAUNCH_SINGLE_CHOICE.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_BCC = _class.staticFieldId(
    r'EXTRA_BCC',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_BCC`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_BCC => _id_EXTRA_BCC.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_BUG_REPORT = _class.staticFieldId(
    r'EXTRA_BUG_REPORT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_BUG_REPORT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_BUG_REPORT => _id_EXTRA_BUG_REPORT.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_CAPTURE_CONTENT_FOR_NOTE_STATUS_CODE = _class.staticFieldId(
    r'EXTRA_CAPTURE_CONTENT_FOR_NOTE_STATUS_CODE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_CAPTURE_CONTENT_FOR_NOTE_STATUS_CODE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_CAPTURE_CONTENT_FOR_NOTE_STATUS_CODE =>
      _id_EXTRA_CAPTURE_CONTENT_FOR_NOTE_STATUS_CODE.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_CC = _class.staticFieldId(
    r'EXTRA_CC',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_CC`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_CC => _id_EXTRA_CC.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_CHANGED_COMPONENT_NAME = _class.staticFieldId(
    r'EXTRA_CHANGED_COMPONENT_NAME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_CHANGED_COMPONENT_NAME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_CHANGED_COMPONENT_NAME =>
      _id_EXTRA_CHANGED_COMPONENT_NAME.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_CHANGED_COMPONENT_NAME_LIST = _class.staticFieldId(
    r'EXTRA_CHANGED_COMPONENT_NAME_LIST',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_CHANGED_COMPONENT_NAME_LIST`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_CHANGED_COMPONENT_NAME_LIST =>
      _id_EXTRA_CHANGED_COMPONENT_NAME_LIST.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_CHANGED_PACKAGE_LIST = _class.staticFieldId(
    r'EXTRA_CHANGED_PACKAGE_LIST',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_CHANGED_PACKAGE_LIST`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_CHANGED_PACKAGE_LIST =>
      _id_EXTRA_CHANGED_PACKAGE_LIST.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_CHANGED_UID_LIST = _class.staticFieldId(
    r'EXTRA_CHANGED_UID_LIST',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_CHANGED_UID_LIST`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_CHANGED_UID_LIST =>
      _id_EXTRA_CHANGED_UID_LIST.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_CHOOSER_ADDITIONAL_CONTENT_URI = _class.staticFieldId(
    r'EXTRA_CHOOSER_ADDITIONAL_CONTENT_URI',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_CHOOSER_ADDITIONAL_CONTENT_URI`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_CHOOSER_ADDITIONAL_CONTENT_URI =>
      _id_EXTRA_CHOOSER_ADDITIONAL_CONTENT_URI.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_CHOOSER_CONTENT_TYPE_HINT = _class.staticFieldId(
    r'EXTRA_CHOOSER_CONTENT_TYPE_HINT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_CHOOSER_CONTENT_TYPE_HINT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_CHOOSER_CONTENT_TYPE_HINT =>
      _id_EXTRA_CHOOSER_CONTENT_TYPE_HINT.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_CHOOSER_CUSTOM_ACTIONS = _class.staticFieldId(
    r'EXTRA_CHOOSER_CUSTOM_ACTIONS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_CHOOSER_CUSTOM_ACTIONS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_CHOOSER_CUSTOM_ACTIONS =>
      _id_EXTRA_CHOOSER_CUSTOM_ACTIONS.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_CHOOSER_FOCUSED_ITEM_POSITION = _class.staticFieldId(
    r'EXTRA_CHOOSER_FOCUSED_ITEM_POSITION',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_CHOOSER_FOCUSED_ITEM_POSITION`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_CHOOSER_FOCUSED_ITEM_POSITION =>
      _id_EXTRA_CHOOSER_FOCUSED_ITEM_POSITION.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_CHOOSER_MODIFY_SHARE_ACTION = _class.staticFieldId(
    r'EXTRA_CHOOSER_MODIFY_SHARE_ACTION',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_CHOOSER_MODIFY_SHARE_ACTION`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_CHOOSER_MODIFY_SHARE_ACTION =>
      _id_EXTRA_CHOOSER_MODIFY_SHARE_ACTION.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_CHOOSER_REFINEMENT_INTENT_SENDER = _class.staticFieldId(
    r'EXTRA_CHOOSER_REFINEMENT_INTENT_SENDER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_CHOOSER_REFINEMENT_INTENT_SENDER`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_CHOOSER_REFINEMENT_INTENT_SENDER =>
      _id_EXTRA_CHOOSER_REFINEMENT_INTENT_SENDER.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_CHOOSER_RESULT = _class.staticFieldId(
    r'EXTRA_CHOOSER_RESULT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_CHOOSER_RESULT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_CHOOSER_RESULT =>
      _id_EXTRA_CHOOSER_RESULT.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_CHOOSER_RESULT_INTENT_SENDER = _class.staticFieldId(
    r'EXTRA_CHOOSER_RESULT_INTENT_SENDER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_CHOOSER_RESULT_INTENT_SENDER`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_CHOOSER_RESULT_INTENT_SENDER =>
      _id_EXTRA_CHOOSER_RESULT_INTENT_SENDER.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_CHOOSER_TARGETS = _class.staticFieldId(
    r'EXTRA_CHOOSER_TARGETS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_CHOOSER_TARGETS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_CHOOSER_TARGETS =>
      _id_EXTRA_CHOOSER_TARGETS.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_CHOSEN_COMPONENT = _class.staticFieldId(
    r'EXTRA_CHOSEN_COMPONENT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_CHOSEN_COMPONENT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_CHOSEN_COMPONENT =>
      _id_EXTRA_CHOSEN_COMPONENT.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_CHOSEN_COMPONENT_INTENT_SENDER = _class.staticFieldId(
    r'EXTRA_CHOSEN_COMPONENT_INTENT_SENDER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_CHOSEN_COMPONENT_INTENT_SENDER`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_CHOSEN_COMPONENT_INTENT_SENDER =>
      _id_EXTRA_CHOSEN_COMPONENT_INTENT_SENDER.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_COMPONENT_NAME = _class.staticFieldId(
    r'EXTRA_COMPONENT_NAME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_COMPONENT_NAME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_COMPONENT_NAME =>
      _id_EXTRA_COMPONENT_NAME.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_CONTENT_ANNOTATIONS = _class.staticFieldId(
    r'EXTRA_CONTENT_ANNOTATIONS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_CONTENT_ANNOTATIONS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_CONTENT_ANNOTATIONS =>
      _id_EXTRA_CONTENT_ANNOTATIONS.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_CONTENT_QUERY = _class.staticFieldId(
    r'EXTRA_CONTENT_QUERY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_CONTENT_QUERY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_CONTENT_QUERY =>
      _id_EXTRA_CONTENT_QUERY.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_DATA_REMOVED = _class.staticFieldId(
    r'EXTRA_DATA_REMOVED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_DATA_REMOVED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_DATA_REMOVED => _id_EXTRA_DATA_REMOVED.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_DOCK_STATE = _class.staticFieldId(
    r'EXTRA_DOCK_STATE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_DOCK_STATE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_DOCK_STATE => _id_EXTRA_DOCK_STATE.get(_class, const jni$_.JStringNullableType());

  /// from: `static public final int EXTRA_DOCK_STATE_CAR`
  static const EXTRA_DOCK_STATE_CAR = 2;

  /// from: `static public final int EXTRA_DOCK_STATE_DESK`
  static const EXTRA_DOCK_STATE_DESK = 1;

  /// from: `static public final int EXTRA_DOCK_STATE_HE_DESK`
  static const EXTRA_DOCK_STATE_HE_DESK = 4;

  /// from: `static public final int EXTRA_DOCK_STATE_LE_DESK`
  static const EXTRA_DOCK_STATE_LE_DESK = 3;

  /// from: `static public final int EXTRA_DOCK_STATE_UNDOCKED`
  static const EXTRA_DOCK_STATE_UNDOCKED = 0;
  static final _id_EXTRA_DONT_KILL_APP = _class.staticFieldId(
    r'EXTRA_DONT_KILL_APP',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_DONT_KILL_APP`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_DONT_KILL_APP =>
      _id_EXTRA_DONT_KILL_APP.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_DURATION_MILLIS = _class.staticFieldId(
    r'EXTRA_DURATION_MILLIS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_DURATION_MILLIS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_DURATION_MILLIS =>
      _id_EXTRA_DURATION_MILLIS.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_EMAIL = _class.staticFieldId(
    r'EXTRA_EMAIL',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_EMAIL`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_EMAIL => _id_EXTRA_EMAIL.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_END_TIME = _class.staticFieldId(
    r'EXTRA_END_TIME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_END_TIME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_END_TIME => _id_EXTRA_END_TIME.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_EXCLUDE_COMPONENTS = _class.staticFieldId(
    r'EXTRA_EXCLUDE_COMPONENTS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_EXCLUDE_COMPONENTS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_EXCLUDE_COMPONENTS =>
      _id_EXTRA_EXCLUDE_COMPONENTS.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_FROM_STORAGE = _class.staticFieldId(
    r'EXTRA_FROM_STORAGE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_FROM_STORAGE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_FROM_STORAGE => _id_EXTRA_FROM_STORAGE.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_HTML_TEXT = _class.staticFieldId(
    r'EXTRA_HTML_TEXT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_HTML_TEXT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_HTML_TEXT => _id_EXTRA_HTML_TEXT.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_INDEX = _class.staticFieldId(
    r'EXTRA_INDEX',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_INDEX`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_INDEX => _id_EXTRA_INDEX.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_INITIAL_INTENTS = _class.staticFieldId(
    r'EXTRA_INITIAL_INTENTS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_INITIAL_INTENTS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_INITIAL_INTENTS =>
      _id_EXTRA_INITIAL_INTENTS.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_INSTALLER_PACKAGE_NAME = _class.staticFieldId(
    r'EXTRA_INSTALLER_PACKAGE_NAME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_INSTALLER_PACKAGE_NAME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_INSTALLER_PACKAGE_NAME =>
      _id_EXTRA_INSTALLER_PACKAGE_NAME.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_INTENT = _class.staticFieldId(
    r'EXTRA_INTENT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_INTENT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_INTENT => _id_EXTRA_INTENT.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_KEY_EVENT = _class.staticFieldId(
    r'EXTRA_KEY_EVENT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_KEY_EVENT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_KEY_EVENT => _id_EXTRA_KEY_EVENT.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_LOCALE_LIST = _class.staticFieldId(
    r'EXTRA_LOCALE_LIST',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_LOCALE_LIST`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_LOCALE_LIST => _id_EXTRA_LOCALE_LIST.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_LOCAL_ONLY = _class.staticFieldId(
    r'EXTRA_LOCAL_ONLY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_LOCAL_ONLY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_LOCAL_ONLY => _id_EXTRA_LOCAL_ONLY.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_LOCUS_ID = _class.staticFieldId(
    r'EXTRA_LOCUS_ID',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_LOCUS_ID`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_LOCUS_ID => _id_EXTRA_LOCUS_ID.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_METADATA_TEXT = _class.staticFieldId(
    r'EXTRA_METADATA_TEXT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_METADATA_TEXT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_METADATA_TEXT =>
      _id_EXTRA_METADATA_TEXT.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_MIME_TYPES = _class.staticFieldId(
    r'EXTRA_MIME_TYPES',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_MIME_TYPES`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_MIME_TYPES => _id_EXTRA_MIME_TYPES.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_NOT_UNKNOWN_SOURCE = _class.staticFieldId(
    r'EXTRA_NOT_UNKNOWN_SOURCE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_NOT_UNKNOWN_SOURCE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_NOT_UNKNOWN_SOURCE =>
      _id_EXTRA_NOT_UNKNOWN_SOURCE.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ORIGINATING_URI = _class.staticFieldId(
    r'EXTRA_ORIGINATING_URI',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ORIGINATING_URI`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ORIGINATING_URI =>
      _id_EXTRA_ORIGINATING_URI.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_PACKAGES = _class.staticFieldId(
    r'EXTRA_PACKAGES',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_PACKAGES`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_PACKAGES => _id_EXTRA_PACKAGES.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_PACKAGE_NAME = _class.staticFieldId(
    r'EXTRA_PACKAGE_NAME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_PACKAGE_NAME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_PACKAGE_NAME => _id_EXTRA_PACKAGE_NAME.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_PERMISSION_GROUP_NAME = _class.staticFieldId(
    r'EXTRA_PERMISSION_GROUP_NAME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_PERMISSION_GROUP_NAME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_PERMISSION_GROUP_NAME =>
      _id_EXTRA_PERMISSION_GROUP_NAME.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_PHONE_NUMBER = _class.staticFieldId(
    r'EXTRA_PHONE_NUMBER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_PHONE_NUMBER`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_PHONE_NUMBER => _id_EXTRA_PHONE_NUMBER.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_PROCESS_TEXT = _class.staticFieldId(
    r'EXTRA_PROCESS_TEXT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_PROCESS_TEXT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_PROCESS_TEXT => _id_EXTRA_PROCESS_TEXT.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_PROCESS_TEXT_READONLY = _class.staticFieldId(
    r'EXTRA_PROCESS_TEXT_READONLY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_PROCESS_TEXT_READONLY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_PROCESS_TEXT_READONLY =>
      _id_EXTRA_PROCESS_TEXT_READONLY.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_QUICK_VIEW_FEATURES = _class.staticFieldId(
    r'EXTRA_QUICK_VIEW_FEATURES',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_QUICK_VIEW_FEATURES`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_QUICK_VIEW_FEATURES =>
      _id_EXTRA_QUICK_VIEW_FEATURES.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_QUIET_MODE = _class.staticFieldId(
    r'EXTRA_QUIET_MODE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_QUIET_MODE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_QUIET_MODE => _id_EXTRA_QUIET_MODE.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_REFERRER = _class.staticFieldId(
    r'EXTRA_REFERRER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_REFERRER`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_REFERRER => _id_EXTRA_REFERRER.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_REFERRER_NAME = _class.staticFieldId(
    r'EXTRA_REFERRER_NAME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_REFERRER_NAME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_REFERRER_NAME =>
      _id_EXTRA_REFERRER_NAME.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_REMOTE_INTENT_TOKEN = _class.staticFieldId(
    r'EXTRA_REMOTE_INTENT_TOKEN',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_REMOTE_INTENT_TOKEN`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_REMOTE_INTENT_TOKEN =>
      _id_EXTRA_REMOTE_INTENT_TOKEN.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_REPLACEMENT_EXTRAS = _class.staticFieldId(
    r'EXTRA_REPLACEMENT_EXTRAS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_REPLACEMENT_EXTRAS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_REPLACEMENT_EXTRAS =>
      _id_EXTRA_REPLACEMENT_EXTRAS.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_REPLACING = _class.staticFieldId(
    r'EXTRA_REPLACING',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_REPLACING`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_REPLACING => _id_EXTRA_REPLACING.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_RESTRICTIONS_BUNDLE = _class.staticFieldId(
    r'EXTRA_RESTRICTIONS_BUNDLE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_RESTRICTIONS_BUNDLE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_RESTRICTIONS_BUNDLE =>
      _id_EXTRA_RESTRICTIONS_BUNDLE.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_RESTRICTIONS_INTENT = _class.staticFieldId(
    r'EXTRA_RESTRICTIONS_INTENT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_RESTRICTIONS_INTENT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_RESTRICTIONS_INTENT =>
      _id_EXTRA_RESTRICTIONS_INTENT.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_RESTRICTIONS_LIST = _class.staticFieldId(
    r'EXTRA_RESTRICTIONS_LIST',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_RESTRICTIONS_LIST`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_RESTRICTIONS_LIST =>
      _id_EXTRA_RESTRICTIONS_LIST.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_RESULT_RECEIVER = _class.staticFieldId(
    r'EXTRA_RESULT_RECEIVER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_RESULT_RECEIVER`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_RESULT_RECEIVER =>
      _id_EXTRA_RESULT_RECEIVER.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_RETURN_RESULT = _class.staticFieldId(
    r'EXTRA_RETURN_RESULT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_RETURN_RESULT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_RETURN_RESULT =>
      _id_EXTRA_RETURN_RESULT.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_SHORTCUT_ICON = _class.staticFieldId(
    r'EXTRA_SHORTCUT_ICON',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_SHORTCUT_ICON`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_SHORTCUT_ICON =>
      _id_EXTRA_SHORTCUT_ICON.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_SHORTCUT_ICON_RESOURCE = _class.staticFieldId(
    r'EXTRA_SHORTCUT_ICON_RESOURCE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_SHORTCUT_ICON_RESOURCE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_SHORTCUT_ICON_RESOURCE =>
      _id_EXTRA_SHORTCUT_ICON_RESOURCE.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_SHORTCUT_ID = _class.staticFieldId(
    r'EXTRA_SHORTCUT_ID',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_SHORTCUT_ID`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_SHORTCUT_ID => _id_EXTRA_SHORTCUT_ID.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_SHORTCUT_INTENT = _class.staticFieldId(
    r'EXTRA_SHORTCUT_INTENT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_SHORTCUT_INTENT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_SHORTCUT_INTENT =>
      _id_EXTRA_SHORTCUT_INTENT.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_SHORTCUT_NAME = _class.staticFieldId(
    r'EXTRA_SHORTCUT_NAME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_SHORTCUT_NAME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_SHORTCUT_NAME =>
      _id_EXTRA_SHORTCUT_NAME.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_SHUTDOWN_USERSPACE_ONLY = _class.staticFieldId(
    r'EXTRA_SHUTDOWN_USERSPACE_ONLY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_SHUTDOWN_USERSPACE_ONLY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_SHUTDOWN_USERSPACE_ONLY =>
      _id_EXTRA_SHUTDOWN_USERSPACE_ONLY.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_SPLIT_NAME = _class.staticFieldId(
    r'EXTRA_SPLIT_NAME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_SPLIT_NAME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_SPLIT_NAME => _id_EXTRA_SPLIT_NAME.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_START_TIME = _class.staticFieldId(
    r'EXTRA_START_TIME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_START_TIME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_START_TIME => _id_EXTRA_START_TIME.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_STREAM = _class.staticFieldId(
    r'EXTRA_STREAM',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_STREAM`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_STREAM => _id_EXTRA_STREAM.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_SUBJECT = _class.staticFieldId(
    r'EXTRA_SUBJECT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_SUBJECT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_SUBJECT => _id_EXTRA_SUBJECT.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_SUSPENDED_PACKAGE_EXTRAS = _class.staticFieldId(
    r'EXTRA_SUSPENDED_PACKAGE_EXTRAS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_SUSPENDED_PACKAGE_EXTRAS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_SUSPENDED_PACKAGE_EXTRAS =>
      _id_EXTRA_SUSPENDED_PACKAGE_EXTRAS.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_TEMPLATE = _class.staticFieldId(
    r'EXTRA_TEMPLATE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_TEMPLATE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_TEMPLATE => _id_EXTRA_TEMPLATE.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_TEXT = _class.staticFieldId(
    r'EXTRA_TEXT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_TEXT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_TEXT => _id_EXTRA_TEXT.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_TIME = _class.staticFieldId(
    r'EXTRA_TIME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_TIME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_TIME => _id_EXTRA_TIME.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_TIMEZONE = _class.staticFieldId(
    r'EXTRA_TIMEZONE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_TIMEZONE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_TIMEZONE => _id_EXTRA_TIMEZONE.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_TITLE = _class.staticFieldId(
    r'EXTRA_TITLE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_TITLE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_TITLE => _id_EXTRA_TITLE.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_UID = _class.staticFieldId(
    r'EXTRA_UID',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_UID`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_UID => _id_EXTRA_UID.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_USER = _class.staticFieldId(
    r'EXTRA_USER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_USER`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_USER => _id_EXTRA_USER.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_USER_INITIATED = _class.staticFieldId(
    r'EXTRA_USER_INITIATED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_USER_INITIATED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_USER_INITIATED =>
      _id_EXTRA_USER_INITIATED.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_USE_STYLUS_MODE = _class.staticFieldId(
    r'EXTRA_USE_STYLUS_MODE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_USE_STYLUS_MODE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_USE_STYLUS_MODE =>
      _id_EXTRA_USE_STYLUS_MODE.get(_class, const jni$_.JStringNullableType());

  /// from: `static public final int FILL_IN_ACTION`
  static const FILL_IN_ACTION = 1;

  /// from: `static public final int FILL_IN_CATEGORIES`
  static const FILL_IN_CATEGORIES = 4;

  /// from: `static public final int FILL_IN_CLIP_DATA`
  static const FILL_IN_CLIP_DATA = 128;

  /// from: `static public final int FILL_IN_COMPONENT`
  static const FILL_IN_COMPONENT = 8;

  /// from: `static public final int FILL_IN_DATA`
  static const FILL_IN_DATA = 2;

  /// from: `static public final int FILL_IN_IDENTIFIER`
  static const FILL_IN_IDENTIFIER = 256;

  /// from: `static public final int FILL_IN_PACKAGE`
  static const FILL_IN_PACKAGE = 16;

  /// from: `static public final int FILL_IN_SELECTOR`
  static const FILL_IN_SELECTOR = 64;

  /// from: `static public final int FILL_IN_SOURCE_BOUNDS`
  static const FILL_IN_SOURCE_BOUNDS = 32;

  /// from: `static public final int FLAG_ACTIVITY_BROUGHT_TO_FRONT`
  static const FLAG_ACTIVITY_BROUGHT_TO_FRONT = 4194304;

  /// from: `static public final int FLAG_ACTIVITY_CLEAR_TASK`
  static const FLAG_ACTIVITY_CLEAR_TASK = 32768;

  /// from: `static public final int FLAG_ACTIVITY_CLEAR_TOP`
  static const FLAG_ACTIVITY_CLEAR_TOP = 67108864;

  /// from: `static public final int FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET`
  static const FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET = 524288;

  /// from: `static public final int FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS`
  static const FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS = 8388608;

  /// from: `static public final int FLAG_ACTIVITY_FORWARD_RESULT`
  static const FLAG_ACTIVITY_FORWARD_RESULT = 33554432;

  /// from: `static public final int FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY`
  static const FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY = 1048576;

  /// from: `static public final int FLAG_ACTIVITY_LAUNCH_ADJACENT`
  static const FLAG_ACTIVITY_LAUNCH_ADJACENT = 4096;

  /// from: `static public final int FLAG_ACTIVITY_MATCH_EXTERNAL`
  static const FLAG_ACTIVITY_MATCH_EXTERNAL = 2048;

  /// from: `static public final int FLAG_ACTIVITY_MULTIPLE_TASK`
  static const FLAG_ACTIVITY_MULTIPLE_TASK = 134217728;

  /// from: `static public final int FLAG_ACTIVITY_NEW_DOCUMENT`
  static const FLAG_ACTIVITY_NEW_DOCUMENT = 524288;

  /// from: `static public final int FLAG_ACTIVITY_NEW_TASK`
  static const FLAG_ACTIVITY_NEW_TASK = 268435456;

  /// from: `static public final int FLAG_ACTIVITY_NO_ANIMATION`
  static const FLAG_ACTIVITY_NO_ANIMATION = 65536;

  /// from: `static public final int FLAG_ACTIVITY_NO_HISTORY`
  static const FLAG_ACTIVITY_NO_HISTORY = 1073741824;

  /// from: `static public final int FLAG_ACTIVITY_NO_USER_ACTION`
  static const FLAG_ACTIVITY_NO_USER_ACTION = 262144;

  /// from: `static public final int FLAG_ACTIVITY_PREVIOUS_IS_TOP`
  static const FLAG_ACTIVITY_PREVIOUS_IS_TOP = 16777216;

  /// from: `static public final int FLAG_ACTIVITY_REORDER_TO_FRONT`
  static const FLAG_ACTIVITY_REORDER_TO_FRONT = 131072;

  /// from: `static public final int FLAG_ACTIVITY_REQUIRE_DEFAULT`
  static const FLAG_ACTIVITY_REQUIRE_DEFAULT = 512;

  /// from: `static public final int FLAG_ACTIVITY_REQUIRE_NON_BROWSER`
  static const FLAG_ACTIVITY_REQUIRE_NON_BROWSER = 1024;

  /// from: `static public final int FLAG_ACTIVITY_RESET_TASK_IF_NEEDED`
  static const FLAG_ACTIVITY_RESET_TASK_IF_NEEDED = 2097152;

  /// from: `static public final int FLAG_ACTIVITY_RETAIN_IN_RECENTS`
  static const FLAG_ACTIVITY_RETAIN_IN_RECENTS = 8192;

  /// from: `static public final int FLAG_ACTIVITY_SINGLE_TOP`
  static const FLAG_ACTIVITY_SINGLE_TOP = 536870912;

  /// from: `static public final int FLAG_ACTIVITY_TASK_ON_HOME`
  static const FLAG_ACTIVITY_TASK_ON_HOME = 16384;

  /// from: `static public final int FLAG_DEBUG_LOG_RESOLUTION`
  static const FLAG_DEBUG_LOG_RESOLUTION = 8;

  /// from: `static public final int FLAG_DIRECT_BOOT_AUTO`
  static const FLAG_DIRECT_BOOT_AUTO = 256;

  /// from: `static public final int FLAG_EXCLUDE_STOPPED_PACKAGES`
  static const FLAG_EXCLUDE_STOPPED_PACKAGES = 16;

  /// from: `static public final int FLAG_FROM_BACKGROUND`
  static const FLAG_FROM_BACKGROUND = 4;

  /// from: `static public final int FLAG_GRANT_PERSISTABLE_URI_PERMISSION`
  static const FLAG_GRANT_PERSISTABLE_URI_PERMISSION = 64;

  /// from: `static public final int FLAG_GRANT_PREFIX_URI_PERMISSION`
  static const FLAG_GRANT_PREFIX_URI_PERMISSION = 128;

  /// from: `static public final int FLAG_GRANT_READ_URI_PERMISSION`
  static const FLAG_GRANT_READ_URI_PERMISSION = 1;

  /// from: `static public final int FLAG_GRANT_WRITE_URI_PERMISSION`
  static const FLAG_GRANT_WRITE_URI_PERMISSION = 2;

  /// from: `static public final int FLAG_INCLUDE_STOPPED_PACKAGES`
  static const FLAG_INCLUDE_STOPPED_PACKAGES = 32;

  /// from: `static public final int FLAG_RECEIVER_FOREGROUND`
  static const FLAG_RECEIVER_FOREGROUND = 268435456;

  /// from: `static public final int FLAG_RECEIVER_NO_ABORT`
  static const FLAG_RECEIVER_NO_ABORT = 134217728;

  /// from: `static public final int FLAG_RECEIVER_REGISTERED_ONLY`
  static const FLAG_RECEIVER_REGISTERED_ONLY = 1073741824;

  /// from: `static public final int FLAG_RECEIVER_REPLACE_PENDING`
  static const FLAG_RECEIVER_REPLACE_PENDING = 536870912;

  /// from: `static public final int FLAG_RECEIVER_VISIBLE_TO_INSTANT_APPS`
  static const FLAG_RECEIVER_VISIBLE_TO_INSTANT_APPS = 2097152;
  static final _id_METADATA_DOCK_HOME = _class.staticFieldId(
    r'METADATA_DOCK_HOME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String METADATA_DOCK_HOME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get METADATA_DOCK_HOME => _id_METADATA_DOCK_HOME.get(_class, const jni$_.JStringNullableType());

  /// from: `static public final int URI_ALLOW_UNSAFE`
  static const URI_ALLOW_UNSAFE = 4;

  /// from: `static public final int URI_ANDROID_APP_SCHEME`
  static const URI_ANDROID_APP_SCHEME = 2;

  /// from: `static public final int URI_INTENT_SCHEME`
  static const URI_INTENT_SCHEME = 1;
  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory Intent() {
    return Intent.fromReference(_new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr).reference);
  }

  static final _id_new$1 = _class.constructorId(
    r'(Landroid/content/Intent;)V',
  );

  static final _new$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void <init>(android.content.Intent intent)`
  /// The returned object must be released after use, by calling the [release] method.
  factory Intent.new$1(
    Intent? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    return Intent.fromReference(
      _new$1(_class.reference.pointer, _id_new$1 as jni$_.JMethodIDPtr, _$intent.pointer).reference,
    );
  }

  static final _id_new$2 = _class.constructorId(
    r'(Ljava/lang/String;)V',
  );

  static final _new$2 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void <init>(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  factory Intent.new$2(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return Intent.fromReference(
      _new$2(_class.reference.pointer, _id_new$2 as jni$_.JMethodIDPtr, _$string.pointer).reference,
    );
  }

  static final _id_new$3 = _class.constructorId(
    r'(Ljava/lang/String;Landroid/net/Uri;)V',
  );

  static final _new$3 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void <init>(java.lang.String string, android.net.Uri uri)`
  /// The returned object must be released after use, by calling the [release] method.
  factory Intent.new$3(
    jni$_.JString? string,
    Uri? uri,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    return Intent.fromReference(
      _new$3(_class.reference.pointer, _id_new$3 as jni$_.JMethodIDPtr, _$string.pointer, _$uri.pointer).reference,
    );
  }

  static final _id_new$4 = _class.constructorId(
    r'(Landroid/content/Context;Ljava/lang/Class;)V',
  );

  static final _new$4 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void <init>(android.content.Context context, java.lang.Class<?> class)`
  /// The returned object must be released after use, by calling the [release] method.
  factory Intent.new$4(
    Context? context,
    jni$_.JObject? class$,
  ) {
    final _$context = context?.reference ?? jni$_.jNullReference;
    final _$class$ = class$?.reference ?? jni$_.jNullReference;
    return Intent.fromReference(
      _new$4(_class.reference.pointer, _id_new$4 as jni$_.JMethodIDPtr, _$context.pointer, _$class$.pointer).reference,
    );
  }

  static final _id_new$5 = _class.constructorId(
    r'(Ljava/lang/String;Landroid/net/Uri;Landroid/content/Context;Ljava/lang/Class;)V',
  );

  static final _new$5 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void <init>(java.lang.String string, android.net.Uri uri, android.content.Context context, java.lang.Class<?> class)`
  /// The returned object must be released after use, by calling the [release] method.
  factory Intent.new$5(
    jni$_.JString? string,
    Uri? uri,
    Context? context,
    jni$_.JObject? class$,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    final _$context = context?.reference ?? jni$_.jNullReference;
    final _$class$ = class$?.reference ?? jni$_.jNullReference;
    return Intent.fromReference(
      _new$5(
        _class.reference.pointer,
        _id_new$5 as jni$_.JMethodIDPtr,
        _$string.pointer,
        _$uri.pointer,
        _$context.pointer,
        _$class$.pointer,
      ).reference,
    );
  }

  static final _id_createChooser = _class.staticMethodId(
    r'createChooser',
    r'(Landroid/content/Intent;Ljava/lang/CharSequence;)Landroid/content/Intent;',
  );

  static final _createChooser =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public android.content.Intent createChooser(android.content.Intent intent, java.lang.CharSequence charSequence)`
  /// The returned object must be released after use, by calling the [release] method.
  static Intent? createChooser(
    Intent? intent,
    jni$_.JObject? charSequence,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$charSequence = charSequence?.reference ?? jni$_.jNullReference;
    return _createChooser(
      _class.reference.pointer,
      _id_createChooser as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$charSequence.pointer,
    ).object<Intent?>(const $Intent$NullableType());
  }

  static final _id_createChooser$1 = _class.staticMethodId(
    r'createChooser',
    r'(Landroid/content/Intent;Ljava/lang/CharSequence;Landroid/content/IntentSender;)Landroid/content/Intent;',
  );

  static final _createChooser$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public android.content.Intent createChooser(android.content.Intent intent, java.lang.CharSequence charSequence, android.content.IntentSender intentSender)`
  /// The returned object must be released after use, by calling the [release] method.
  static Intent? createChooser$1(
    Intent? intent,
    jni$_.JObject? charSequence,
    jni$_.JObject? intentSender,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$charSequence = charSequence?.reference ?? jni$_.jNullReference;
    final _$intentSender = intentSender?.reference ?? jni$_.jNullReference;
    return _createChooser$1(
      _class.reference.pointer,
      _id_createChooser$1 as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$charSequence.pointer,
      _$intentSender.pointer,
    ).object<Intent?>(const $Intent$NullableType());
  }

  static final _id_clone = _class.instanceMethodId(
    r'clone',
    r'()Ljava/lang/Object;',
  );

  static final _clone =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.lang.Object clone()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? clone() {
    return _clone(
      reference.pointer,
      _id_clone as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_cloneFilter = _class.instanceMethodId(
    r'cloneFilter',
    r'()Landroid/content/Intent;',
  );

  static final _cloneFilter =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.content.Intent cloneFilter()`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? cloneFilter() {
    return _cloneFilter(
      reference.pointer,
      _id_cloneFilter as jni$_.JMethodIDPtr,
    ).object<Intent?>(const $Intent$NullableType());
  }

  static final _id_makeMainActivity = _class.staticMethodId(
    r'makeMainActivity',
    r'(Landroid/content/ComponentName;)Landroid/content/Intent;',
  );

  static final _makeMainActivity =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `static public android.content.Intent makeMainActivity(android.content.ComponentName componentName)`
  /// The returned object must be released after use, by calling the [release] method.
  static Intent? makeMainActivity(
    jni$_.JObject? componentName,
  ) {
    final _$componentName = componentName?.reference ?? jni$_.jNullReference;
    return _makeMainActivity(
      _class.reference.pointer,
      _id_makeMainActivity as jni$_.JMethodIDPtr,
      _$componentName.pointer,
    ).object<Intent?>(const $Intent$NullableType());
  }

  static final _id_makeMainSelectorActivity = _class.staticMethodId(
    r'makeMainSelectorActivity',
    r'(Ljava/lang/String;Ljava/lang/String;)Landroid/content/Intent;',
  );

  static final _makeMainSelectorActivity =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public android.content.Intent makeMainSelectorActivity(java.lang.String string, java.lang.String string1)`
  /// The returned object must be released after use, by calling the [release] method.
  static Intent? makeMainSelectorActivity(
    jni$_.JString? string,
    jni$_.JString? string1,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    return _makeMainSelectorActivity(
      _class.reference.pointer,
      _id_makeMainSelectorActivity as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$string1.pointer,
    ).object<Intent?>(const $Intent$NullableType());
  }

  static final _id_makeRestartActivityTask = _class.staticMethodId(
    r'makeRestartActivityTask',
    r'(Landroid/content/ComponentName;)Landroid/content/Intent;',
  );

  static final _makeRestartActivityTask =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `static public android.content.Intent makeRestartActivityTask(android.content.ComponentName componentName)`
  /// The returned object must be released after use, by calling the [release] method.
  static Intent? makeRestartActivityTask(
    jni$_.JObject? componentName,
  ) {
    final _$componentName = componentName?.reference ?? jni$_.jNullReference;
    return _makeRestartActivityTask(
      _class.reference.pointer,
      _id_makeRestartActivityTask as jni$_.JMethodIDPtr,
      _$componentName.pointer,
    ).object<Intent?>(const $Intent$NullableType());
  }

  static final _id_getIntent = _class.staticMethodId(
    r'getIntent',
    r'(Ljava/lang/String;)Landroid/content/Intent;',
  );

  static final _getIntent =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `static public android.content.Intent getIntent(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static Intent? getIntent(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getIntent(
      _class.reference.pointer,
      _id_getIntent as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<Intent?>(const $Intent$NullableType());
  }

  static final _id_parseUri = _class.staticMethodId(
    r'parseUri',
    r'(Ljava/lang/String;I)Landroid/content/Intent;',
  );

  static final _parseUri =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)
          >();

  /// from: `static public android.content.Intent parseUri(java.lang.String string, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static Intent? parseUri(
    jni$_.JString? string,
    int i,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _parseUri(
      _class.reference.pointer,
      _id_parseUri as jni$_.JMethodIDPtr,
      _$string.pointer,
      i,
    ).object<Intent?>(const $Intent$NullableType());
  }

  static final _id_getIntentOld = _class.staticMethodId(
    r'getIntentOld',
    r'(Ljava/lang/String;)Landroid/content/Intent;',
  );

  static final _getIntentOld =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `static public android.content.Intent getIntentOld(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static Intent? getIntentOld(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getIntentOld(
      _class.reference.pointer,
      _id_getIntentOld as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<Intent?>(const $Intent$NullableType());
  }

  static final _id_getAction = _class.instanceMethodId(
    r'getAction',
    r'()Ljava/lang/String;',
  );

  static final _getAction =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.lang.String getAction()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getAction() {
    return _getAction(
      reference.pointer,
      _id_getAction as jni$_.JMethodIDPtr,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getData = _class.instanceMethodId(
    r'getData',
    r'()Landroid/net/Uri;',
  );

  static final _getData =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.net.Uri getData()`
  /// The returned object must be released after use, by calling the [release] method.
  Uri? getData() {
    return _getData(reference.pointer, _id_getData as jni$_.JMethodIDPtr).object<Uri?>(const $Uri$NullableType());
  }

  static final _id_getDataString = _class.instanceMethodId(
    r'getDataString',
    r'()Ljava/lang/String;',
  );

  static final _getDataString =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.lang.String getDataString()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getDataString() {
    return _getDataString(
      reference.pointer,
      _id_getDataString as jni$_.JMethodIDPtr,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getScheme = _class.instanceMethodId(
    r'getScheme',
    r'()Ljava/lang/String;',
  );

  static final _getScheme =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.lang.String getScheme()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getScheme() {
    return _getScheme(
      reference.pointer,
      _id_getScheme as jni$_.JMethodIDPtr,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getType = _class.instanceMethodId(
    r'getType',
    r'()Ljava/lang/String;',
  );

  static final _getType =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.lang.String getType()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getType() {
    return _getType(
      reference.pointer,
      _id_getType as jni$_.JMethodIDPtr,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_resolveType = _class.instanceMethodId(
    r'resolveType',
    r'(Landroid/content/Context;)Ljava/lang/String;',
  );

  static final _resolveType =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public java.lang.String resolveType(android.content.Context context)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? resolveType(
    Context? context,
  ) {
    final _$context = context?.reference ?? jni$_.jNullReference;
    return _resolveType(
      reference.pointer,
      _id_resolveType as jni$_.JMethodIDPtr,
      _$context.pointer,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_resolveType$1 = _class.instanceMethodId(
    r'resolveType',
    r'(Landroid/content/ContentResolver;)Ljava/lang/String;',
  );

  static final _resolveType$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public java.lang.String resolveType(android.content.ContentResolver contentResolver)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? resolveType$1(
    jni$_.JObject? contentResolver,
  ) {
    final _$contentResolver = contentResolver?.reference ?? jni$_.jNullReference;
    return _resolveType$1(
      reference.pointer,
      _id_resolveType$1 as jni$_.JMethodIDPtr,
      _$contentResolver.pointer,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_resolveTypeIfNeeded = _class.instanceMethodId(
    r'resolveTypeIfNeeded',
    r'(Landroid/content/ContentResolver;)Ljava/lang/String;',
  );

  static final _resolveTypeIfNeeded =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public java.lang.String resolveTypeIfNeeded(android.content.ContentResolver contentResolver)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? resolveTypeIfNeeded(
    jni$_.JObject? contentResolver,
  ) {
    final _$contentResolver = contentResolver?.reference ?? jni$_.jNullReference;
    return _resolveTypeIfNeeded(
      reference.pointer,
      _id_resolveTypeIfNeeded as jni$_.JMethodIDPtr,
      _$contentResolver.pointer,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getIdentifier = _class.instanceMethodId(
    r'getIdentifier',
    r'()Ljava/lang/String;',
  );

  static final _getIdentifier =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.lang.String getIdentifier()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getIdentifier() {
    return _getIdentifier(
      reference.pointer,
      _id_getIdentifier as jni$_.JMethodIDPtr,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_hasCategory = _class.instanceMethodId(
    r'hasCategory',
    r'(Ljava/lang/String;)Z',
  );

  static final _hasCategory =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean hasCategory(java.lang.String string)`
  bool hasCategory(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _hasCategory(reference.pointer, _id_hasCategory as jni$_.JMethodIDPtr, _$string.pointer).boolean;
  }

  static final _id_getCategories = _class.instanceMethodId(
    r'getCategories',
    r'()Ljava/util/Set;',
  );

  static final _getCategories =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.util.Set<java.lang.String> getCategories()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JSet<jni$_.JString?>? getCategories() {
    return _getCategories(
      reference.pointer,
      _id_getCategories as jni$_.JMethodIDPtr,
    ).object<jni$_.JSet<jni$_.JString?>?>(const jni$_.JSetNullableType<jni$_.JString?>(jni$_.JStringNullableType()));
  }

  static final _id_getSelector = _class.instanceMethodId(
    r'getSelector',
    r'()Landroid/content/Intent;',
  );

  static final _getSelector =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.content.Intent getSelector()`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? getSelector() {
    return _getSelector(
      reference.pointer,
      _id_getSelector as jni$_.JMethodIDPtr,
    ).object<Intent?>(const $Intent$NullableType());
  }

  static final _id_getClipData = _class.instanceMethodId(
    r'getClipData',
    r'()Landroid/content/ClipData;',
  );

  static final _getClipData =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.content.ClipData getClipData()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getClipData() {
    return _getClipData(
      reference.pointer,
      _id_getClipData as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_setExtrasClassLoader = _class.instanceMethodId(
    r'setExtrasClassLoader',
    r'(Ljava/lang/ClassLoader;)V',
  );

  static final _setExtrasClassLoader =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void setExtrasClassLoader(java.lang.ClassLoader classLoader)`
  void setExtrasClassLoader(
    jni$_.JObject? classLoader,
  ) {
    final _$classLoader = classLoader?.reference ?? jni$_.jNullReference;
    _setExtrasClassLoader(
      reference.pointer,
      _id_setExtrasClassLoader as jni$_.JMethodIDPtr,
      _$classLoader.pointer,
    ).check();
  }

  static final _id_hasExtra = _class.instanceMethodId(
    r'hasExtra',
    r'(Ljava/lang/String;)Z',
  );

  static final _hasExtra =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean hasExtra(java.lang.String string)`
  bool hasExtra(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _hasExtra(reference.pointer, _id_hasExtra as jni$_.JMethodIDPtr, _$string.pointer).boolean;
  }

  static final _id_hasFileDescriptors = _class.instanceMethodId(
    r'hasFileDescriptors',
    r'()Z',
  );

  static final _hasFileDescriptors =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean hasFileDescriptors()`
  bool hasFileDescriptors() {
    return _hasFileDescriptors(reference.pointer, _id_hasFileDescriptors as jni$_.JMethodIDPtr).boolean;
  }

  static final _id_getBooleanExtra = _class.instanceMethodId(
    r'getBooleanExtra',
    r'(Ljava/lang/String;Z)Z',
  );

  static final _getBooleanExtra =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)
          >();

  /// from: `public boolean getBooleanExtra(java.lang.String string, boolean z)`
  bool getBooleanExtra(
    jni$_.JString? string,
    bool z,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getBooleanExtra(
      reference.pointer,
      _id_getBooleanExtra as jni$_.JMethodIDPtr,
      _$string.pointer,
      z ? 1 : 0,
    ).boolean;
  }

  static final _id_getByteExtra = _class.instanceMethodId(
    r'getByteExtra',
    r'(Ljava/lang/String;B)B',
  );

  static final _getByteExtra =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallByteMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)
          >();

  /// from: `public byte getByteExtra(java.lang.String string, byte b)`
  int getByteExtra(
    jni$_.JString? string,
    int b,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getByteExtra(reference.pointer, _id_getByteExtra as jni$_.JMethodIDPtr, _$string.pointer, b).byte;
  }

  static final _id_getShortExtra = _class.instanceMethodId(
    r'getShortExtra',
    r'(Ljava/lang/String;S)S',
  );

  static final _getShortExtra =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallShortMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)
          >();

  /// from: `public short getShortExtra(java.lang.String string, short s)`
  int getShortExtra(
    jni$_.JString? string,
    int s,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getShortExtra(reference.pointer, _id_getShortExtra as jni$_.JMethodIDPtr, _$string.pointer, s).short;
  }

  static final _id_getCharExtra = _class.instanceMethodId(
    r'getCharExtra',
    r'(Ljava/lang/String;C)C',
  );

  static final _getCharExtra =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallCharMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)
          >();

  /// from: `public char getCharExtra(java.lang.String string, char c)`
  int getCharExtra(
    jni$_.JString? string,
    int c,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getCharExtra(reference.pointer, _id_getCharExtra as jni$_.JMethodIDPtr, _$string.pointer, c).char;
  }

  static final _id_getIntExtra = _class.instanceMethodId(
    r'getIntExtra',
    r'(Ljava/lang/String;I)I',
  );

  static final _getIntExtra =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)
          >();

  /// from: `public int getIntExtra(java.lang.String string, int i)`
  int getIntExtra(
    jni$_.JString? string,
    int i,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getIntExtra(reference.pointer, _id_getIntExtra as jni$_.JMethodIDPtr, _$string.pointer, i).integer;
  }

  static final _id_getLongExtra = _class.instanceMethodId(
    r'getLongExtra',
    r'(Ljava/lang/String;J)J',
  );

  static final _getLongExtra =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int64)>,
              )
            >
          >('globalEnv_CallLongMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)
          >();

  /// from: `public long getLongExtra(java.lang.String string, long j)`
  int getLongExtra(
    jni$_.JString? string,
    int j,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getLongExtra(reference.pointer, _id_getLongExtra as jni$_.JMethodIDPtr, _$string.pointer, j).long;
  }

  static final _id_getFloatExtra = _class.instanceMethodId(
    r'getFloatExtra',
    r'(Ljava/lang/String;F)F',
  );

  static final _getFloatExtra =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Double)>,
              )
            >
          >('globalEnv_CallFloatMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, double)
          >();

  /// from: `public float getFloatExtra(java.lang.String string, float f)`
  double getFloatExtra(
    jni$_.JString? string,
    double f,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getFloatExtra(reference.pointer, _id_getFloatExtra as jni$_.JMethodIDPtr, _$string.pointer, f).float;
  }

  static final _id_getDoubleExtra = _class.instanceMethodId(
    r'getDoubleExtra',
    r'(Ljava/lang/String;D)D',
  );

  static final _getDoubleExtra =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Double)>,
              )
            >
          >('globalEnv_CallDoubleMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, double)
          >();

  /// from: `public double getDoubleExtra(java.lang.String string, double d)`
  double getDoubleExtra(
    jni$_.JString? string,
    double d,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getDoubleExtra(
      reference.pointer,
      _id_getDoubleExtra as jni$_.JMethodIDPtr,
      _$string.pointer,
      d,
    ).doubleFloat;
  }

  static final _id_getStringExtra = _class.instanceMethodId(
    r'getStringExtra',
    r'(Ljava/lang/String;)Ljava/lang/String;',
  );

  static final _getStringExtra =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public java.lang.String getStringExtra(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getStringExtra(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getStringExtra(
      reference.pointer,
      _id_getStringExtra as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getCharSequenceExtra = _class.instanceMethodId(
    r'getCharSequenceExtra',
    r'(Ljava/lang/String;)Ljava/lang/CharSequence;',
  );

  static final _getCharSequenceExtra =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public java.lang.CharSequence getCharSequenceExtra(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getCharSequenceExtra(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getCharSequenceExtra(
      reference.pointer,
      _id_getCharSequenceExtra as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getParcelableExtra = _class.instanceMethodId(
    r'getParcelableExtra',
    r'(Ljava/lang/String;)Landroid/os/Parcelable;',
  );

  static final _getParcelableExtra =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public T getParcelableExtra(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  $T? getParcelableExtra<$T extends jni$_.JObject?>(
    jni$_.JString? string, {
    required jni$_.JObjType<$T> T,
  }) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getParcelableExtra(
      reference.pointer,
      _id_getParcelableExtra as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<$T?>(T.nullableType);
  }

  static final _id_getParcelableExtra$1 = _class.instanceMethodId(
    r'getParcelableExtra',
    r'(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;',
  );

  static final _getParcelableExtra$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public T getParcelableExtra(java.lang.String string, java.lang.Class<T> class)`
  /// The returned object must be released after use, by calling the [release] method.
  $T? getParcelableExtra$1<$T extends jni$_.JObject?>(
    jni$_.JString? string,
    jni$_.JObject? class$, {
    required jni$_.JObjType<$T> T,
  }) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$class$ = class$?.reference ?? jni$_.jNullReference;
    return _getParcelableExtra$1(
      reference.pointer,
      _id_getParcelableExtra$1 as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$class$.pointer,
    ).object<$T?>(T.nullableType);
  }

  static final _id_getParcelableArrayExtra = _class.instanceMethodId(
    r'getParcelableArrayExtra',
    r'(Ljava/lang/String;)[Landroid/os/Parcelable;',
  );

  static final _getParcelableArrayExtra =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public android.os.Parcelable[] getParcelableArrayExtra(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JArray<jni$_.JObject?>? getParcelableArrayExtra(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getParcelableArrayExtra(
      reference.pointer,
      _id_getParcelableArrayExtra as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<jni$_.JArray<jni$_.JObject?>?>(
      const jni$_.JArrayNullableType<jni$_.JObject?>(jni$_.JObjectNullableType()),
    );
  }

  static final _id_getParcelableArrayExtra$1 = _class.instanceMethodId(
    r'getParcelableArrayExtra',
    r'(Ljava/lang/String;Ljava/lang/Class;)[Ljava/lang/Object;',
  );

  static final _getParcelableArrayExtra$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public T[] getParcelableArrayExtra(java.lang.String string, java.lang.Class<T> class)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JArray<$T?>? getParcelableArrayExtra$1<$T extends jni$_.JObject?>(
    jni$_.JString? string,
    jni$_.JObject? class$, {
    required jni$_.JObjType<$T> T,
  }) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$class$ = class$?.reference ?? jni$_.jNullReference;
    return _getParcelableArrayExtra$1(
      reference.pointer,
      _id_getParcelableArrayExtra$1 as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$class$.pointer,
    ).object<jni$_.JArray<$T?>?>(jni$_.JArrayNullableType<$T?>(T.nullableType));
  }

  static final _id_getParcelableArrayListExtra = _class.instanceMethodId(
    r'getParcelableArrayListExtra',
    r'(Ljava/lang/String;)Ljava/util/ArrayList;',
  );

  static final _getParcelableArrayListExtra =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public java.util.ArrayList<T> getParcelableArrayListExtra(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getParcelableArrayListExtra<$T extends jni$_.JObject?>(
    jni$_.JString? string, {
    required jni$_.JObjType<$T> T,
  }) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getParcelableArrayListExtra(
      reference.pointer,
      _id_getParcelableArrayListExtra as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getParcelableArrayListExtra$1 = _class.instanceMethodId(
    r'getParcelableArrayListExtra',
    r'(Ljava/lang/String;Ljava/lang/Class;)Ljava/util/ArrayList;',
  );

  static final _getParcelableArrayListExtra$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public java.util.ArrayList<T> getParcelableArrayListExtra(java.lang.String string, java.lang.Class<? extends T> class)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getParcelableArrayListExtra$1<$T extends jni$_.JObject?>(
    jni$_.JString? string,
    jni$_.JObject? class$, {
    required jni$_.JObjType<$T> T,
  }) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$class$ = class$?.reference ?? jni$_.jNullReference;
    return _getParcelableArrayListExtra$1(
      reference.pointer,
      _id_getParcelableArrayListExtra$1 as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$class$.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getSerializableExtra = _class.instanceMethodId(
    r'getSerializableExtra',
    r'(Ljava/lang/String;)Ljava/io/Serializable;',
  );

  static final _getSerializableExtra =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public java.io.Serializable getSerializableExtra(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getSerializableExtra(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getSerializableExtra(
      reference.pointer,
      _id_getSerializableExtra as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getSerializableExtra$1 = _class.instanceMethodId(
    r'getSerializableExtra',
    r'(Ljava/lang/String;Ljava/lang/Class;)Ljava/io/Serializable;',
  );

  static final _getSerializableExtra$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public T getSerializableExtra(java.lang.String string, java.lang.Class<T> class)`
  /// The returned object must be released after use, by calling the [release] method.
  $T? getSerializableExtra$1<$T extends jni$_.JObject?>(
    jni$_.JString? string,
    jni$_.JObject? class$, {
    required jni$_.JObjType<$T> T,
  }) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$class$ = class$?.reference ?? jni$_.jNullReference;
    return _getSerializableExtra$1(
      reference.pointer,
      _id_getSerializableExtra$1 as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$class$.pointer,
    ).object<$T?>(T.nullableType);
  }

  static final _id_getIntegerArrayListExtra = _class.instanceMethodId(
    r'getIntegerArrayListExtra',
    r'(Ljava/lang/String;)Ljava/util/ArrayList;',
  );

  static final _getIntegerArrayListExtra =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public java.util.ArrayList<java.lang.Integer> getIntegerArrayListExtra(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getIntegerArrayListExtra(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getIntegerArrayListExtra(
      reference.pointer,
      _id_getIntegerArrayListExtra as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getStringArrayListExtra = _class.instanceMethodId(
    r'getStringArrayListExtra',
    r'(Ljava/lang/String;)Ljava/util/ArrayList;',
  );

  static final _getStringArrayListExtra =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public java.util.ArrayList<java.lang.String> getStringArrayListExtra(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getStringArrayListExtra(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getStringArrayListExtra(
      reference.pointer,
      _id_getStringArrayListExtra as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getCharSequenceArrayListExtra = _class.instanceMethodId(
    r'getCharSequenceArrayListExtra',
    r'(Ljava/lang/String;)Ljava/util/ArrayList;',
  );

  static final _getCharSequenceArrayListExtra =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public java.util.ArrayList<java.lang.CharSequence> getCharSequenceArrayListExtra(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getCharSequenceArrayListExtra(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getCharSequenceArrayListExtra(
      reference.pointer,
      _id_getCharSequenceArrayListExtra as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getBooleanArrayExtra = _class.instanceMethodId(
    r'getBooleanArrayExtra',
    r'(Ljava/lang/String;)[Z',
  );

  static final _getBooleanArrayExtra =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean[] getBooleanArrayExtra(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JBooleanArray? getBooleanArrayExtra(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getBooleanArrayExtra(
      reference.pointer,
      _id_getBooleanArrayExtra as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<jni$_.JBooleanArray?>(const jni$_.JBooleanArrayNullableType());
  }

  static final _id_getByteArrayExtra = _class.instanceMethodId(
    r'getByteArrayExtra',
    r'(Ljava/lang/String;)[B',
  );

  static final _getByteArrayExtra =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public byte[] getByteArrayExtra(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JByteArray? getByteArrayExtra(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getByteArrayExtra(
      reference.pointer,
      _id_getByteArrayExtra as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<jni$_.JByteArray?>(const jni$_.JByteArrayNullableType());
  }

  static final _id_getShortArrayExtra = _class.instanceMethodId(
    r'getShortArrayExtra',
    r'(Ljava/lang/String;)[S',
  );

  static final _getShortArrayExtra =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public short[] getShortArrayExtra(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JShortArray? getShortArrayExtra(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getShortArrayExtra(
      reference.pointer,
      _id_getShortArrayExtra as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<jni$_.JShortArray?>(const jni$_.JShortArrayNullableType());
  }

  static final _id_getCharArrayExtra = _class.instanceMethodId(
    r'getCharArrayExtra',
    r'(Ljava/lang/String;)[C',
  );

  static final _getCharArrayExtra =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public char[] getCharArrayExtra(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JCharArray? getCharArrayExtra(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getCharArrayExtra(
      reference.pointer,
      _id_getCharArrayExtra as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<jni$_.JCharArray?>(const jni$_.JCharArrayNullableType());
  }

  static final _id_getIntArrayExtra = _class.instanceMethodId(
    r'getIntArrayExtra',
    r'(Ljava/lang/String;)[I',
  );

  static final _getIntArrayExtra =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public int[] getIntArrayExtra(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JIntArray? getIntArrayExtra(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getIntArrayExtra(
      reference.pointer,
      _id_getIntArrayExtra as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<jni$_.JIntArray?>(const jni$_.JIntArrayNullableType());
  }

  static final _id_getLongArrayExtra = _class.instanceMethodId(
    r'getLongArrayExtra',
    r'(Ljava/lang/String;)[J',
  );

  static final _getLongArrayExtra =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public long[] getLongArrayExtra(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JLongArray? getLongArrayExtra(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getLongArrayExtra(
      reference.pointer,
      _id_getLongArrayExtra as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<jni$_.JLongArray?>(const jni$_.JLongArrayNullableType());
  }

  static final _id_getFloatArrayExtra = _class.instanceMethodId(
    r'getFloatArrayExtra',
    r'(Ljava/lang/String;)[F',
  );

  static final _getFloatArrayExtra =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public float[] getFloatArrayExtra(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JFloatArray? getFloatArrayExtra(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getFloatArrayExtra(
      reference.pointer,
      _id_getFloatArrayExtra as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<jni$_.JFloatArray?>(const jni$_.JFloatArrayNullableType());
  }

  static final _id_getDoubleArrayExtra = _class.instanceMethodId(
    r'getDoubleArrayExtra',
    r'(Ljava/lang/String;)[D',
  );

  static final _getDoubleArrayExtra =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public double[] getDoubleArrayExtra(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JDoubleArray? getDoubleArrayExtra(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getDoubleArrayExtra(
      reference.pointer,
      _id_getDoubleArrayExtra as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<jni$_.JDoubleArray?>(const jni$_.JDoubleArrayNullableType());
  }

  static final _id_getStringArrayExtra = _class.instanceMethodId(
    r'getStringArrayExtra',
    r'(Ljava/lang/String;)[Ljava/lang/String;',
  );

  static final _getStringArrayExtra =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public java.lang.String[] getStringArrayExtra(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JArray<jni$_.JString?>? getStringArrayExtra(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getStringArrayExtra(
      reference.pointer,
      _id_getStringArrayExtra as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<jni$_.JArray<jni$_.JString?>?>(
      const jni$_.JArrayNullableType<jni$_.JString?>(jni$_.JStringNullableType()),
    );
  }

  static final _id_getCharSequenceArrayExtra = _class.instanceMethodId(
    r'getCharSequenceArrayExtra',
    r'(Ljava/lang/String;)[Ljava/lang/CharSequence;',
  );

  static final _getCharSequenceArrayExtra =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public java.lang.CharSequence[] getCharSequenceArrayExtra(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JArray<jni$_.JObject?>? getCharSequenceArrayExtra(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getCharSequenceArrayExtra(
      reference.pointer,
      _id_getCharSequenceArrayExtra as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<jni$_.JArray<jni$_.JObject?>?>(
      const jni$_.JArrayNullableType<jni$_.JObject?>(jni$_.JObjectNullableType()),
    );
  }

  static final _id_getBundleExtra = _class.instanceMethodId(
    r'getBundleExtra',
    r'(Ljava/lang/String;)Landroid/os/Bundle;',
  );

  static final _getBundleExtra =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public android.os.Bundle getBundleExtra(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getBundleExtra(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getBundleExtra(
      reference.pointer,
      _id_getBundleExtra as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getExtras = _class.instanceMethodId(
    r'getExtras',
    r'()Landroid/os/Bundle;',
  );

  static final _getExtras =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.os.Bundle getExtras()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getExtras() {
    return _getExtras(
      reference.pointer,
      _id_getExtras as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getFlags = _class.instanceMethodId(
    r'getFlags',
    r'()I',
  );

  static final _getFlags =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int getFlags()`
  int getFlags() {
    return _getFlags(reference.pointer, _id_getFlags as jni$_.JMethodIDPtr).integer;
  }

  static final _id_getPackage = _class.instanceMethodId(
    r'getPackage',
    r'()Ljava/lang/String;',
  );

  static final _getPackage =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.lang.String getPackage()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getPackage() {
    return _getPackage(
      reference.pointer,
      _id_getPackage as jni$_.JMethodIDPtr,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getComponent = _class.instanceMethodId(
    r'getComponent',
    r'()Landroid/content/ComponentName;',
  );

  static final _getComponent =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.content.ComponentName getComponent()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getComponent() {
    return _getComponent(
      reference.pointer,
      _id_getComponent as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getSourceBounds = _class.instanceMethodId(
    r'getSourceBounds',
    r'()Landroid/graphics/Rect;',
  );

  static final _getSourceBounds =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.graphics.Rect getSourceBounds()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getSourceBounds() {
    return _getSourceBounds(
      reference.pointer,
      _id_getSourceBounds as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_resolveActivity = _class.instanceMethodId(
    r'resolveActivity',
    r'(Landroid/content/pm/PackageManager;)Landroid/content/ComponentName;',
  );

  static final _resolveActivity =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public android.content.ComponentName resolveActivity(android.content.pm.PackageManager packageManager)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? resolveActivity(
    jni$_.JObject? packageManager,
  ) {
    final _$packageManager = packageManager?.reference ?? jni$_.jNullReference;
    return _resolveActivity(
      reference.pointer,
      _id_resolveActivity as jni$_.JMethodIDPtr,
      _$packageManager.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_resolveActivityInfo = _class.instanceMethodId(
    r'resolveActivityInfo',
    r'(Landroid/content/pm/PackageManager;I)Landroid/content/pm/ActivityInfo;',
  );

  static final _resolveActivityInfo =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)
          >();

  /// from: `public android.content.pm.ActivityInfo resolveActivityInfo(android.content.pm.PackageManager packageManager, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? resolveActivityInfo(
    jni$_.JObject? packageManager,
    int i,
  ) {
    final _$packageManager = packageManager?.reference ?? jni$_.jNullReference;
    return _resolveActivityInfo(
      reference.pointer,
      _id_resolveActivityInfo as jni$_.JMethodIDPtr,
      _$packageManager.pointer,
      i,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_setAction = _class.instanceMethodId(
    r'setAction',
    r'(Ljava/lang/String;)Landroid/content/Intent;',
  );

  static final _setAction =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public android.content.Intent setAction(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? setAction(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _setAction(
      reference.pointer,
      _id_setAction as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<Intent?>(const $Intent$NullableType());
  }

  static final _id_setData = _class.instanceMethodId(
    r'setData',
    r'(Landroid/net/Uri;)Landroid/content/Intent;',
  );

  static final _setData =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public android.content.Intent setData(android.net.Uri uri)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? setData(
    Uri? uri,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    return _setData(
      reference.pointer,
      _id_setData as jni$_.JMethodIDPtr,
      _$uri.pointer,
    ).object<Intent?>(const $Intent$NullableType());
  }

  static final _id_setDataAndNormalize = _class.instanceMethodId(
    r'setDataAndNormalize',
    r'(Landroid/net/Uri;)Landroid/content/Intent;',
  );

  static final _setDataAndNormalize =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public android.content.Intent setDataAndNormalize(android.net.Uri uri)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? setDataAndNormalize(
    Uri? uri,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    return _setDataAndNormalize(
      reference.pointer,
      _id_setDataAndNormalize as jni$_.JMethodIDPtr,
      _$uri.pointer,
    ).object<Intent?>(const $Intent$NullableType());
  }

  static final _id_setType = _class.instanceMethodId(
    r'setType',
    r'(Ljava/lang/String;)Landroid/content/Intent;',
  );

  static final _setType =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public android.content.Intent setType(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? setType(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _setType(
      reference.pointer,
      _id_setType as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<Intent?>(const $Intent$NullableType());
  }

  static final _id_setTypeAndNormalize = _class.instanceMethodId(
    r'setTypeAndNormalize',
    r'(Ljava/lang/String;)Landroid/content/Intent;',
  );

  static final _setTypeAndNormalize =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public android.content.Intent setTypeAndNormalize(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? setTypeAndNormalize(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _setTypeAndNormalize(
      reference.pointer,
      _id_setTypeAndNormalize as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<Intent?>(const $Intent$NullableType());
  }

  static final _id_setDataAndType = _class.instanceMethodId(
    r'setDataAndType',
    r'(Landroid/net/Uri;Ljava/lang/String;)Landroid/content/Intent;',
  );

  static final _setDataAndType =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public android.content.Intent setDataAndType(android.net.Uri uri, java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? setDataAndType(
    Uri? uri,
    jni$_.JString? string,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _setDataAndType(
      reference.pointer,
      _id_setDataAndType as jni$_.JMethodIDPtr,
      _$uri.pointer,
      _$string.pointer,
    ).object<Intent?>(const $Intent$NullableType());
  }

  static final _id_setDataAndTypeAndNormalize = _class.instanceMethodId(
    r'setDataAndTypeAndNormalize',
    r'(Landroid/net/Uri;Ljava/lang/String;)Landroid/content/Intent;',
  );

  static final _setDataAndTypeAndNormalize =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public android.content.Intent setDataAndTypeAndNormalize(android.net.Uri uri, java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? setDataAndTypeAndNormalize(
    Uri? uri,
    jni$_.JString? string,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _setDataAndTypeAndNormalize(
      reference.pointer,
      _id_setDataAndTypeAndNormalize as jni$_.JMethodIDPtr,
      _$uri.pointer,
      _$string.pointer,
    ).object<Intent?>(const $Intent$NullableType());
  }

  static final _id_setIdentifier = _class.instanceMethodId(
    r'setIdentifier',
    r'(Ljava/lang/String;)Landroid/content/Intent;',
  );

  static final _setIdentifier =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public android.content.Intent setIdentifier(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? setIdentifier(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _setIdentifier(
      reference.pointer,
      _id_setIdentifier as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<Intent?>(const $Intent$NullableType());
  }

  static final _id_addCategory = _class.instanceMethodId(
    r'addCategory',
    r'(Ljava/lang/String;)Landroid/content/Intent;',
  );

  static final _addCategory =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public android.content.Intent addCategory(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? addCategory(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _addCategory(
      reference.pointer,
      _id_addCategory as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<Intent?>(const $Intent$NullableType());
  }

  static final _id_removeCategory = _class.instanceMethodId(
    r'removeCategory',
    r'(Ljava/lang/String;)V',
  );

  static final _removeCategory =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void removeCategory(java.lang.String string)`
  void removeCategory(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    _removeCategory(reference.pointer, _id_removeCategory as jni$_.JMethodIDPtr, _$string.pointer).check();
  }

  static final _id_setSelector = _class.instanceMethodId(
    r'setSelector',
    r'(Landroid/content/Intent;)V',
  );

  static final _setSelector =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void setSelector(android.content.Intent intent)`
  void setSelector(
    Intent? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _setSelector(reference.pointer, _id_setSelector as jni$_.JMethodIDPtr, _$intent.pointer).check();
  }

  static final _id_setClipData = _class.instanceMethodId(
    r'setClipData',
    r'(Landroid/content/ClipData;)V',
  );

  static final _setClipData =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void setClipData(android.content.ClipData clipData)`
  void setClipData(
    jni$_.JObject? clipData,
  ) {
    final _$clipData = clipData?.reference ?? jni$_.jNullReference;
    _setClipData(reference.pointer, _id_setClipData as jni$_.JMethodIDPtr, _$clipData.pointer).check();
  }

  static final _id_putExtra = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;Z)Landroid/content/Intent;',
  );

  static final _putExtra =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)
          >();

  /// from: `public android.content.Intent putExtra(java.lang.String string, boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtra(
    jni$_.JString? string,
    bool z,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _putExtra(
      reference.pointer,
      _id_putExtra as jni$_.JMethodIDPtr,
      _$string.pointer,
      z ? 1 : 0,
    ).object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtra$1 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;B)Landroid/content/Intent;',
  );

  static final _putExtra$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)
          >();

  /// from: `public android.content.Intent putExtra(java.lang.String string, byte b)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtra$1(
    jni$_.JString? string,
    int b,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _putExtra$1(
      reference.pointer,
      _id_putExtra$1 as jni$_.JMethodIDPtr,
      _$string.pointer,
      b,
    ).object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtra$2 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;C)Landroid/content/Intent;',
  );

  static final _putExtra$2 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)
          >();

  /// from: `public android.content.Intent putExtra(java.lang.String string, char c)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtra$2(
    jni$_.JString? string,
    int c,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _putExtra$2(
      reference.pointer,
      _id_putExtra$2 as jni$_.JMethodIDPtr,
      _$string.pointer,
      c,
    ).object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtra$3 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;S)Landroid/content/Intent;',
  );

  static final _putExtra$3 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)
          >();

  /// from: `public android.content.Intent putExtra(java.lang.String string, short s)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtra$3(
    jni$_.JString? string,
    int s,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _putExtra$3(
      reference.pointer,
      _id_putExtra$3 as jni$_.JMethodIDPtr,
      _$string.pointer,
      s,
    ).object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtra$4 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;I)Landroid/content/Intent;',
  );

  static final _putExtra$4 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)
          >();

  /// from: `public android.content.Intent putExtra(java.lang.String string, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtra$4(
    jni$_.JString? string,
    int i,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _putExtra$4(
      reference.pointer,
      _id_putExtra$4 as jni$_.JMethodIDPtr,
      _$string.pointer,
      i,
    ).object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtra$5 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;J)Landroid/content/Intent;',
  );

  static final _putExtra$5 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int64)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)
          >();

  /// from: `public android.content.Intent putExtra(java.lang.String string, long j)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtra$5(
    jni$_.JString? string,
    int j,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _putExtra$5(
      reference.pointer,
      _id_putExtra$5 as jni$_.JMethodIDPtr,
      _$string.pointer,
      j,
    ).object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtra$6 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;F)Landroid/content/Intent;',
  );

  static final _putExtra$6 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Double)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, double)
          >();

  /// from: `public android.content.Intent putExtra(java.lang.String string, float f)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtra$6(
    jni$_.JString? string,
    double f,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _putExtra$6(
      reference.pointer,
      _id_putExtra$6 as jni$_.JMethodIDPtr,
      _$string.pointer,
      f,
    ).object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtra$7 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;D)Landroid/content/Intent;',
  );

  static final _putExtra$7 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Double)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, double)
          >();

  /// from: `public android.content.Intent putExtra(java.lang.String string, double d)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtra$7(
    jni$_.JString? string,
    double d,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _putExtra$7(
      reference.pointer,
      _id_putExtra$7 as jni$_.JMethodIDPtr,
      _$string.pointer,
      d,
    ).object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtra$8 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;Ljava/lang/String;)Landroid/content/Intent;',
  );

  static final _putExtra$8 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public android.content.Intent putExtra(java.lang.String string, java.lang.String string1)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtra$8(
    jni$_.JString? string,
    jni$_.JString? string1,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    return _putExtra$8(
      reference.pointer,
      _id_putExtra$8 as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$string1.pointer,
    ).object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtra$9 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;Ljava/lang/CharSequence;)Landroid/content/Intent;',
  );

  static final _putExtra$9 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public android.content.Intent putExtra(java.lang.String string, java.lang.CharSequence charSequence)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtra$9(
    jni$_.JString? string,
    jni$_.JObject? charSequence,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$charSequence = charSequence?.reference ?? jni$_.jNullReference;
    return _putExtra$9(
      reference.pointer,
      _id_putExtra$9 as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$charSequence.pointer,
    ).object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtra$10 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;Landroid/os/Parcelable;)Landroid/content/Intent;',
  );

  static final _putExtra$10 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public android.content.Intent putExtra(java.lang.String string, android.os.Parcelable parcelable)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtra$10(
    jni$_.JString? string,
    jni$_.JObject? parcelable,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$parcelable = parcelable?.reference ?? jni$_.jNullReference;
    return _putExtra$10(
      reference.pointer,
      _id_putExtra$10 as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$parcelable.pointer,
    ).object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtra$11 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;[Landroid/os/Parcelable;)Landroid/content/Intent;',
  );

  static final _putExtra$11 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public android.content.Intent putExtra(java.lang.String string, android.os.Parcelable[] parcelables)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtra$11(
    jni$_.JString? string,
    jni$_.JArray<jni$_.JObject?>? parcelables,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$parcelables = parcelables?.reference ?? jni$_.jNullReference;
    return _putExtra$11(
      reference.pointer,
      _id_putExtra$11 as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$parcelables.pointer,
    ).object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putParcelableArrayListExtra = _class.instanceMethodId(
    r'putParcelableArrayListExtra',
    r'(Ljava/lang/String;Ljava/util/ArrayList;)Landroid/content/Intent;',
  );

  static final _putParcelableArrayListExtra =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public android.content.Intent putParcelableArrayListExtra(java.lang.String string, java.util.ArrayList<? extends android.os.Parcelable> arrayList)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putParcelableArrayListExtra(
    jni$_.JString? string,
    jni$_.JObject? arrayList,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$arrayList = arrayList?.reference ?? jni$_.jNullReference;
    return _putParcelableArrayListExtra(
      reference.pointer,
      _id_putParcelableArrayListExtra as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$arrayList.pointer,
    ).object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putIntegerArrayListExtra = _class.instanceMethodId(
    r'putIntegerArrayListExtra',
    r'(Ljava/lang/String;Ljava/util/ArrayList;)Landroid/content/Intent;',
  );

  static final _putIntegerArrayListExtra =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public android.content.Intent putIntegerArrayListExtra(java.lang.String string, java.util.ArrayList<java.lang.Integer> arrayList)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putIntegerArrayListExtra(
    jni$_.JString? string,
    jni$_.JObject? arrayList,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$arrayList = arrayList?.reference ?? jni$_.jNullReference;
    return _putIntegerArrayListExtra(
      reference.pointer,
      _id_putIntegerArrayListExtra as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$arrayList.pointer,
    ).object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putStringArrayListExtra = _class.instanceMethodId(
    r'putStringArrayListExtra',
    r'(Ljava/lang/String;Ljava/util/ArrayList;)Landroid/content/Intent;',
  );

  static final _putStringArrayListExtra =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public android.content.Intent putStringArrayListExtra(java.lang.String string, java.util.ArrayList<java.lang.String> arrayList)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putStringArrayListExtra(
    jni$_.JString? string,
    jni$_.JObject? arrayList,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$arrayList = arrayList?.reference ?? jni$_.jNullReference;
    return _putStringArrayListExtra(
      reference.pointer,
      _id_putStringArrayListExtra as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$arrayList.pointer,
    ).object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putCharSequenceArrayListExtra = _class.instanceMethodId(
    r'putCharSequenceArrayListExtra',
    r'(Ljava/lang/String;Ljava/util/ArrayList;)Landroid/content/Intent;',
  );

  static final _putCharSequenceArrayListExtra =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public android.content.Intent putCharSequenceArrayListExtra(java.lang.String string, java.util.ArrayList<java.lang.CharSequence> arrayList)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putCharSequenceArrayListExtra(
    jni$_.JString? string,
    jni$_.JObject? arrayList,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$arrayList = arrayList?.reference ?? jni$_.jNullReference;
    return _putCharSequenceArrayListExtra(
      reference.pointer,
      _id_putCharSequenceArrayListExtra as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$arrayList.pointer,
    ).object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtra$12 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;Ljava/io/Serializable;)Landroid/content/Intent;',
  );

  static final _putExtra$12 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public android.content.Intent putExtra(java.lang.String string, java.io.Serializable serializable)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtra$12(
    jni$_.JString? string,
    jni$_.JObject? serializable,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$serializable = serializable?.reference ?? jni$_.jNullReference;
    return _putExtra$12(
      reference.pointer,
      _id_putExtra$12 as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$serializable.pointer,
    ).object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtra$13 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;[Z)Landroid/content/Intent;',
  );

  static final _putExtra$13 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public android.content.Intent putExtra(java.lang.String string, boolean[] zs)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtra$13(
    jni$_.JString? string,
    jni$_.JBooleanArray? zs,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$zs = zs?.reference ?? jni$_.jNullReference;
    return _putExtra$13(
      reference.pointer,
      _id_putExtra$13 as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$zs.pointer,
    ).object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtra$14 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;[B)Landroid/content/Intent;',
  );

  static final _putExtra$14 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public android.content.Intent putExtra(java.lang.String string, byte[] bs)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtra$14(
    jni$_.JString? string,
    jni$_.JByteArray? bs,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$bs = bs?.reference ?? jni$_.jNullReference;
    return _putExtra$14(
      reference.pointer,
      _id_putExtra$14 as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$bs.pointer,
    ).object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtra$15 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;[S)Landroid/content/Intent;',
  );

  static final _putExtra$15 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public android.content.Intent putExtra(java.lang.String string, short[] ss)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtra$15(
    jni$_.JString? string,
    jni$_.JShortArray? ss,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$ss = ss?.reference ?? jni$_.jNullReference;
    return _putExtra$15(
      reference.pointer,
      _id_putExtra$15 as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$ss.pointer,
    ).object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtra$16 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;[C)Landroid/content/Intent;',
  );

  static final _putExtra$16 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public android.content.Intent putExtra(java.lang.String string, char[] cs)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtra$16(
    jni$_.JString? string,
    jni$_.JCharArray? cs,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$cs = cs?.reference ?? jni$_.jNullReference;
    return _putExtra$16(
      reference.pointer,
      _id_putExtra$16 as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$cs.pointer,
    ).object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtra$17 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;[I)Landroid/content/Intent;',
  );

  static final _putExtra$17 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public android.content.Intent putExtra(java.lang.String string, int[] is)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtra$17(
    jni$_.JString? string,
    jni$_.JIntArray? is$,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$is$ = is$?.reference ?? jni$_.jNullReference;
    return _putExtra$17(
      reference.pointer,
      _id_putExtra$17 as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$is$.pointer,
    ).object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtra$18 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;[J)Landroid/content/Intent;',
  );

  static final _putExtra$18 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public android.content.Intent putExtra(java.lang.String string, long[] js)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtra$18(
    jni$_.JString? string,
    jni$_.JLongArray? js,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$js = js?.reference ?? jni$_.jNullReference;
    return _putExtra$18(
      reference.pointer,
      _id_putExtra$18 as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$js.pointer,
    ).object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtra$19 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;[F)Landroid/content/Intent;',
  );

  static final _putExtra$19 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public android.content.Intent putExtra(java.lang.String string, float[] fs)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtra$19(
    jni$_.JString? string,
    jni$_.JFloatArray? fs,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$fs = fs?.reference ?? jni$_.jNullReference;
    return _putExtra$19(
      reference.pointer,
      _id_putExtra$19 as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$fs.pointer,
    ).object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtra$20 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;[D)Landroid/content/Intent;',
  );

  static final _putExtra$20 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public android.content.Intent putExtra(java.lang.String string, double[] ds)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtra$20(
    jni$_.JString? string,
    jni$_.JDoubleArray? ds,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$ds = ds?.reference ?? jni$_.jNullReference;
    return _putExtra$20(
      reference.pointer,
      _id_putExtra$20 as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$ds.pointer,
    ).object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtra$21 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;[Ljava/lang/String;)Landroid/content/Intent;',
  );

  static final _putExtra$21 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public android.content.Intent putExtra(java.lang.String string, java.lang.String[] strings)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtra$21(
    jni$_.JString? string,
    jni$_.JArray<jni$_.JString?>? strings,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$strings = strings?.reference ?? jni$_.jNullReference;
    return _putExtra$21(
      reference.pointer,
      _id_putExtra$21 as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$strings.pointer,
    ).object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtra$22 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;[Ljava/lang/CharSequence;)Landroid/content/Intent;',
  );

  static final _putExtra$22 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public android.content.Intent putExtra(java.lang.String string, java.lang.CharSequence[] charSequences)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtra$22(
    jni$_.JString? string,
    jni$_.JArray<jni$_.JObject?>? charSequences,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$charSequences = charSequences?.reference ?? jni$_.jNullReference;
    return _putExtra$22(
      reference.pointer,
      _id_putExtra$22 as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$charSequences.pointer,
    ).object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtra$23 = _class.instanceMethodId(
    r'putExtra',
    r'(Ljava/lang/String;Landroid/os/Bundle;)Landroid/content/Intent;',
  );

  static final _putExtra$23 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public android.content.Intent putExtra(java.lang.String string, android.os.Bundle bundle)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtra$23(
    jni$_.JString? string,
    jni$_.JObject? bundle,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    return _putExtra$23(
      reference.pointer,
      _id_putExtra$23 as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$bundle.pointer,
    ).object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtras = _class.instanceMethodId(
    r'putExtras',
    r'(Landroid/content/Intent;)Landroid/content/Intent;',
  );

  static final _putExtras =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public android.content.Intent putExtras(android.content.Intent intent)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtras(
    Intent? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    return _putExtras(
      reference.pointer,
      _id_putExtras as jni$_.JMethodIDPtr,
      _$intent.pointer,
    ).object<Intent?>(const $Intent$NullableType());
  }

  static final _id_putExtras$1 = _class.instanceMethodId(
    r'putExtras',
    r'(Landroid/os/Bundle;)Landroid/content/Intent;',
  );

  static final _putExtras$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public android.content.Intent putExtras(android.os.Bundle bundle)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? putExtras$1(
    jni$_.JObject? bundle,
  ) {
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    return _putExtras$1(
      reference.pointer,
      _id_putExtras$1 as jni$_.JMethodIDPtr,
      _$bundle.pointer,
    ).object<Intent?>(const $Intent$NullableType());
  }

  static final _id_replaceExtras = _class.instanceMethodId(
    r'replaceExtras',
    r'(Landroid/content/Intent;)Landroid/content/Intent;',
  );

  static final _replaceExtras =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public android.content.Intent replaceExtras(android.content.Intent intent)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? replaceExtras(
    Intent? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    return _replaceExtras(
      reference.pointer,
      _id_replaceExtras as jni$_.JMethodIDPtr,
      _$intent.pointer,
    ).object<Intent?>(const $Intent$NullableType());
  }

  static final _id_replaceExtras$1 = _class.instanceMethodId(
    r'replaceExtras',
    r'(Landroid/os/Bundle;)Landroid/content/Intent;',
  );

  static final _replaceExtras$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public android.content.Intent replaceExtras(android.os.Bundle bundle)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? replaceExtras$1(
    jni$_.JObject? bundle,
  ) {
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    return _replaceExtras$1(
      reference.pointer,
      _id_replaceExtras$1 as jni$_.JMethodIDPtr,
      _$bundle.pointer,
    ).object<Intent?>(const $Intent$NullableType());
  }

  static final _id_removeExtra = _class.instanceMethodId(
    r'removeExtra',
    r'(Ljava/lang/String;)V',
  );

  static final _removeExtra =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void removeExtra(java.lang.String string)`
  void removeExtra(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    _removeExtra(reference.pointer, _id_removeExtra as jni$_.JMethodIDPtr, _$string.pointer).check();
  }

  static final _id_setFlags = _class.instanceMethodId(
    r'setFlags',
    r'(I)Landroid/content/Intent;',
  );

  static final _setFlags =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public android.content.Intent setFlags(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? setFlags(
    int i,
  ) {
    return _setFlags(
      reference.pointer,
      _id_setFlags as jni$_.JMethodIDPtr,
      i,
    ).object<Intent?>(const $Intent$NullableType());
  }

  static final _id_addFlags = _class.instanceMethodId(
    r'addFlags',
    r'(I)Landroid/content/Intent;',
  );

  static final _addFlags =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public android.content.Intent addFlags(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? addFlags(
    int i,
  ) {
    return _addFlags(
      reference.pointer,
      _id_addFlags as jni$_.JMethodIDPtr,
      i,
    ).object<Intent?>(const $Intent$NullableType());
  }

  static final _id_removeFlags = _class.instanceMethodId(
    r'removeFlags',
    r'(I)V',
  );

  static final _removeFlags =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void removeFlags(int i)`
  void removeFlags(
    int i,
  ) {
    _removeFlags(reference.pointer, _id_removeFlags as jni$_.JMethodIDPtr, i).check();
  }

  static final _id_setPackage = _class.instanceMethodId(
    r'setPackage',
    r'(Ljava/lang/String;)Landroid/content/Intent;',
  );

  static final _setPackage =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public android.content.Intent setPackage(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? setPackage(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _setPackage(
      reference.pointer,
      _id_setPackage as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<Intent?>(const $Intent$NullableType());
  }

  static final _id_setComponent = _class.instanceMethodId(
    r'setComponent',
    r'(Landroid/content/ComponentName;)Landroid/content/Intent;',
  );

  static final _setComponent =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public android.content.Intent setComponent(android.content.ComponentName componentName)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? setComponent(
    jni$_.JObject? componentName,
  ) {
    final _$componentName = componentName?.reference ?? jni$_.jNullReference;
    return _setComponent(
      reference.pointer,
      _id_setComponent as jni$_.JMethodIDPtr,
      _$componentName.pointer,
    ).object<Intent?>(const $Intent$NullableType());
  }

  static final _id_setClassName = _class.instanceMethodId(
    r'setClassName',
    r'(Landroid/content/Context;Ljava/lang/String;)Landroid/content/Intent;',
  );

  static final _setClassName =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public android.content.Intent setClassName(android.content.Context context, java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? setClassName(
    Context? context,
    jni$_.JString? string,
  ) {
    final _$context = context?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _setClassName(
      reference.pointer,
      _id_setClassName as jni$_.JMethodIDPtr,
      _$context.pointer,
      _$string.pointer,
    ).object<Intent?>(const $Intent$NullableType());
  }

  static final _id_setClassName$1 = _class.instanceMethodId(
    r'setClassName',
    r'(Ljava/lang/String;Ljava/lang/String;)Landroid/content/Intent;',
  );

  static final _setClassName$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public android.content.Intent setClassName(java.lang.String string, java.lang.String string1)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? setClassName$1(
    jni$_.JString? string,
    jni$_.JString? string1,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    return _setClassName$1(
      reference.pointer,
      _id_setClassName$1 as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$string1.pointer,
    ).object<Intent?>(const $Intent$NullableType());
  }

  static final _id_setClass = _class.instanceMethodId(
    r'setClass',
    r'(Landroid/content/Context;Ljava/lang/Class;)Landroid/content/Intent;',
  );

  static final _setClass =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public android.content.Intent setClass(android.content.Context context, java.lang.Class<?> class)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? setClass(
    Context? context,
    jni$_.JObject? class$,
  ) {
    final _$context = context?.reference ?? jni$_.jNullReference;
    final _$class$ = class$?.reference ?? jni$_.jNullReference;
    return _setClass(
      reference.pointer,
      _id_setClass as jni$_.JMethodIDPtr,
      _$context.pointer,
      _$class$.pointer,
    ).object<Intent?>(const $Intent$NullableType());
  }

  static final _id_setSourceBounds = _class.instanceMethodId(
    r'setSourceBounds',
    r'(Landroid/graphics/Rect;)V',
  );

  static final _setSourceBounds =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void setSourceBounds(android.graphics.Rect rect)`
  void setSourceBounds(
    jni$_.JObject? rect,
  ) {
    final _$rect = rect?.reference ?? jni$_.jNullReference;
    _setSourceBounds(reference.pointer, _id_setSourceBounds as jni$_.JMethodIDPtr, _$rect.pointer).check();
  }

  static final _id_fillIn = _class.instanceMethodId(
    r'fillIn',
    r'(Landroid/content/Intent;I)I',
  );

  static final _fillIn =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)
          >();

  /// from: `public int fillIn(android.content.Intent intent, int i)`
  int fillIn(
    Intent? intent,
    int i,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    return _fillIn(reference.pointer, _id_fillIn as jni$_.JMethodIDPtr, _$intent.pointer, i).integer;
  }

  static final _id_filterEquals = _class.instanceMethodId(
    r'filterEquals',
    r'(Landroid/content/Intent;)Z',
  );

  static final _filterEquals =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean filterEquals(android.content.Intent intent)`
  bool filterEquals(
    Intent? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    return _filterEquals(reference.pointer, _id_filterEquals as jni$_.JMethodIDPtr, _$intent.pointer).boolean;
  }

  static final _id_filterHashCode = _class.instanceMethodId(
    r'filterHashCode',
    r'()I',
  );

  static final _filterHashCode =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int filterHashCode()`
  int filterHashCode() {
    return _filterHashCode(reference.pointer, _id_filterHashCode as jni$_.JMethodIDPtr).integer;
  }

  static final _id_toString$1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.lang.String toString()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? toString$1() {
    return _toString$1(
      reference.pointer,
      _id_toString$1 as jni$_.JMethodIDPtr,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_toURI = _class.instanceMethodId(
    r'toURI',
    r'()Ljava/lang/String;',
  );

  static final _toURI =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.lang.String toURI()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? toURI() {
    return _toURI(
      reference.pointer,
      _id_toURI as jni$_.JMethodIDPtr,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_toUri = _class.instanceMethodId(
    r'toUri',
    r'(I)Ljava/lang/String;',
  );

  static final _toUri =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public java.lang.String toUri(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? toUri(
    int i,
  ) {
    return _toUri(
      reference.pointer,
      _id_toUri as jni$_.JMethodIDPtr,
      i,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_describeContents = _class.instanceMethodId(
    r'describeContents',
    r'()I',
  );

  static final _describeContents =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int describeContents()`
  int describeContents() {
    return _describeContents(reference.pointer, _id_describeContents as jni$_.JMethodIDPtr).integer;
  }

  static final _id_writeToParcel = _class.instanceMethodId(
    r'writeToParcel',
    r'(Landroid/os/Parcel;I)V',
  );

  static final _writeToParcel =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)
          >();

  /// from: `public void writeToParcel(android.os.Parcel parcel, int i)`
  void writeToParcel(
    jni$_.JObject? parcel,
    int i,
  ) {
    final _$parcel = parcel?.reference ?? jni$_.jNullReference;
    _writeToParcel(reference.pointer, _id_writeToParcel as jni$_.JMethodIDPtr, _$parcel.pointer, i).check();
  }

  static final _id_readFromParcel = _class.instanceMethodId(
    r'readFromParcel',
    r'(Landroid/os/Parcel;)V',
  );

  static final _readFromParcel =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void readFromParcel(android.os.Parcel parcel)`
  void readFromParcel(
    jni$_.JObject? parcel,
  ) {
    final _$parcel = parcel?.reference ?? jni$_.jNullReference;
    _readFromParcel(reference.pointer, _id_readFromParcel as jni$_.JMethodIDPtr, _$parcel.pointer).check();
  }

  static final _id_parseIntent = _class.staticMethodId(
    r'parseIntent',
    r'(Landroid/content/res/Resources;Lorg/xmlpull/v1/XmlPullParser;Landroid/util/AttributeSet;)Landroid/content/Intent;',
  );

  static final _parseIntent =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public android.content.Intent parseIntent(android.content.res.Resources resources, org.xmlpull.v1.XmlPullParser xmlPullParser, android.util.AttributeSet attributeSet)`
  /// The returned object must be released after use, by calling the [release] method.
  static Intent? parseIntent(
    jni$_.JObject? resources,
    jni$_.JObject? xmlPullParser,
    jni$_.JObject? attributeSet,
  ) {
    final _$resources = resources?.reference ?? jni$_.jNullReference;
    final _$xmlPullParser = xmlPullParser?.reference ?? jni$_.jNullReference;
    final _$attributeSet = attributeSet?.reference ?? jni$_.jNullReference;
    return _parseIntent(
      _class.reference.pointer,
      _id_parseIntent as jni$_.JMethodIDPtr,
      _$resources.pointer,
      _$xmlPullParser.pointer,
      _$attributeSet.pointer,
    ).object<Intent?>(const $Intent$NullableType());
  }

  static final _id_normalizeMimeType = _class.staticMethodId(
    r'normalizeMimeType',
    r'(Ljava/lang/String;)Ljava/lang/String;',
  );

  static final _normalizeMimeType =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `static public java.lang.String normalizeMimeType(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? normalizeMimeType(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _normalizeMimeType(
      _class.reference.pointer,
      _id_normalizeMimeType as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_isMismatchingFilter = _class.instanceMethodId(
    r'isMismatchingFilter',
    r'()Z',
  );

  static final _isMismatchingFilter =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean isMismatchingFilter()`
  bool isMismatchingFilter() {
    return _isMismatchingFilter(reference.pointer, _id_isMismatchingFilter as jni$_.JMethodIDPtr).boolean;
  }
}

final class $Intent$NullableType extends jni$_.JObjType<Intent?> {
  @jni$_.internal
  const $Intent$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/content/Intent;';

  @jni$_.internal
  @core$_.override
  Intent? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : Intent.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Intent?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Intent$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Intent$NullableType) && other is $Intent$NullableType;
  }
}

final class $Intent$Type extends jni$_.JObjType<Intent> {
  @jni$_.internal
  const $Intent$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/content/Intent;';

  @jni$_.internal
  @core$_.override
  Intent fromReference(jni$_.JReference reference) => Intent.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Intent?> get nullableType => const $Intent$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Intent$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Intent$Type) && other is $Intent$Type;
  }
}

/// from: `android.content.Context$BindServiceFlags`
class Context$BindServiceFlags extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<Context$BindServiceFlags> $type;

  @jni$_.internal
  Context$BindServiceFlags.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/content/Context$BindServiceFlags');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $Context$BindServiceFlags$NullableType();
  static const type = $Context$BindServiceFlags$Type();
  static final _id_of = _class.staticMethodId(
    r'of',
    r'(J)Landroid/content/Context$BindServiceFlags;',
  );

  static final _of =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int64,)>)
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `static public android.content.Context$BindServiceFlags of(long j)`
  /// The returned object must be released after use, by calling the [release] method.
  static Context$BindServiceFlags? of(
    int j,
  ) {
    return _of(
      _class.reference.pointer,
      _id_of as jni$_.JMethodIDPtr,
      j,
    ).object<Context$BindServiceFlags?>(const $Context$BindServiceFlags$NullableType());
  }
}

final class $Context$BindServiceFlags$NullableType extends jni$_.JObjType<Context$BindServiceFlags?> {
  @jni$_.internal
  const $Context$BindServiceFlags$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/content/Context$BindServiceFlags;';

  @jni$_.internal
  @core$_.override
  Context$BindServiceFlags? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : Context$BindServiceFlags.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Context$BindServiceFlags?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Context$BindServiceFlags$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Context$BindServiceFlags$NullableType) &&
        other is $Context$BindServiceFlags$NullableType;
  }
}

final class $Context$BindServiceFlags$Type extends jni$_.JObjType<Context$BindServiceFlags> {
  @jni$_.internal
  const $Context$BindServiceFlags$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/content/Context$BindServiceFlags;';

  @jni$_.internal
  @core$_.override
  Context$BindServiceFlags fromReference(jni$_.JReference reference) => Context$BindServiceFlags.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Context$BindServiceFlags?> get nullableType => const $Context$BindServiceFlags$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Context$BindServiceFlags$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Context$BindServiceFlags$Type) && other is $Context$BindServiceFlags$Type;
  }
}

/// from: `android.content.Context`
class Context extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<Context> $type;

  @jni$_.internal
  Context.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/content/Context');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $Context$NullableType();
  static const type = $Context$Type();
  static final _id_ACCESSIBILITY_SERVICE = _class.staticFieldId(
    r'ACCESSIBILITY_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACCESSIBILITY_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACCESSIBILITY_SERVICE =>
      _id_ACCESSIBILITY_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_ACCOUNT_SERVICE = _class.staticFieldId(
    r'ACCOUNT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACCOUNT_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACCOUNT_SERVICE => _id_ACCOUNT_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_ACTIVITY_SERVICE = _class.staticFieldId(
    r'ACTIVITY_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTIVITY_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTIVITY_SERVICE => _id_ACTIVITY_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_ALARM_SERVICE = _class.staticFieldId(
    r'ALARM_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ALARM_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ALARM_SERVICE => _id_ALARM_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_APPWIDGET_SERVICE = _class.staticFieldId(
    r'APPWIDGET_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String APPWIDGET_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get APPWIDGET_SERVICE => _id_APPWIDGET_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_APP_OPS_SERVICE = _class.staticFieldId(
    r'APP_OPS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String APP_OPS_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get APP_OPS_SERVICE => _id_APP_OPS_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_APP_SEARCH_SERVICE = _class.staticFieldId(
    r'APP_SEARCH_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String APP_SEARCH_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get APP_SEARCH_SERVICE => _id_APP_SEARCH_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_AUDIO_SERVICE = _class.staticFieldId(
    r'AUDIO_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String AUDIO_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get AUDIO_SERVICE => _id_AUDIO_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_BATTERY_SERVICE = _class.staticFieldId(
    r'BATTERY_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BATTERY_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BATTERY_SERVICE => _id_BATTERY_SERVICE.get(_class, const jni$_.JStringNullableType());

  /// from: `static public final int BIND_ABOVE_CLIENT`
  static const BIND_ABOVE_CLIENT = 8;

  /// from: `static public final int BIND_ADJUST_WITH_ACTIVITY`
  static const BIND_ADJUST_WITH_ACTIVITY = 128;

  /// from: `static public final int BIND_ALLOW_ACTIVITY_STARTS`
  static const BIND_ALLOW_ACTIVITY_STARTS = 512;

  /// from: `static public final int BIND_ALLOW_OOM_MANAGEMENT`
  static const BIND_ALLOW_OOM_MANAGEMENT = 16;

  /// from: `static public final int BIND_AUTO_CREATE`
  static const BIND_AUTO_CREATE = 1;

  /// from: `static public final int BIND_DEBUG_UNBIND`
  static const BIND_DEBUG_UNBIND = 2;

  /// from: `static public final int BIND_EXTERNAL_SERVICE`
  static const BIND_EXTERNAL_SERVICE = -2147483648;

  /// from: `static public final long BIND_EXTERNAL_SERVICE_LONG`
  static const BIND_EXTERNAL_SERVICE_LONG = 4611686018427387904;

  /// from: `static public final int BIND_IMPORTANT`
  static const BIND_IMPORTANT = 64;

  /// from: `static public final int BIND_INCLUDE_CAPABILITIES`
  static const BIND_INCLUDE_CAPABILITIES = 4096;

  /// from: `static public final int BIND_NOT_FOREGROUND`
  static const BIND_NOT_FOREGROUND = 4;

  /// from: `static public final int BIND_NOT_PERCEPTIBLE`
  static const BIND_NOT_PERCEPTIBLE = 256;

  /// from: `static public final int BIND_PACKAGE_ISOLATED_PROCESS`
  static const BIND_PACKAGE_ISOLATED_PROCESS = 16384;

  /// from: `static public final int BIND_SHARED_ISOLATED_PROCESS`
  static const BIND_SHARED_ISOLATED_PROCESS = 8192;

  /// from: `static public final int BIND_WAIVE_PRIORITY`
  static const BIND_WAIVE_PRIORITY = 32;
  static final _id_BIOMETRIC_SERVICE = _class.staticFieldId(
    r'BIOMETRIC_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BIOMETRIC_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BIOMETRIC_SERVICE => _id_BIOMETRIC_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_BLOB_STORE_SERVICE = _class.staticFieldId(
    r'BLOB_STORE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BLOB_STORE_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BLOB_STORE_SERVICE => _id_BLOB_STORE_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_BLUETOOTH_SERVICE = _class.staticFieldId(
    r'BLUETOOTH_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BLUETOOTH_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BLUETOOTH_SERVICE => _id_BLUETOOTH_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_BUGREPORT_SERVICE = _class.staticFieldId(
    r'BUGREPORT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String BUGREPORT_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get BUGREPORT_SERVICE => _id_BUGREPORT_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_CAMERA_SERVICE = _class.staticFieldId(
    r'CAMERA_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CAMERA_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CAMERA_SERVICE => _id_CAMERA_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_CAPTIONING_SERVICE = _class.staticFieldId(
    r'CAPTIONING_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CAPTIONING_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CAPTIONING_SERVICE => _id_CAPTIONING_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_CARRIER_CONFIG_SERVICE = _class.staticFieldId(
    r'CARRIER_CONFIG_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CARRIER_CONFIG_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CARRIER_CONFIG_SERVICE =>
      _id_CARRIER_CONFIG_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_CLIPBOARD_SERVICE = _class.staticFieldId(
    r'CLIPBOARD_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CLIPBOARD_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CLIPBOARD_SERVICE => _id_CLIPBOARD_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_COMPANION_DEVICE_SERVICE = _class.staticFieldId(
    r'COMPANION_DEVICE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String COMPANION_DEVICE_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get COMPANION_DEVICE_SERVICE =>
      _id_COMPANION_DEVICE_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_CONNECTIVITY_DIAGNOSTICS_SERVICE = _class.staticFieldId(
    r'CONNECTIVITY_DIAGNOSTICS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CONNECTIVITY_DIAGNOSTICS_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CONNECTIVITY_DIAGNOSTICS_SERVICE =>
      _id_CONNECTIVITY_DIAGNOSTICS_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_CONNECTIVITY_SERVICE = _class.staticFieldId(
    r'CONNECTIVITY_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CONNECTIVITY_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CONNECTIVITY_SERVICE =>
      _id_CONNECTIVITY_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_CONSUMER_IR_SERVICE = _class.staticFieldId(
    r'CONSUMER_IR_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CONSUMER_IR_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CONSUMER_IR_SERVICE =>
      _id_CONSUMER_IR_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_CONTACT_KEYS_SERVICE = _class.staticFieldId(
    r'CONTACT_KEYS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CONTACT_KEYS_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CONTACT_KEYS_SERVICE =>
      _id_CONTACT_KEYS_SERVICE.get(_class, const jni$_.JStringNullableType());

  /// from: `static public final int CONTEXT_IGNORE_SECURITY`
  static const CONTEXT_IGNORE_SECURITY = 2;

  /// from: `static public final int CONTEXT_INCLUDE_CODE`
  static const CONTEXT_INCLUDE_CODE = 1;

  /// from: `static public final int CONTEXT_RESTRICTED`
  static const CONTEXT_RESTRICTED = 4;
  static final _id_CREDENTIAL_SERVICE = _class.staticFieldId(
    r'CREDENTIAL_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CREDENTIAL_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CREDENTIAL_SERVICE => _id_CREDENTIAL_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_CROSS_PROFILE_APPS_SERVICE = _class.staticFieldId(
    r'CROSS_PROFILE_APPS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CROSS_PROFILE_APPS_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CROSS_PROFILE_APPS_SERVICE =>
      _id_CROSS_PROFILE_APPS_SERVICE.get(_class, const jni$_.JStringNullableType());

  /// from: `static public final int DEVICE_ID_DEFAULT`
  static const DEVICE_ID_DEFAULT = 0;

  /// from: `static public final int DEVICE_ID_INVALID`
  static const DEVICE_ID_INVALID = -1;
  static final _id_DEVICE_LOCK_SERVICE = _class.staticFieldId(
    r'DEVICE_LOCK_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String DEVICE_LOCK_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get DEVICE_LOCK_SERVICE =>
      _id_DEVICE_LOCK_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_DEVICE_POLICY_SERVICE = _class.staticFieldId(
    r'DEVICE_POLICY_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String DEVICE_POLICY_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get DEVICE_POLICY_SERVICE =>
      _id_DEVICE_POLICY_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_DISPLAY_HASH_SERVICE = _class.staticFieldId(
    r'DISPLAY_HASH_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String DISPLAY_HASH_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get DISPLAY_HASH_SERVICE =>
      _id_DISPLAY_HASH_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_DISPLAY_SERVICE = _class.staticFieldId(
    r'DISPLAY_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String DISPLAY_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get DISPLAY_SERVICE => _id_DISPLAY_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_DOMAIN_VERIFICATION_SERVICE = _class.staticFieldId(
    r'DOMAIN_VERIFICATION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String DOMAIN_VERIFICATION_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get DOMAIN_VERIFICATION_SERVICE =>
      _id_DOMAIN_VERIFICATION_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_DOWNLOAD_SERVICE = _class.staticFieldId(
    r'DOWNLOAD_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String DOWNLOAD_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get DOWNLOAD_SERVICE => _id_DOWNLOAD_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_DROPBOX_SERVICE = _class.staticFieldId(
    r'DROPBOX_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String DROPBOX_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get DROPBOX_SERVICE => _id_DROPBOX_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_EUICC_SERVICE = _class.staticFieldId(
    r'EUICC_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EUICC_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EUICC_SERVICE => _id_EUICC_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_FILE_INTEGRITY_SERVICE = _class.staticFieldId(
    r'FILE_INTEGRITY_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FILE_INTEGRITY_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get FILE_INTEGRITY_SERVICE =>
      _id_FILE_INTEGRITY_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_FINGERPRINT_SERVICE = _class.staticFieldId(
    r'FINGERPRINT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FINGERPRINT_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get FINGERPRINT_SERVICE =>
      _id_FINGERPRINT_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_GAME_SERVICE = _class.staticFieldId(
    r'GAME_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String GAME_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get GAME_SERVICE => _id_GAME_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_GRAMMATICAL_INFLECTION_SERVICE = _class.staticFieldId(
    r'GRAMMATICAL_INFLECTION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String GRAMMATICAL_INFLECTION_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get GRAMMATICAL_INFLECTION_SERVICE =>
      _id_GRAMMATICAL_INFLECTION_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_HARDWARE_PROPERTIES_SERVICE = _class.staticFieldId(
    r'HARDWARE_PROPERTIES_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String HARDWARE_PROPERTIES_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get HARDWARE_PROPERTIES_SERVICE =>
      _id_HARDWARE_PROPERTIES_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_HEALTHCONNECT_SERVICE = _class.staticFieldId(
    r'HEALTHCONNECT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String HEALTHCONNECT_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get HEALTHCONNECT_SERVICE =>
      _id_HEALTHCONNECT_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_INPUT_METHOD_SERVICE = _class.staticFieldId(
    r'INPUT_METHOD_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String INPUT_METHOD_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get INPUT_METHOD_SERVICE =>
      _id_INPUT_METHOD_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_INPUT_SERVICE = _class.staticFieldId(
    r'INPUT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String INPUT_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get INPUT_SERVICE => _id_INPUT_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_IPSEC_SERVICE = _class.staticFieldId(
    r'IPSEC_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String IPSEC_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get IPSEC_SERVICE => _id_IPSEC_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_JOB_SCHEDULER_SERVICE = _class.staticFieldId(
    r'JOB_SCHEDULER_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String JOB_SCHEDULER_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get JOB_SCHEDULER_SERVICE =>
      _id_JOB_SCHEDULER_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_KEYGUARD_SERVICE = _class.staticFieldId(
    r'KEYGUARD_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String KEYGUARD_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get KEYGUARD_SERVICE => _id_KEYGUARD_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_LAUNCHER_APPS_SERVICE = _class.staticFieldId(
    r'LAUNCHER_APPS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String LAUNCHER_APPS_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get LAUNCHER_APPS_SERVICE =>
      _id_LAUNCHER_APPS_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_LAYOUT_INFLATER_SERVICE = _class.staticFieldId(
    r'LAYOUT_INFLATER_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String LAYOUT_INFLATER_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get LAYOUT_INFLATER_SERVICE =>
      _id_LAYOUT_INFLATER_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_LOCALE_SERVICE = _class.staticFieldId(
    r'LOCALE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String LOCALE_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get LOCALE_SERVICE => _id_LOCALE_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_LOCATION_SERVICE = _class.staticFieldId(
    r'LOCATION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String LOCATION_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get LOCATION_SERVICE => _id_LOCATION_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_MEDIA_COMMUNICATION_SERVICE = _class.staticFieldId(
    r'MEDIA_COMMUNICATION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MEDIA_COMMUNICATION_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MEDIA_COMMUNICATION_SERVICE =>
      _id_MEDIA_COMMUNICATION_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_MEDIA_METRICS_SERVICE = _class.staticFieldId(
    r'MEDIA_METRICS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MEDIA_METRICS_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MEDIA_METRICS_SERVICE =>
      _id_MEDIA_METRICS_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_MEDIA_PROJECTION_SERVICE = _class.staticFieldId(
    r'MEDIA_PROJECTION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MEDIA_PROJECTION_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MEDIA_PROJECTION_SERVICE =>
      _id_MEDIA_PROJECTION_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_MEDIA_ROUTER_SERVICE = _class.staticFieldId(
    r'MEDIA_ROUTER_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MEDIA_ROUTER_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MEDIA_ROUTER_SERVICE =>
      _id_MEDIA_ROUTER_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_MEDIA_SESSION_SERVICE = _class.staticFieldId(
    r'MEDIA_SESSION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MEDIA_SESSION_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MEDIA_SESSION_SERVICE =>
      _id_MEDIA_SESSION_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_MIDI_SERVICE = _class.staticFieldId(
    r'MIDI_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MIDI_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MIDI_SERVICE => _id_MIDI_SERVICE.get(_class, const jni$_.JStringNullableType());

  /// from: `static public final int MODE_APPEND`
  static const MODE_APPEND = 32768;

  /// from: `static public final int MODE_ENABLE_WRITE_AHEAD_LOGGING`
  static const MODE_ENABLE_WRITE_AHEAD_LOGGING = 8;

  /// from: `static public final int MODE_MULTI_PROCESS`
  static const MODE_MULTI_PROCESS = 4;

  /// from: `static public final int MODE_NO_LOCALIZED_COLLATORS`
  static const MODE_NO_LOCALIZED_COLLATORS = 16;

  /// from: `static public final int MODE_PRIVATE`
  static const MODE_PRIVATE = 0;

  /// from: `static public final int MODE_WORLD_READABLE`
  static const MODE_WORLD_READABLE = 1;

  /// from: `static public final int MODE_WORLD_WRITEABLE`
  static const MODE_WORLD_WRITEABLE = 2;
  static final _id_NETWORK_STATS_SERVICE = _class.staticFieldId(
    r'NETWORK_STATS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String NETWORK_STATS_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get NETWORK_STATS_SERVICE =>
      _id_NETWORK_STATS_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_NFC_SERVICE = _class.staticFieldId(
    r'NFC_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String NFC_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get NFC_SERVICE => _id_NFC_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_NOTIFICATION_SERVICE = _class.staticFieldId(
    r'NOTIFICATION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String NOTIFICATION_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get NOTIFICATION_SERVICE =>
      _id_NOTIFICATION_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_NSD_SERVICE = _class.staticFieldId(
    r'NSD_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String NSD_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get NSD_SERVICE => _id_NSD_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_OVERLAY_SERVICE = _class.staticFieldId(
    r'OVERLAY_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String OVERLAY_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get OVERLAY_SERVICE => _id_OVERLAY_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_PEOPLE_SERVICE = _class.staticFieldId(
    r'PEOPLE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String PEOPLE_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get PEOPLE_SERVICE => _id_PEOPLE_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_PERFORMANCE_HINT_SERVICE = _class.staticFieldId(
    r'PERFORMANCE_HINT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String PERFORMANCE_HINT_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get PERFORMANCE_HINT_SERVICE =>
      _id_PERFORMANCE_HINT_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_PERSISTENT_DATA_BLOCK_SERVICE = _class.staticFieldId(
    r'PERSISTENT_DATA_BLOCK_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String PERSISTENT_DATA_BLOCK_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get PERSISTENT_DATA_BLOCK_SERVICE =>
      _id_PERSISTENT_DATA_BLOCK_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_POWER_SERVICE = _class.staticFieldId(
    r'POWER_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String POWER_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get POWER_SERVICE => _id_POWER_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_PRINT_SERVICE = _class.staticFieldId(
    r'PRINT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String PRINT_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get PRINT_SERVICE => _id_PRINT_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_PROFILING_SERVICE = _class.staticFieldId(
    r'PROFILING_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String PROFILING_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get PROFILING_SERVICE => _id_PROFILING_SERVICE.get(_class, const jni$_.JStringNullableType());

  /// from: `static public final int RECEIVER_EXPORTED`
  static const RECEIVER_EXPORTED = 2;

  /// from: `static public final int RECEIVER_NOT_EXPORTED`
  static const RECEIVER_NOT_EXPORTED = 4;

  /// from: `static public final int RECEIVER_VISIBLE_TO_INSTANT_APPS`
  static const RECEIVER_VISIBLE_TO_INSTANT_APPS = 1;
  static final _id_RESTRICTIONS_SERVICE = _class.staticFieldId(
    r'RESTRICTIONS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String RESTRICTIONS_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get RESTRICTIONS_SERVICE =>
      _id_RESTRICTIONS_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_ROLE_SERVICE = _class.staticFieldId(
    r'ROLE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ROLE_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ROLE_SERVICE => _id_ROLE_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_SEARCH_SERVICE = _class.staticFieldId(
    r'SEARCH_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SEARCH_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get SEARCH_SERVICE => _id_SEARCH_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_SECURITY_STATE_SERVICE = _class.staticFieldId(
    r'SECURITY_STATE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SECURITY_STATE_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get SECURITY_STATE_SERVICE =>
      _id_SECURITY_STATE_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_SENSOR_SERVICE = _class.staticFieldId(
    r'SENSOR_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SENSOR_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get SENSOR_SERVICE => _id_SENSOR_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_SHORTCUT_SERVICE = _class.staticFieldId(
    r'SHORTCUT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SHORTCUT_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get SHORTCUT_SERVICE => _id_SHORTCUT_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_STATUS_BAR_SERVICE = _class.staticFieldId(
    r'STATUS_BAR_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String STATUS_BAR_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get STATUS_BAR_SERVICE => _id_STATUS_BAR_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_STORAGE_SERVICE = _class.staticFieldId(
    r'STORAGE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String STORAGE_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get STORAGE_SERVICE => _id_STORAGE_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_STORAGE_STATS_SERVICE = _class.staticFieldId(
    r'STORAGE_STATS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String STORAGE_STATS_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get STORAGE_STATS_SERVICE =>
      _id_STORAGE_STATS_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_SYSTEM_HEALTH_SERVICE = _class.staticFieldId(
    r'SYSTEM_HEALTH_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SYSTEM_HEALTH_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get SYSTEM_HEALTH_SERVICE =>
      _id_SYSTEM_HEALTH_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_TELECOM_SERVICE = _class.staticFieldId(
    r'TELECOM_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String TELECOM_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get TELECOM_SERVICE => _id_TELECOM_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_TELEPHONY_IMS_SERVICE = _class.staticFieldId(
    r'TELEPHONY_IMS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String TELEPHONY_IMS_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get TELEPHONY_IMS_SERVICE =>
      _id_TELEPHONY_IMS_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_TELEPHONY_SERVICE = _class.staticFieldId(
    r'TELEPHONY_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String TELEPHONY_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get TELEPHONY_SERVICE => _id_TELEPHONY_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_TELEPHONY_SUBSCRIPTION_SERVICE = _class.staticFieldId(
    r'TELEPHONY_SUBSCRIPTION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String TELEPHONY_SUBSCRIPTION_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get TELEPHONY_SUBSCRIPTION_SERVICE =>
      _id_TELEPHONY_SUBSCRIPTION_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_TEXT_CLASSIFICATION_SERVICE = _class.staticFieldId(
    r'TEXT_CLASSIFICATION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String TEXT_CLASSIFICATION_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get TEXT_CLASSIFICATION_SERVICE =>
      _id_TEXT_CLASSIFICATION_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_TEXT_SERVICES_MANAGER_SERVICE = _class.staticFieldId(
    r'TEXT_SERVICES_MANAGER_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String TEXT_SERVICES_MANAGER_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get TEXT_SERVICES_MANAGER_SERVICE =>
      _id_TEXT_SERVICES_MANAGER_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_TV_INPUT_SERVICE = _class.staticFieldId(
    r'TV_INPUT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String TV_INPUT_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get TV_INPUT_SERVICE => _id_TV_INPUT_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_TV_INTERACTIVE_APP_SERVICE = _class.staticFieldId(
    r'TV_INTERACTIVE_APP_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String TV_INTERACTIVE_APP_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get TV_INTERACTIVE_APP_SERVICE =>
      _id_TV_INTERACTIVE_APP_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_UI_MODE_SERVICE = _class.staticFieldId(
    r'UI_MODE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String UI_MODE_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get UI_MODE_SERVICE => _id_UI_MODE_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_USAGE_STATS_SERVICE = _class.staticFieldId(
    r'USAGE_STATS_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String USAGE_STATS_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get USAGE_STATS_SERVICE =>
      _id_USAGE_STATS_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_USB_SERVICE = _class.staticFieldId(
    r'USB_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String USB_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get USB_SERVICE => _id_USB_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_USER_SERVICE = _class.staticFieldId(
    r'USER_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String USER_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get USER_SERVICE => _id_USER_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_VIBRATOR_MANAGER_SERVICE = _class.staticFieldId(
    r'VIBRATOR_MANAGER_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String VIBRATOR_MANAGER_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get VIBRATOR_MANAGER_SERVICE =>
      _id_VIBRATOR_MANAGER_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_VIBRATOR_SERVICE = _class.staticFieldId(
    r'VIBRATOR_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String VIBRATOR_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get VIBRATOR_SERVICE => _id_VIBRATOR_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_VIRTUAL_DEVICE_SERVICE = _class.staticFieldId(
    r'VIRTUAL_DEVICE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String VIRTUAL_DEVICE_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get VIRTUAL_DEVICE_SERVICE =>
      _id_VIRTUAL_DEVICE_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_VPN_MANAGEMENT_SERVICE = _class.staticFieldId(
    r'VPN_MANAGEMENT_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String VPN_MANAGEMENT_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get VPN_MANAGEMENT_SERVICE =>
      _id_VPN_MANAGEMENT_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_WALLPAPER_SERVICE = _class.staticFieldId(
    r'WALLPAPER_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WALLPAPER_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get WALLPAPER_SERVICE => _id_WALLPAPER_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_WIFI_AWARE_SERVICE = _class.staticFieldId(
    r'WIFI_AWARE_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WIFI_AWARE_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get WIFI_AWARE_SERVICE => _id_WIFI_AWARE_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_WIFI_P2P_SERVICE = _class.staticFieldId(
    r'WIFI_P2P_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WIFI_P2P_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get WIFI_P2P_SERVICE => _id_WIFI_P2P_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_WIFI_RTT_RANGING_SERVICE = _class.staticFieldId(
    r'WIFI_RTT_RANGING_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WIFI_RTT_RANGING_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get WIFI_RTT_RANGING_SERVICE =>
      _id_WIFI_RTT_RANGING_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_WIFI_SERVICE = _class.staticFieldId(
    r'WIFI_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WIFI_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get WIFI_SERVICE => _id_WIFI_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_WINDOW_SERVICE = _class.staticFieldId(
    r'WINDOW_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WINDOW_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get WINDOW_SERVICE => _id_WINDOW_SERVICE.get(_class, const jni$_.JStringNullableType());

  static final _id_getAssets = _class.instanceMethodId(
    r'getAssets',
    r'()Landroid/content/res/AssetManager;',
  );

  static final _getAssets =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract android.content.res.AssetManager getAssets()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getAssets() {
    return _getAssets(
      reference.pointer,
      _id_getAssets as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getResources = _class.instanceMethodId(
    r'getResources',
    r'()Landroid/content/res/Resources;',
  );

  static final _getResources =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract android.content.res.Resources getResources()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getResources() {
    return _getResources(
      reference.pointer,
      _id_getResources as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getPackageManager = _class.instanceMethodId(
    r'getPackageManager',
    r'()Landroid/content/pm/PackageManager;',
  );

  static final _getPackageManager =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract android.content.pm.PackageManager getPackageManager()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getPackageManager() {
    return _getPackageManager(
      reference.pointer,
      _id_getPackageManager as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getContentResolver = _class.instanceMethodId(
    r'getContentResolver',
    r'()Landroid/content/ContentResolver;',
  );

  static final _getContentResolver =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract android.content.ContentResolver getContentResolver()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getContentResolver() {
    return _getContentResolver(
      reference.pointer,
      _id_getContentResolver as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getMainLooper = _class.instanceMethodId(
    r'getMainLooper',
    r'()Landroid/os/Looper;',
  );

  static final _getMainLooper =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract android.os.Looper getMainLooper()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getMainLooper() {
    return _getMainLooper(
      reference.pointer,
      _id_getMainLooper as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getMainExecutor = _class.instanceMethodId(
    r'getMainExecutor',
    r'()Ljava/util/concurrent/Executor;',
  );

  static final _getMainExecutor =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.util.concurrent.Executor getMainExecutor()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getMainExecutor() {
    return _getMainExecutor(
      reference.pointer,
      _id_getMainExecutor as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getApplicationContext = _class.instanceMethodId(
    r'getApplicationContext',
    r'()Landroid/content/Context;',
  );

  static final _getApplicationContext =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract android.content.Context getApplicationContext()`
  /// The returned object must be released after use, by calling the [release] method.
  Context? getApplicationContext() {
    return _getApplicationContext(
      reference.pointer,
      _id_getApplicationContext as jni$_.JMethodIDPtr,
    ).object<Context?>(const $Context$NullableType());
  }

  static final _id_registerComponentCallbacks = _class.instanceMethodId(
    r'registerComponentCallbacks',
    r'(Landroid/content/ComponentCallbacks;)V',
  );

  static final _registerComponentCallbacks =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void registerComponentCallbacks(android.content.ComponentCallbacks componentCallbacks)`
  void registerComponentCallbacks(
    jni$_.JObject? componentCallbacks,
  ) {
    final _$componentCallbacks = componentCallbacks?.reference ?? jni$_.jNullReference;
    _registerComponentCallbacks(
      reference.pointer,
      _id_registerComponentCallbacks as jni$_.JMethodIDPtr,
      _$componentCallbacks.pointer,
    ).check();
  }

  static final _id_unregisterComponentCallbacks = _class.instanceMethodId(
    r'unregisterComponentCallbacks',
    r'(Landroid/content/ComponentCallbacks;)V',
  );

  static final _unregisterComponentCallbacks =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void unregisterComponentCallbacks(android.content.ComponentCallbacks componentCallbacks)`
  void unregisterComponentCallbacks(
    jni$_.JObject? componentCallbacks,
  ) {
    final _$componentCallbacks = componentCallbacks?.reference ?? jni$_.jNullReference;
    _unregisterComponentCallbacks(
      reference.pointer,
      _id_unregisterComponentCallbacks as jni$_.JMethodIDPtr,
      _$componentCallbacks.pointer,
    ).check();
  }

  static final _id_getText = _class.instanceMethodId(
    r'getText',
    r'(I)Ljava/lang/CharSequence;',
  );

  static final _getText =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final java.lang.CharSequence getText(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getText(
    int i,
  ) {
    return _getText(
      reference.pointer,
      _id_getText as jni$_.JMethodIDPtr,
      i,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getString = _class.instanceMethodId(
    r'getString',
    r'(I)Ljava/lang/String;',
  );

  static final _getString =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final java.lang.String getString(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getString(
    int i,
  ) {
    return _getString(
      reference.pointer,
      _id_getString as jni$_.JMethodIDPtr,
      i,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getString$1 = _class.instanceMethodId(
    r'getString',
    r'(I[Ljava/lang/Object;)Ljava/lang/String;',
  );

  static final _getString$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public final java.lang.String getString(int i, java.lang.Object[] objects)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getString$1(
    int i,
    jni$_.JArray<jni$_.JObject?>? objects,
  ) {
    final _$objects = objects?.reference ?? jni$_.jNullReference;
    return _getString$1(
      reference.pointer,
      _id_getString$1 as jni$_.JMethodIDPtr,
      i,
      _$objects.pointer,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getColor = _class.instanceMethodId(
    r'getColor',
    r'(I)I',
  );

  static final _getColor =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallIntMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final int getColor(int i)`
  int getColor(
    int i,
  ) {
    return _getColor(reference.pointer, _id_getColor as jni$_.JMethodIDPtr, i).integer;
  }

  static final _id_getDrawable = _class.instanceMethodId(
    r'getDrawable',
    r'(I)Landroid/graphics/drawable/Drawable;',
  );

  static final _getDrawable =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final android.graphics.drawable.Drawable getDrawable(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getDrawable(
    int i,
  ) {
    return _getDrawable(
      reference.pointer,
      _id_getDrawable as jni$_.JMethodIDPtr,
      i,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getColorStateList = _class.instanceMethodId(
    r'getColorStateList',
    r'(I)Landroid/content/res/ColorStateList;',
  );

  static final _getColorStateList =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final android.content.res.ColorStateList getColorStateList(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getColorStateList(
    int i,
  ) {
    return _getColorStateList(
      reference.pointer,
      _id_getColorStateList as jni$_.JMethodIDPtr,
      i,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_setTheme = _class.instanceMethodId(
    r'setTheme',
    r'(I)V',
  );

  static final _setTheme =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public abstract void setTheme(int i)`
  void setTheme(
    int i,
  ) {
    _setTheme(reference.pointer, _id_setTheme as jni$_.JMethodIDPtr, i).check();
  }

  static final _id_getTheme = _class.instanceMethodId(
    r'getTheme',
    r'()Landroid/content/res/Resources$Theme;',
  );

  static final _getTheme =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract android.content.res.Resources$Theme getTheme()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getTheme() {
    return _getTheme(
      reference.pointer,
      _id_getTheme as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_obtainStyledAttributes = _class.instanceMethodId(
    r'obtainStyledAttributes',
    r'([I)Landroid/content/res/TypedArray;',
  );

  static final _obtainStyledAttributes =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public final android.content.res.TypedArray obtainStyledAttributes(int[] is)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? obtainStyledAttributes(
    jni$_.JIntArray? is$,
  ) {
    final _$is$ = is$?.reference ?? jni$_.jNullReference;
    return _obtainStyledAttributes(
      reference.pointer,
      _id_obtainStyledAttributes as jni$_.JMethodIDPtr,
      _$is$.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_obtainStyledAttributes$1 = _class.instanceMethodId(
    r'obtainStyledAttributes',
    r'(I[I)Landroid/content/res/TypedArray;',
  );

  static final _obtainStyledAttributes$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public final android.content.res.TypedArray obtainStyledAttributes(int i, int[] is)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? obtainStyledAttributes$1(
    int i,
    jni$_.JIntArray? is$,
  ) {
    final _$is$ = is$?.reference ?? jni$_.jNullReference;
    return _obtainStyledAttributes$1(
      reference.pointer,
      _id_obtainStyledAttributes$1 as jni$_.JMethodIDPtr,
      i,
      _$is$.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_obtainStyledAttributes$2 = _class.instanceMethodId(
    r'obtainStyledAttributes',
    r'(Landroid/util/AttributeSet;[I)Landroid/content/res/TypedArray;',
  );

  static final _obtainStyledAttributes$2 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public final android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet attributeSet, int[] is)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? obtainStyledAttributes$2(
    jni$_.JObject? attributeSet,
    jni$_.JIntArray? is$,
  ) {
    final _$attributeSet = attributeSet?.reference ?? jni$_.jNullReference;
    final _$is$ = is$?.reference ?? jni$_.jNullReference;
    return _obtainStyledAttributes$2(
      reference.pointer,
      _id_obtainStyledAttributes$2 as jni$_.JMethodIDPtr,
      _$attributeSet.pointer,
      _$is$.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_obtainStyledAttributes$3 = _class.instanceMethodId(
    r'obtainStyledAttributes',
    r'(Landroid/util/AttributeSet;[III)Landroid/content/res/TypedArray;',
  );

  static final _obtainStyledAttributes$3 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>, jni$_.Int32, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
            )
          >();

  /// from: `public final android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet attributeSet, int[] is, int i, int i1)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? obtainStyledAttributes$3(
    jni$_.JObject? attributeSet,
    jni$_.JIntArray? is$,
    int i,
    int i1,
  ) {
    final _$attributeSet = attributeSet?.reference ?? jni$_.jNullReference;
    final _$is$ = is$?.reference ?? jni$_.jNullReference;
    return _obtainStyledAttributes$3(
      reference.pointer,
      _id_obtainStyledAttributes$3 as jni$_.JMethodIDPtr,
      _$attributeSet.pointer,
      _$is$.pointer,
      i,
      i1,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getClassLoader = _class.instanceMethodId(
    r'getClassLoader',
    r'()Ljava/lang/ClassLoader;',
  );

  static final _getClassLoader =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract java.lang.ClassLoader getClassLoader()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getClassLoader() {
    return _getClassLoader(
      reference.pointer,
      _id_getClassLoader as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getPackageName = _class.instanceMethodId(
    r'getPackageName',
    r'()Ljava/lang/String;',
  );

  static final _getPackageName =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract java.lang.String getPackageName()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getPackageName() {
    return _getPackageName(
      reference.pointer,
      _id_getPackageName as jni$_.JMethodIDPtr,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getOpPackageName = _class.instanceMethodId(
    r'getOpPackageName',
    r'()Ljava/lang/String;',
  );

  static final _getOpPackageName =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.lang.String getOpPackageName()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getOpPackageName() {
    return _getOpPackageName(
      reference.pointer,
      _id_getOpPackageName as jni$_.JMethodIDPtr,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getAttributionTag = _class.instanceMethodId(
    r'getAttributionTag',
    r'()Ljava/lang/String;',
  );

  static final _getAttributionTag =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.lang.String getAttributionTag()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getAttributionTag() {
    return _getAttributionTag(
      reference.pointer,
      _id_getAttributionTag as jni$_.JMethodIDPtr,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getAttributionSource = _class.instanceMethodId(
    r'getAttributionSource',
    r'()Landroid/content/AttributionSource;',
  );

  static final _getAttributionSource =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.content.AttributionSource getAttributionSource()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getAttributionSource() {
    return _getAttributionSource(
      reference.pointer,
      _id_getAttributionSource as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getParams = _class.instanceMethodId(
    r'getParams',
    r'()Landroid/content/ContextParams;',
  );

  static final _getParams =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.content.ContextParams getParams()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getParams() {
    return _getParams(
      reference.pointer,
      _id_getParams as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getApplicationInfo = _class.instanceMethodId(
    r'getApplicationInfo',
    r'()Landroid/content/pm/ApplicationInfo;',
  );

  static final _getApplicationInfo =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract android.content.pm.ApplicationInfo getApplicationInfo()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getApplicationInfo() {
    return _getApplicationInfo(
      reference.pointer,
      _id_getApplicationInfo as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getPackageResourcePath = _class.instanceMethodId(
    r'getPackageResourcePath',
    r'()Ljava/lang/String;',
  );

  static final _getPackageResourcePath =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract java.lang.String getPackageResourcePath()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getPackageResourcePath() {
    return _getPackageResourcePath(
      reference.pointer,
      _id_getPackageResourcePath as jni$_.JMethodIDPtr,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getPackageCodePath = _class.instanceMethodId(
    r'getPackageCodePath',
    r'()Ljava/lang/String;',
  );

  static final _getPackageCodePath =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract java.lang.String getPackageCodePath()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getPackageCodePath() {
    return _getPackageCodePath(
      reference.pointer,
      _id_getPackageCodePath as jni$_.JMethodIDPtr,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getSharedPreferences = _class.instanceMethodId(
    r'getSharedPreferences',
    r'(Ljava/lang/String;I)Landroid/content/SharedPreferences;',
  );

  static final _getSharedPreferences =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)
          >();

  /// from: `public abstract android.content.SharedPreferences getSharedPreferences(java.lang.String string, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getSharedPreferences(
    jni$_.JString? string,
    int i,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getSharedPreferences(
      reference.pointer,
      _id_getSharedPreferences as jni$_.JMethodIDPtr,
      _$string.pointer,
      i,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_moveSharedPreferencesFrom = _class.instanceMethodId(
    r'moveSharedPreferencesFrom',
    r'(Landroid/content/Context;Ljava/lang/String;)Z',
  );

  static final _moveSharedPreferencesFrom =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract boolean moveSharedPreferencesFrom(android.content.Context context, java.lang.String string)`
  bool moveSharedPreferencesFrom(
    Context? context,
    jni$_.JString? string,
  ) {
    final _$context = context?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _moveSharedPreferencesFrom(
      reference.pointer,
      _id_moveSharedPreferencesFrom as jni$_.JMethodIDPtr,
      _$context.pointer,
      _$string.pointer,
    ).boolean;
  }

  static final _id_deleteSharedPreferences = _class.instanceMethodId(
    r'deleteSharedPreferences',
    r'(Ljava/lang/String;)Z',
  );

  static final _deleteSharedPreferences =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public abstract boolean deleteSharedPreferences(java.lang.String string)`
  bool deleteSharedPreferences(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _deleteSharedPreferences(
      reference.pointer,
      _id_deleteSharedPreferences as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).boolean;
  }

  static final _id_openFileInput = _class.instanceMethodId(
    r'openFileInput',
    r'(Ljava/lang/String;)Ljava/io/FileInputStream;',
  );

  static final _openFileInput =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public abstract java.io.FileInputStream openFileInput(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? openFileInput(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _openFileInput(
      reference.pointer,
      _id_openFileInput as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_openFileOutput = _class.instanceMethodId(
    r'openFileOutput',
    r'(Ljava/lang/String;I)Ljava/io/FileOutputStream;',
  );

  static final _openFileOutput =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)
          >();

  /// from: `public abstract java.io.FileOutputStream openFileOutput(java.lang.String string, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? openFileOutput(
    jni$_.JString? string,
    int i,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _openFileOutput(
      reference.pointer,
      _id_openFileOutput as jni$_.JMethodIDPtr,
      _$string.pointer,
      i,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_deleteFile = _class.instanceMethodId(
    r'deleteFile',
    r'(Ljava/lang/String;)Z',
  );

  static final _deleteFile =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public abstract boolean deleteFile(java.lang.String string)`
  bool deleteFile(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _deleteFile(reference.pointer, _id_deleteFile as jni$_.JMethodIDPtr, _$string.pointer).boolean;
  }

  static final _id_getFileStreamPath = _class.instanceMethodId(
    r'getFileStreamPath',
    r'(Ljava/lang/String;)Ljava/io/File;',
  );

  static final _getFileStreamPath =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public abstract java.io.File getFileStreamPath(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getFileStreamPath(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getFileStreamPath(
      reference.pointer,
      _id_getFileStreamPath as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getDataDir = _class.instanceMethodId(
    r'getDataDir',
    r'()Ljava/io/File;',
  );

  static final _getDataDir =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract java.io.File getDataDir()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getDataDir() {
    return _getDataDir(
      reference.pointer,
      _id_getDataDir as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getFilesDir = _class.instanceMethodId(
    r'getFilesDir',
    r'()Ljava/io/File;',
  );

  static final _getFilesDir =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract java.io.File getFilesDir()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getFilesDir() {
    return _getFilesDir(
      reference.pointer,
      _id_getFilesDir as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getNoBackupFilesDir = _class.instanceMethodId(
    r'getNoBackupFilesDir',
    r'()Ljava/io/File;',
  );

  static final _getNoBackupFilesDir =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract java.io.File getNoBackupFilesDir()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getNoBackupFilesDir() {
    return _getNoBackupFilesDir(
      reference.pointer,
      _id_getNoBackupFilesDir as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getExternalFilesDir = _class.instanceMethodId(
    r'getExternalFilesDir',
    r'(Ljava/lang/String;)Ljava/io/File;',
  );

  static final _getExternalFilesDir =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public abstract java.io.File getExternalFilesDir(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getExternalFilesDir(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getExternalFilesDir(
      reference.pointer,
      _id_getExternalFilesDir as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getExternalFilesDirs = _class.instanceMethodId(
    r'getExternalFilesDirs',
    r'(Ljava/lang/String;)[Ljava/io/File;',
  );

  static final _getExternalFilesDirs =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public abstract java.io.File[] getExternalFilesDirs(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JArray<jni$_.JObject?>? getExternalFilesDirs(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getExternalFilesDirs(
      reference.pointer,
      _id_getExternalFilesDirs as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<jni$_.JArray<jni$_.JObject?>?>(
      const jni$_.JArrayNullableType<jni$_.JObject?>(jni$_.JObjectNullableType()),
    );
  }

  static final _id_getObbDir = _class.instanceMethodId(
    r'getObbDir',
    r'()Ljava/io/File;',
  );

  static final _getObbDir =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract java.io.File getObbDir()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getObbDir() {
    return _getObbDir(
      reference.pointer,
      _id_getObbDir as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getObbDirs = _class.instanceMethodId(
    r'getObbDirs',
    r'()[Ljava/io/File;',
  );

  static final _getObbDirs =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract java.io.File[] getObbDirs()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JArray<jni$_.JObject?>? getObbDirs() {
    return _getObbDirs(reference.pointer, _id_getObbDirs as jni$_.JMethodIDPtr).object<jni$_.JArray<jni$_.JObject?>?>(
      const jni$_.JArrayNullableType<jni$_.JObject?>(jni$_.JObjectNullableType()),
    );
  }

  static final _id_getCacheDir = _class.instanceMethodId(
    r'getCacheDir',
    r'()Ljava/io/File;',
  );

  static final _getCacheDir =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract java.io.File getCacheDir()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getCacheDir() {
    return _getCacheDir(
      reference.pointer,
      _id_getCacheDir as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getCodeCacheDir = _class.instanceMethodId(
    r'getCodeCacheDir',
    r'()Ljava/io/File;',
  );

  static final _getCodeCacheDir =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract java.io.File getCodeCacheDir()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getCodeCacheDir() {
    return _getCodeCacheDir(
      reference.pointer,
      _id_getCodeCacheDir as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getExternalCacheDir = _class.instanceMethodId(
    r'getExternalCacheDir',
    r'()Ljava/io/File;',
  );

  static final _getExternalCacheDir =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract java.io.File getExternalCacheDir()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getExternalCacheDir() {
    return _getExternalCacheDir(
      reference.pointer,
      _id_getExternalCacheDir as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getExternalCacheDirs = _class.instanceMethodId(
    r'getExternalCacheDirs',
    r'()[Ljava/io/File;',
  );

  static final _getExternalCacheDirs =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract java.io.File[] getExternalCacheDirs()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JArray<jni$_.JObject?>? getExternalCacheDirs() {
    return _getExternalCacheDirs(
      reference.pointer,
      _id_getExternalCacheDirs as jni$_.JMethodIDPtr,
    ).object<jni$_.JArray<jni$_.JObject?>?>(
      const jni$_.JArrayNullableType<jni$_.JObject?>(jni$_.JObjectNullableType()),
    );
  }

  static final _id_getExternalMediaDirs = _class.instanceMethodId(
    r'getExternalMediaDirs',
    r'()[Ljava/io/File;',
  );

  static final _getExternalMediaDirs =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract java.io.File[] getExternalMediaDirs()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JArray<jni$_.JObject?>? getExternalMediaDirs() {
    return _getExternalMediaDirs(
      reference.pointer,
      _id_getExternalMediaDirs as jni$_.JMethodIDPtr,
    ).object<jni$_.JArray<jni$_.JObject?>?>(
      const jni$_.JArrayNullableType<jni$_.JObject?>(jni$_.JObjectNullableType()),
    );
  }

  static final _id_fileList = _class.instanceMethodId(
    r'fileList',
    r'()[Ljava/lang/String;',
  );

  static final _fileList =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract java.lang.String[] fileList()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JArray<jni$_.JString?>? fileList() {
    return _fileList(reference.pointer, _id_fileList as jni$_.JMethodIDPtr).object<jni$_.JArray<jni$_.JString?>?>(
      const jni$_.JArrayNullableType<jni$_.JString?>(jni$_.JStringNullableType()),
    );
  }

  static final _id_getDir = _class.instanceMethodId(
    r'getDir',
    r'(Ljava/lang/String;I)Ljava/io/File;',
  );

  static final _getDir =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)
          >();

  /// from: `public abstract java.io.File getDir(java.lang.String string, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getDir(
    jni$_.JString? string,
    int i,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getDir(
      reference.pointer,
      _id_getDir as jni$_.JMethodIDPtr,
      _$string.pointer,
      i,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_openOrCreateDatabase = _class.instanceMethodId(
    r'openOrCreateDatabase',
    r'(Ljava/lang/String;ILandroid/database/sqlite/SQLiteDatabase$CursorFactory;)Landroid/database/sqlite/SQLiteDatabase;',
  );

  static final _openOrCreateDatabase =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String string, int i, android.database.sqlite.SQLiteDatabase$CursorFactory cursorFactory)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? openOrCreateDatabase(
    jni$_.JString? string,
    int i,
    jni$_.JObject? cursorFactory,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$cursorFactory = cursorFactory?.reference ?? jni$_.jNullReference;
    return _openOrCreateDatabase(
      reference.pointer,
      _id_openOrCreateDatabase as jni$_.JMethodIDPtr,
      _$string.pointer,
      i,
      _$cursorFactory.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_openOrCreateDatabase$1 = _class.instanceMethodId(
    r'openOrCreateDatabase',
    r'(Ljava/lang/String;ILandroid/database/sqlite/SQLiteDatabase$CursorFactory;Landroid/database/DatabaseErrorHandler;)Landroid/database/sqlite/SQLiteDatabase;',
  );

  static final _openOrCreateDatabase$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Int32, jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String string, int i, android.database.sqlite.SQLiteDatabase$CursorFactory cursorFactory, android.database.DatabaseErrorHandler databaseErrorHandler)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? openOrCreateDatabase$1(
    jni$_.JString? string,
    int i,
    jni$_.JObject? cursorFactory,
    jni$_.JObject? databaseErrorHandler,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$cursorFactory = cursorFactory?.reference ?? jni$_.jNullReference;
    final _$databaseErrorHandler = databaseErrorHandler?.reference ?? jni$_.jNullReference;
    return _openOrCreateDatabase$1(
      reference.pointer,
      _id_openOrCreateDatabase$1 as jni$_.JMethodIDPtr,
      _$string.pointer,
      i,
      _$cursorFactory.pointer,
      _$databaseErrorHandler.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_moveDatabaseFrom = _class.instanceMethodId(
    r'moveDatabaseFrom',
    r'(Landroid/content/Context;Ljava/lang/String;)Z',
  );

  static final _moveDatabaseFrom =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract boolean moveDatabaseFrom(android.content.Context context, java.lang.String string)`
  bool moveDatabaseFrom(
    Context? context,
    jni$_.JString? string,
  ) {
    final _$context = context?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _moveDatabaseFrom(
      reference.pointer,
      _id_moveDatabaseFrom as jni$_.JMethodIDPtr,
      _$context.pointer,
      _$string.pointer,
    ).boolean;
  }

  static final _id_deleteDatabase = _class.instanceMethodId(
    r'deleteDatabase',
    r'(Ljava/lang/String;)Z',
  );

  static final _deleteDatabase =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public abstract boolean deleteDatabase(java.lang.String string)`
  bool deleteDatabase(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _deleteDatabase(reference.pointer, _id_deleteDatabase as jni$_.JMethodIDPtr, _$string.pointer).boolean;
  }

  static final _id_getDatabasePath = _class.instanceMethodId(
    r'getDatabasePath',
    r'(Ljava/lang/String;)Ljava/io/File;',
  );

  static final _getDatabasePath =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public abstract java.io.File getDatabasePath(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getDatabasePath(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getDatabasePath(
      reference.pointer,
      _id_getDatabasePath as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_databaseList = _class.instanceMethodId(
    r'databaseList',
    r'()[Ljava/lang/String;',
  );

  static final _databaseList =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract java.lang.String[] databaseList()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JArray<jni$_.JString?>? databaseList() {
    return _databaseList(
      reference.pointer,
      _id_databaseList as jni$_.JMethodIDPtr,
    ).object<jni$_.JArray<jni$_.JString?>?>(
      const jni$_.JArrayNullableType<jni$_.JString?>(jni$_.JStringNullableType()),
    );
  }

  static final _id_getWallpaper = _class.instanceMethodId(
    r'getWallpaper',
    r'()Landroid/graphics/drawable/Drawable;',
  );

  static final _getWallpaper =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract android.graphics.drawable.Drawable getWallpaper()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getWallpaper() {
    return _getWallpaper(
      reference.pointer,
      _id_getWallpaper as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_peekWallpaper = _class.instanceMethodId(
    r'peekWallpaper',
    r'()Landroid/graphics/drawable/Drawable;',
  );

  static final _peekWallpaper =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract android.graphics.drawable.Drawable peekWallpaper()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? peekWallpaper() {
    return _peekWallpaper(
      reference.pointer,
      _id_peekWallpaper as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getWallpaperDesiredMinimumWidth = _class.instanceMethodId(
    r'getWallpaperDesiredMinimumWidth',
    r'()I',
  );

  static final _getWallpaperDesiredMinimumWidth =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract int getWallpaperDesiredMinimumWidth()`
  int getWallpaperDesiredMinimumWidth() {
    return _getWallpaperDesiredMinimumWidth(
      reference.pointer,
      _id_getWallpaperDesiredMinimumWidth as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_getWallpaperDesiredMinimumHeight = _class.instanceMethodId(
    r'getWallpaperDesiredMinimumHeight',
    r'()I',
  );

  static final _getWallpaperDesiredMinimumHeight =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract int getWallpaperDesiredMinimumHeight()`
  int getWallpaperDesiredMinimumHeight() {
    return _getWallpaperDesiredMinimumHeight(
      reference.pointer,
      _id_getWallpaperDesiredMinimumHeight as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_setWallpaper = _class.instanceMethodId(
    r'setWallpaper',
    r'(Landroid/graphics/Bitmap;)V',
  );

  static final _setWallpaper =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public abstract void setWallpaper(android.graphics.Bitmap bitmap)`
  void setWallpaper(
    jni$_.JObject? bitmap,
  ) {
    final _$bitmap = bitmap?.reference ?? jni$_.jNullReference;
    _setWallpaper(reference.pointer, _id_setWallpaper as jni$_.JMethodIDPtr, _$bitmap.pointer).check();
  }

  static final _id_setWallpaper$1 = _class.instanceMethodId(
    r'setWallpaper',
    r'(Ljava/io/InputStream;)V',
  );

  static final _setWallpaper$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public abstract void setWallpaper(java.io.InputStream inputStream)`
  void setWallpaper$1(
    jni$_.JObject? inputStream,
  ) {
    final _$inputStream = inputStream?.reference ?? jni$_.jNullReference;
    _setWallpaper$1(reference.pointer, _id_setWallpaper$1 as jni$_.JMethodIDPtr, _$inputStream.pointer).check();
  }

  static final _id_clearWallpaper = _class.instanceMethodId(
    r'clearWallpaper',
    r'()V',
  );

  static final _clearWallpaper =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract void clearWallpaper()`
  void clearWallpaper() {
    _clearWallpaper(reference.pointer, _id_clearWallpaper as jni$_.JMethodIDPtr).check();
  }

  static final _id_startActivity = _class.instanceMethodId(
    r'startActivity',
    r'(Landroid/content/Intent;)V',
  );

  static final _startActivity =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public abstract void startActivity(android.content.Intent intent)`
  void startActivity(
    Intent? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _startActivity(reference.pointer, _id_startActivity as jni$_.JMethodIDPtr, _$intent.pointer).check();
  }

  static final _id_startActivity$1 = _class.instanceMethodId(
    r'startActivity',
    r'(Landroid/content/Intent;Landroid/os/Bundle;)V',
  );

  static final _startActivity$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void startActivity(android.content.Intent intent, android.os.Bundle bundle)`
  void startActivity$1(
    Intent? intent,
    jni$_.JObject? bundle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _startActivity$1(
      reference.pointer,
      _id_startActivity$1 as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$bundle.pointer,
    ).check();
  }

  static final _id_startActivities = _class.instanceMethodId(
    r'startActivities',
    r'([Landroid/content/Intent;)V',
  );

  static final _startActivities =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public abstract void startActivities(android.content.Intent[] intents)`
  void startActivities(
    jni$_.JArray<Intent?>? intents,
  ) {
    final _$intents = intents?.reference ?? jni$_.jNullReference;
    _startActivities(reference.pointer, _id_startActivities as jni$_.JMethodIDPtr, _$intents.pointer).check();
  }

  static final _id_startActivities$1 = _class.instanceMethodId(
    r'startActivities',
    r'([Landroid/content/Intent;Landroid/os/Bundle;)V',
  );

  static final _startActivities$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void startActivities(android.content.Intent[] intents, android.os.Bundle bundle)`
  void startActivities$1(
    jni$_.JArray<Intent?>? intents,
    jni$_.JObject? bundle,
  ) {
    final _$intents = intents?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _startActivities$1(
      reference.pointer,
      _id_startActivities$1 as jni$_.JMethodIDPtr,
      _$intents.pointer,
      _$bundle.pointer,
    ).check();
  }

  static final _id_startIntentSender = _class.instanceMethodId(
    r'startIntentSender',
    r'(Landroid/content/IntentSender;Landroid/content/Intent;III)V',
  );

  static final _startIntentSender =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>, jni$_.Int32, jni$_.Int32, jni$_.Int32)
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              int,
            )
          >();

  /// from: `public abstract void startIntentSender(android.content.IntentSender intentSender, android.content.Intent intent, int i, int i1, int i2)`
  void startIntentSender(
    jni$_.JObject? intentSender,
    Intent? intent,
    int i,
    int i1,
    int i2,
  ) {
    final _$intentSender = intentSender?.reference ?? jni$_.jNullReference;
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _startIntentSender(
      reference.pointer,
      _id_startIntentSender as jni$_.JMethodIDPtr,
      _$intentSender.pointer,
      _$intent.pointer,
      i,
      i1,
      i2,
    ).check();
  }

  static final _id_startIntentSender$1 = _class.instanceMethodId(
    r'startIntentSender',
    r'(Landroid/content/IntentSender;Landroid/content/Intent;IIILandroid/os/Bundle;)V',
  );

  static final _startIntentSender$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Int32,
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void startIntentSender(android.content.IntentSender intentSender, android.content.Intent intent, int i, int i1, int i2, android.os.Bundle bundle)`
  void startIntentSender$1(
    jni$_.JObject? intentSender,
    Intent? intent,
    int i,
    int i1,
    int i2,
    jni$_.JObject? bundle,
  ) {
    final _$intentSender = intentSender?.reference ?? jni$_.jNullReference;
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _startIntentSender$1(
      reference.pointer,
      _id_startIntentSender$1 as jni$_.JMethodIDPtr,
      _$intentSender.pointer,
      _$intent.pointer,
      i,
      i1,
      i2,
      _$bundle.pointer,
    ).check();
  }

  static final _id_sendBroadcast = _class.instanceMethodId(
    r'sendBroadcast',
    r'(Landroid/content/Intent;)V',
  );

  static final _sendBroadcast =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public abstract void sendBroadcast(android.content.Intent intent)`
  void sendBroadcast(
    Intent? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _sendBroadcast(reference.pointer, _id_sendBroadcast as jni$_.JMethodIDPtr, _$intent.pointer).check();
  }

  static final _id_sendBroadcast$1 = _class.instanceMethodId(
    r'sendBroadcast',
    r'(Landroid/content/Intent;Ljava/lang/String;)V',
  );

  static final _sendBroadcast$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void sendBroadcast(android.content.Intent intent, java.lang.String string)`
  void sendBroadcast$1(
    Intent? intent,
    jni$_.JString? string,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    _sendBroadcast$1(
      reference.pointer,
      _id_sendBroadcast$1 as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$string.pointer,
    ).check();
  }

  static final _id_sendBroadcastWithMultiplePermissions = _class.instanceMethodId(
    r'sendBroadcastWithMultiplePermissions',
    r'(Landroid/content/Intent;[Ljava/lang/String;)V',
  );

  static final _sendBroadcastWithMultiplePermissions =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void sendBroadcastWithMultiplePermissions(android.content.Intent intent, java.lang.String[] strings)`
  void sendBroadcastWithMultiplePermissions(
    Intent? intent,
    jni$_.JArray<jni$_.JString?>? strings,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$strings = strings?.reference ?? jni$_.jNullReference;
    _sendBroadcastWithMultiplePermissions(
      reference.pointer,
      _id_sendBroadcastWithMultiplePermissions as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$strings.pointer,
    ).check();
  }

  static final _id_sendBroadcast$2 = _class.instanceMethodId(
    r'sendBroadcast',
    r'(Landroid/content/Intent;Ljava/lang/String;Landroid/os/Bundle;)V',
  );

  static final _sendBroadcast$2 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void sendBroadcast(android.content.Intent intent, java.lang.String string, android.os.Bundle bundle)`
  void sendBroadcast$2(
    Intent? intent,
    jni$_.JString? string,
    jni$_.JObject? bundle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _sendBroadcast$2(
      reference.pointer,
      _id_sendBroadcast$2 as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$string.pointer,
      _$bundle.pointer,
    ).check();
  }

  static final _id_sendOrderedBroadcast = _class.instanceMethodId(
    r'sendOrderedBroadcast',
    r'(Landroid/content/Intent;Ljava/lang/String;)V',
  );

  static final _sendOrderedBroadcast =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void sendOrderedBroadcast(android.content.Intent intent, java.lang.String string)`
  void sendOrderedBroadcast(
    Intent? intent,
    jni$_.JString? string,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    _sendOrderedBroadcast(
      reference.pointer,
      _id_sendOrderedBroadcast as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$string.pointer,
    ).check();
  }

  static final _id_sendOrderedBroadcast$1 = _class.instanceMethodId(
    r'sendOrderedBroadcast',
    r'(Landroid/content/Intent;Ljava/lang/String;Landroid/os/Bundle;)V',
  );

  static final _sendOrderedBroadcast$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void sendOrderedBroadcast(android.content.Intent intent, java.lang.String string, android.os.Bundle bundle)`
  void sendOrderedBroadcast$1(
    Intent? intent,
    jni$_.JString? string,
    jni$_.JObject? bundle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _sendOrderedBroadcast$1(
      reference.pointer,
      _id_sendOrderedBroadcast$1 as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$string.pointer,
      _$bundle.pointer,
    ).check();
  }

  static final _id_sendOrderedBroadcast$2 = _class.instanceMethodId(
    r'sendOrderedBroadcast',
    r'(Landroid/content/Intent;Ljava/lang/String;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V',
  );

  static final _sendOrderedBroadcast$2 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void sendOrderedBroadcast(android.content.Intent intent, java.lang.String string, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string1, android.os.Bundle bundle)`
  void sendOrderedBroadcast$2(
    Intent? intent,
    jni$_.JString? string,
    jni$_.JObject? broadcastReceiver,
    jni$_.JObject? handler,
    int i,
    jni$_.JString? string1,
    jni$_.JObject? bundle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$broadcastReceiver = broadcastReceiver?.reference ?? jni$_.jNullReference;
    final _$handler = handler?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _sendOrderedBroadcast$2(
      reference.pointer,
      _id_sendOrderedBroadcast$2 as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$string.pointer,
      _$broadcastReceiver.pointer,
      _$handler.pointer,
      i,
      _$string1.pointer,
      _$bundle.pointer,
    ).check();
  }

  static final _id_sendOrderedBroadcast$3 = _class.instanceMethodId(
    r'sendOrderedBroadcast',
    r'(Landroid/content/Intent;Ljava/lang/String;Landroid/os/Bundle;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V',
  );

  static final _sendOrderedBroadcast$3 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void sendOrderedBroadcast(android.content.Intent intent, java.lang.String string, android.os.Bundle bundle, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string1, android.os.Bundle bundle1)`
  void sendOrderedBroadcast$3(
    Intent? intent,
    jni$_.JString? string,
    jni$_.JObject? bundle,
    jni$_.JObject? broadcastReceiver,
    jni$_.JObject? handler,
    int i,
    jni$_.JString? string1,
    jni$_.JObject? bundle1,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    final _$broadcastReceiver = broadcastReceiver?.reference ?? jni$_.jNullReference;
    final _$handler = handler?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    final _$bundle1 = bundle1?.reference ?? jni$_.jNullReference;
    _sendOrderedBroadcast$3(
      reference.pointer,
      _id_sendOrderedBroadcast$3 as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$string.pointer,
      _$bundle.pointer,
      _$broadcastReceiver.pointer,
      _$handler.pointer,
      i,
      _$string1.pointer,
      _$bundle1.pointer,
    ).check();
  }

  static final _id_sendBroadcastAsUser = _class.instanceMethodId(
    r'sendBroadcastAsUser',
    r'(Landroid/content/Intent;Landroid/os/UserHandle;)V',
  );

  static final _sendBroadcastAsUser =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void sendBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle)`
  void sendBroadcastAsUser(
    Intent? intent,
    jni$_.JObject? userHandle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$userHandle = userHandle?.reference ?? jni$_.jNullReference;
    _sendBroadcastAsUser(
      reference.pointer,
      _id_sendBroadcastAsUser as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$userHandle.pointer,
    ).check();
  }

  static final _id_sendBroadcastAsUser$1 = _class.instanceMethodId(
    r'sendBroadcastAsUser',
    r'(Landroid/content/Intent;Landroid/os/UserHandle;Ljava/lang/String;)V',
  );

  static final _sendBroadcastAsUser$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void sendBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle, java.lang.String string)`
  void sendBroadcastAsUser$1(
    Intent? intent,
    jni$_.JObject? userHandle,
    jni$_.JString? string,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$userHandle = userHandle?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    _sendBroadcastAsUser$1(
      reference.pointer,
      _id_sendBroadcastAsUser$1 as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$userHandle.pointer,
      _$string.pointer,
    ).check();
  }

  static final _id_sendOrderedBroadcastAsUser = _class.instanceMethodId(
    r'sendOrderedBroadcastAsUser',
    r'(Landroid/content/Intent;Landroid/os/UserHandle;Ljava/lang/String;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V',
  );

  static final _sendOrderedBroadcastAsUser =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void sendOrderedBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle, java.lang.String string, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string1, android.os.Bundle bundle)`
  void sendOrderedBroadcastAsUser(
    Intent? intent,
    jni$_.JObject? userHandle,
    jni$_.JString? string,
    jni$_.JObject? broadcastReceiver,
    jni$_.JObject? handler,
    int i,
    jni$_.JString? string1,
    jni$_.JObject? bundle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$userHandle = userHandle?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$broadcastReceiver = broadcastReceiver?.reference ?? jni$_.jNullReference;
    final _$handler = handler?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _sendOrderedBroadcastAsUser(
      reference.pointer,
      _id_sendOrderedBroadcastAsUser as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$userHandle.pointer,
      _$string.pointer,
      _$broadcastReceiver.pointer,
      _$handler.pointer,
      i,
      _$string1.pointer,
      _$bundle.pointer,
    ).check();
  }

  static final _id_sendOrderedBroadcast$4 = _class.instanceMethodId(
    r'sendOrderedBroadcast',
    r'(Landroid/content/Intent;Ljava/lang/String;Ljava/lang/String;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V',
  );

  static final _sendOrderedBroadcast$4 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void sendOrderedBroadcast(android.content.Intent intent, java.lang.String string, java.lang.String string1, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string2, android.os.Bundle bundle)`
  void sendOrderedBroadcast$4(
    Intent? intent,
    jni$_.JString? string,
    jni$_.JString? string1,
    jni$_.JObject? broadcastReceiver,
    jni$_.JObject? handler,
    int i,
    jni$_.JString? string2,
    jni$_.JObject? bundle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    final _$broadcastReceiver = broadcastReceiver?.reference ?? jni$_.jNullReference;
    final _$handler = handler?.reference ?? jni$_.jNullReference;
    final _$string2 = string2?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _sendOrderedBroadcast$4(
      reference.pointer,
      _id_sendOrderedBroadcast$4 as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$string.pointer,
      _$string1.pointer,
      _$broadcastReceiver.pointer,
      _$handler.pointer,
      i,
      _$string2.pointer,
      _$bundle.pointer,
    ).check();
  }

  static final _id_sendStickyBroadcast = _class.instanceMethodId(
    r'sendStickyBroadcast',
    r'(Landroid/content/Intent;)V',
  );

  static final _sendStickyBroadcast =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public abstract void sendStickyBroadcast(android.content.Intent intent)`
  void sendStickyBroadcast(
    Intent? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _sendStickyBroadcast(reference.pointer, _id_sendStickyBroadcast as jni$_.JMethodIDPtr, _$intent.pointer).check();
  }

  static final _id_sendStickyBroadcast$1 = _class.instanceMethodId(
    r'sendStickyBroadcast',
    r'(Landroid/content/Intent;Landroid/os/Bundle;)V',
  );

  static final _sendStickyBroadcast$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void sendStickyBroadcast(android.content.Intent intent, android.os.Bundle bundle)`
  void sendStickyBroadcast$1(
    Intent? intent,
    jni$_.JObject? bundle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _sendStickyBroadcast$1(
      reference.pointer,
      _id_sendStickyBroadcast$1 as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$bundle.pointer,
    ).check();
  }

  static final _id_sendStickyOrderedBroadcast = _class.instanceMethodId(
    r'sendStickyOrderedBroadcast',
    r'(Landroid/content/Intent;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V',
  );

  static final _sendStickyOrderedBroadcast =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void sendStickyOrderedBroadcast(android.content.Intent intent, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string, android.os.Bundle bundle)`
  void sendStickyOrderedBroadcast(
    Intent? intent,
    jni$_.JObject? broadcastReceiver,
    jni$_.JObject? handler,
    int i,
    jni$_.JString? string,
    jni$_.JObject? bundle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$broadcastReceiver = broadcastReceiver?.reference ?? jni$_.jNullReference;
    final _$handler = handler?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _sendStickyOrderedBroadcast(
      reference.pointer,
      _id_sendStickyOrderedBroadcast as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$broadcastReceiver.pointer,
      _$handler.pointer,
      i,
      _$string.pointer,
      _$bundle.pointer,
    ).check();
  }

  static final _id_removeStickyBroadcast = _class.instanceMethodId(
    r'removeStickyBroadcast',
    r'(Landroid/content/Intent;)V',
  );

  static final _removeStickyBroadcast =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public abstract void removeStickyBroadcast(android.content.Intent intent)`
  void removeStickyBroadcast(
    Intent? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _removeStickyBroadcast(
      reference.pointer,
      _id_removeStickyBroadcast as jni$_.JMethodIDPtr,
      _$intent.pointer,
    ).check();
  }

  static final _id_sendStickyBroadcastAsUser = _class.instanceMethodId(
    r'sendStickyBroadcastAsUser',
    r'(Landroid/content/Intent;Landroid/os/UserHandle;)V',
  );

  static final _sendStickyBroadcastAsUser =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void sendStickyBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle)`
  void sendStickyBroadcastAsUser(
    Intent? intent,
    jni$_.JObject? userHandle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$userHandle = userHandle?.reference ?? jni$_.jNullReference;
    _sendStickyBroadcastAsUser(
      reference.pointer,
      _id_sendStickyBroadcastAsUser as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$userHandle.pointer,
    ).check();
  }

  static final _id_sendStickyOrderedBroadcastAsUser = _class.instanceMethodId(
    r'sendStickyOrderedBroadcastAsUser',
    r'(Landroid/content/Intent;Landroid/os/UserHandle;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V',
  );

  static final _sendStickyOrderedBroadcastAsUser =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void sendStickyOrderedBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string, android.os.Bundle bundle)`
  void sendStickyOrderedBroadcastAsUser(
    Intent? intent,
    jni$_.JObject? userHandle,
    jni$_.JObject? broadcastReceiver,
    jni$_.JObject? handler,
    int i,
    jni$_.JString? string,
    jni$_.JObject? bundle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$userHandle = userHandle?.reference ?? jni$_.jNullReference;
    final _$broadcastReceiver = broadcastReceiver?.reference ?? jni$_.jNullReference;
    final _$handler = handler?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _sendStickyOrderedBroadcastAsUser(
      reference.pointer,
      _id_sendStickyOrderedBroadcastAsUser as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$userHandle.pointer,
      _$broadcastReceiver.pointer,
      _$handler.pointer,
      i,
      _$string.pointer,
      _$bundle.pointer,
    ).check();
  }

  static final _id_removeStickyBroadcastAsUser = _class.instanceMethodId(
    r'removeStickyBroadcastAsUser',
    r'(Landroid/content/Intent;Landroid/os/UserHandle;)V',
  );

  static final _removeStickyBroadcastAsUser =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void removeStickyBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle)`
  void removeStickyBroadcastAsUser(
    Intent? intent,
    jni$_.JObject? userHandle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$userHandle = userHandle?.reference ?? jni$_.jNullReference;
    _removeStickyBroadcastAsUser(
      reference.pointer,
      _id_removeStickyBroadcastAsUser as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$userHandle.pointer,
    ).check();
  }

  static final _id_registerReceiver = _class.instanceMethodId(
    r'registerReceiver',
    r'(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;)Landroid/content/Intent;',
  );

  static final _registerReceiver =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract android.content.Intent registerReceiver(android.content.BroadcastReceiver broadcastReceiver, android.content.IntentFilter intentFilter)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? registerReceiver(
    jni$_.JObject? broadcastReceiver,
    jni$_.JObject? intentFilter,
  ) {
    final _$broadcastReceiver = broadcastReceiver?.reference ?? jni$_.jNullReference;
    final _$intentFilter = intentFilter?.reference ?? jni$_.jNullReference;
    return _registerReceiver(
      reference.pointer,
      _id_registerReceiver as jni$_.JMethodIDPtr,
      _$broadcastReceiver.pointer,
      _$intentFilter.pointer,
    ).object<Intent?>(const $Intent$NullableType());
  }

  static final _id_registerReceiver$1 = _class.instanceMethodId(
    r'registerReceiver',
    r'(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;I)Landroid/content/Intent;',
  );

  static final _registerReceiver$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public abstract android.content.Intent registerReceiver(android.content.BroadcastReceiver broadcastReceiver, android.content.IntentFilter intentFilter, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? registerReceiver$1(
    jni$_.JObject? broadcastReceiver,
    jni$_.JObject? intentFilter,
    int i,
  ) {
    final _$broadcastReceiver = broadcastReceiver?.reference ?? jni$_.jNullReference;
    final _$intentFilter = intentFilter?.reference ?? jni$_.jNullReference;
    return _registerReceiver$1(
      reference.pointer,
      _id_registerReceiver$1 as jni$_.JMethodIDPtr,
      _$broadcastReceiver.pointer,
      _$intentFilter.pointer,
      i,
    ).object<Intent?>(const $Intent$NullableType());
  }

  static final _id_registerReceiver$2 = _class.instanceMethodId(
    r'registerReceiver',
    r'(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;Ljava/lang/String;Landroid/os/Handler;)Landroid/content/Intent;',
  );

  static final _registerReceiver$2 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract android.content.Intent registerReceiver(android.content.BroadcastReceiver broadcastReceiver, android.content.IntentFilter intentFilter, java.lang.String string, android.os.Handler handler)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? registerReceiver$2(
    jni$_.JObject? broadcastReceiver,
    jni$_.JObject? intentFilter,
    jni$_.JString? string,
    jni$_.JObject? handler,
  ) {
    final _$broadcastReceiver = broadcastReceiver?.reference ?? jni$_.jNullReference;
    final _$intentFilter = intentFilter?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$handler = handler?.reference ?? jni$_.jNullReference;
    return _registerReceiver$2(
      reference.pointer,
      _id_registerReceiver$2 as jni$_.JMethodIDPtr,
      _$broadcastReceiver.pointer,
      _$intentFilter.pointer,
      _$string.pointer,
      _$handler.pointer,
    ).object<Intent?>(const $Intent$NullableType());
  }

  static final _id_registerReceiver$3 = _class.instanceMethodId(
    r'registerReceiver',
    r'(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;Ljava/lang/String;Landroid/os/Handler;I)Landroid/content/Intent;',
  );

  static final _registerReceiver$3 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                  )
                >,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public abstract android.content.Intent registerReceiver(android.content.BroadcastReceiver broadcastReceiver, android.content.IntentFilter intentFilter, java.lang.String string, android.os.Handler handler, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? registerReceiver$3(
    jni$_.JObject? broadcastReceiver,
    jni$_.JObject? intentFilter,
    jni$_.JString? string,
    jni$_.JObject? handler,
    int i,
  ) {
    final _$broadcastReceiver = broadcastReceiver?.reference ?? jni$_.jNullReference;
    final _$intentFilter = intentFilter?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$handler = handler?.reference ?? jni$_.jNullReference;
    return _registerReceiver$3(
      reference.pointer,
      _id_registerReceiver$3 as jni$_.JMethodIDPtr,
      _$broadcastReceiver.pointer,
      _$intentFilter.pointer,
      _$string.pointer,
      _$handler.pointer,
      i,
    ).object<Intent?>(const $Intent$NullableType());
  }

  static final _id_unregisterReceiver = _class.instanceMethodId(
    r'unregisterReceiver',
    r'(Landroid/content/BroadcastReceiver;)V',
  );

  static final _unregisterReceiver =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public abstract void unregisterReceiver(android.content.BroadcastReceiver broadcastReceiver)`
  void unregisterReceiver(
    jni$_.JObject? broadcastReceiver,
  ) {
    final _$broadcastReceiver = broadcastReceiver?.reference ?? jni$_.jNullReference;
    _unregisterReceiver(
      reference.pointer,
      _id_unregisterReceiver as jni$_.JMethodIDPtr,
      _$broadcastReceiver.pointer,
    ).check();
  }

  static final _id_startService = _class.instanceMethodId(
    r'startService',
    r'(Landroid/content/Intent;)Landroid/content/ComponentName;',
  );

  static final _startService =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public abstract android.content.ComponentName startService(android.content.Intent intent)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? startService(
    Intent? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    return _startService(
      reference.pointer,
      _id_startService as jni$_.JMethodIDPtr,
      _$intent.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_startForegroundService = _class.instanceMethodId(
    r'startForegroundService',
    r'(Landroid/content/Intent;)Landroid/content/ComponentName;',
  );

  static final _startForegroundService =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public abstract android.content.ComponentName startForegroundService(android.content.Intent intent)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? startForegroundService(
    Intent? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    return _startForegroundService(
      reference.pointer,
      _id_startForegroundService as jni$_.JMethodIDPtr,
      _$intent.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_stopService = _class.instanceMethodId(
    r'stopService',
    r'(Landroid/content/Intent;)Z',
  );

  static final _stopService =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public abstract boolean stopService(android.content.Intent intent)`
  bool stopService(
    Intent? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    return _stopService(reference.pointer, _id_stopService as jni$_.JMethodIDPtr, _$intent.pointer).boolean;
  }

  static final _id_bindService = _class.instanceMethodId(
    r'bindService',
    r'(Landroid/content/Intent;Landroid/content/ServiceConnection;I)Z',
  );

  static final _bindService =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public abstract boolean bindService(android.content.Intent intent, android.content.ServiceConnection serviceConnection, int i)`
  bool bindService(
    Intent? intent,
    jni$_.JObject? serviceConnection,
    int i,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$serviceConnection = serviceConnection?.reference ?? jni$_.jNullReference;
    return _bindService(
      reference.pointer,
      _id_bindService as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$serviceConnection.pointer,
      i,
    ).boolean;
  }

  static final _id_bindService$1 = _class.instanceMethodId(
    r'bindService',
    r'(Landroid/content/Intent;Landroid/content/ServiceConnection;Landroid/content/Context$BindServiceFlags;)Z',
  );

  static final _bindService$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean bindService(android.content.Intent intent, android.content.ServiceConnection serviceConnection, android.content.Context$BindServiceFlags bindServiceFlags)`
  bool bindService$1(
    Intent? intent,
    jni$_.JObject? serviceConnection,
    Context$BindServiceFlags? bindServiceFlags,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$serviceConnection = serviceConnection?.reference ?? jni$_.jNullReference;
    final _$bindServiceFlags = bindServiceFlags?.reference ?? jni$_.jNullReference;
    return _bindService$1(
      reference.pointer,
      _id_bindService$1 as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$serviceConnection.pointer,
      _$bindServiceFlags.pointer,
    ).boolean;
  }

  static final _id_bindService$2 = _class.instanceMethodId(
    r'bindService',
    r'(Landroid/content/Intent;ILjava/util/concurrent/Executor;Landroid/content/ServiceConnection;)Z',
  );

  static final _bindService$2 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Int32, jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean bindService(android.content.Intent intent, int i, java.util.concurrent.Executor executor, android.content.ServiceConnection serviceConnection)`
  bool bindService$2(
    Intent? intent,
    int i,
    jni$_.JObject? executor,
    jni$_.JObject? serviceConnection,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$executor = executor?.reference ?? jni$_.jNullReference;
    final _$serviceConnection = serviceConnection?.reference ?? jni$_.jNullReference;
    return _bindService$2(
      reference.pointer,
      _id_bindService$2 as jni$_.JMethodIDPtr,
      _$intent.pointer,
      i,
      _$executor.pointer,
      _$serviceConnection.pointer,
    ).boolean;
  }

  static final _id_bindService$3 = _class.instanceMethodId(
    r'bindService',
    r'(Landroid/content/Intent;Landroid/content/Context$BindServiceFlags;Ljava/util/concurrent/Executor;Landroid/content/ServiceConnection;)Z',
  );

  static final _bindService$3 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean bindService(android.content.Intent intent, android.content.Context$BindServiceFlags bindServiceFlags, java.util.concurrent.Executor executor, android.content.ServiceConnection serviceConnection)`
  bool bindService$3(
    Intent? intent,
    Context$BindServiceFlags? bindServiceFlags,
    jni$_.JObject? executor,
    jni$_.JObject? serviceConnection,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$bindServiceFlags = bindServiceFlags?.reference ?? jni$_.jNullReference;
    final _$executor = executor?.reference ?? jni$_.jNullReference;
    final _$serviceConnection = serviceConnection?.reference ?? jni$_.jNullReference;
    return _bindService$3(
      reference.pointer,
      _id_bindService$3 as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$bindServiceFlags.pointer,
      _$executor.pointer,
      _$serviceConnection.pointer,
    ).boolean;
  }

  static final _id_bindIsolatedService = _class.instanceMethodId(
    r'bindIsolatedService',
    r'(Landroid/content/Intent;ILjava/lang/String;Ljava/util/concurrent/Executor;Landroid/content/ServiceConnection;)Z',
  );

  static final _bindIsolatedService =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean bindIsolatedService(android.content.Intent intent, int i, java.lang.String string, java.util.concurrent.Executor executor, android.content.ServiceConnection serviceConnection)`
  bool bindIsolatedService(
    Intent? intent,
    int i,
    jni$_.JString? string,
    jni$_.JObject? executor,
    jni$_.JObject? serviceConnection,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$executor = executor?.reference ?? jni$_.jNullReference;
    final _$serviceConnection = serviceConnection?.reference ?? jni$_.jNullReference;
    return _bindIsolatedService(
      reference.pointer,
      _id_bindIsolatedService as jni$_.JMethodIDPtr,
      _$intent.pointer,
      i,
      _$string.pointer,
      _$executor.pointer,
      _$serviceConnection.pointer,
    ).boolean;
  }

  static final _id_bindIsolatedService$1 = _class.instanceMethodId(
    r'bindIsolatedService',
    r'(Landroid/content/Intent;Landroid/content/Context$BindServiceFlags;Ljava/lang/String;Ljava/util/concurrent/Executor;Landroid/content/ServiceConnection;)Z',
  );

  static final _bindIsolatedService$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean bindIsolatedService(android.content.Intent intent, android.content.Context$BindServiceFlags bindServiceFlags, java.lang.String string, java.util.concurrent.Executor executor, android.content.ServiceConnection serviceConnection)`
  bool bindIsolatedService$1(
    Intent? intent,
    Context$BindServiceFlags? bindServiceFlags,
    jni$_.JString? string,
    jni$_.JObject? executor,
    jni$_.JObject? serviceConnection,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$bindServiceFlags = bindServiceFlags?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$executor = executor?.reference ?? jni$_.jNullReference;
    final _$serviceConnection = serviceConnection?.reference ?? jni$_.jNullReference;
    return _bindIsolatedService$1(
      reference.pointer,
      _id_bindIsolatedService$1 as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$bindServiceFlags.pointer,
      _$string.pointer,
      _$executor.pointer,
      _$serviceConnection.pointer,
    ).boolean;
  }

  static final _id_bindServiceAsUser = _class.instanceMethodId(
    r'bindServiceAsUser',
    r'(Landroid/content/Intent;Landroid/content/ServiceConnection;ILandroid/os/UserHandle;)Z',
  );

  static final _bindServiceAsUser =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>, jni$_.Int32, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean bindServiceAsUser(android.content.Intent intent, android.content.ServiceConnection serviceConnection, int i, android.os.UserHandle userHandle)`
  bool bindServiceAsUser(
    Intent? intent,
    jni$_.JObject? serviceConnection,
    int i,
    jni$_.JObject? userHandle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$serviceConnection = serviceConnection?.reference ?? jni$_.jNullReference;
    final _$userHandle = userHandle?.reference ?? jni$_.jNullReference;
    return _bindServiceAsUser(
      reference.pointer,
      _id_bindServiceAsUser as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$serviceConnection.pointer,
      i,
      _$userHandle.pointer,
    ).boolean;
  }

  static final _id_bindServiceAsUser$1 = _class.instanceMethodId(
    r'bindServiceAsUser',
    r'(Landroid/content/Intent;Landroid/content/ServiceConnection;Landroid/content/Context$BindServiceFlags;Landroid/os/UserHandle;)Z',
  );

  static final _bindServiceAsUser$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean bindServiceAsUser(android.content.Intent intent, android.content.ServiceConnection serviceConnection, android.content.Context$BindServiceFlags bindServiceFlags, android.os.UserHandle userHandle)`
  bool bindServiceAsUser$1(
    Intent? intent,
    jni$_.JObject? serviceConnection,
    Context$BindServiceFlags? bindServiceFlags,
    jni$_.JObject? userHandle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$serviceConnection = serviceConnection?.reference ?? jni$_.jNullReference;
    final _$bindServiceFlags = bindServiceFlags?.reference ?? jni$_.jNullReference;
    final _$userHandle = userHandle?.reference ?? jni$_.jNullReference;
    return _bindServiceAsUser$1(
      reference.pointer,
      _id_bindServiceAsUser$1 as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$serviceConnection.pointer,
      _$bindServiceFlags.pointer,
      _$userHandle.pointer,
    ).boolean;
  }

  static final _id_updateServiceGroup = _class.instanceMethodId(
    r'updateServiceGroup',
    r'(Landroid/content/ServiceConnection;II)V',
  );

  static final _updateServiceGroup =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
            )
          >();

  /// from: `public void updateServiceGroup(android.content.ServiceConnection serviceConnection, int i, int i1)`
  void updateServiceGroup(
    jni$_.JObject? serviceConnection,
    int i,
    int i1,
  ) {
    final _$serviceConnection = serviceConnection?.reference ?? jni$_.jNullReference;
    _updateServiceGroup(
      reference.pointer,
      _id_updateServiceGroup as jni$_.JMethodIDPtr,
      _$serviceConnection.pointer,
      i,
      i1,
    ).check();
  }

  static final _id_unbindService = _class.instanceMethodId(
    r'unbindService',
    r'(Landroid/content/ServiceConnection;)V',
  );

  static final _unbindService =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public abstract void unbindService(android.content.ServiceConnection serviceConnection)`
  void unbindService(
    jni$_.JObject? serviceConnection,
  ) {
    final _$serviceConnection = serviceConnection?.reference ?? jni$_.jNullReference;
    _unbindService(reference.pointer, _id_unbindService as jni$_.JMethodIDPtr, _$serviceConnection.pointer).check();
  }

  static final _id_startInstrumentation = _class.instanceMethodId(
    r'startInstrumentation',
    r'(Landroid/content/ComponentName;Ljava/lang/String;Landroid/os/Bundle;)Z',
  );

  static final _startInstrumentation =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract boolean startInstrumentation(android.content.ComponentName componentName, java.lang.String string, android.os.Bundle bundle)`
  bool startInstrumentation(
    jni$_.JObject? componentName,
    jni$_.JString? string,
    jni$_.JObject? bundle,
  ) {
    final _$componentName = componentName?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    return _startInstrumentation(
      reference.pointer,
      _id_startInstrumentation as jni$_.JMethodIDPtr,
      _$componentName.pointer,
      _$string.pointer,
      _$bundle.pointer,
    ).boolean;
  }

  static final _id_getSystemService = _class.instanceMethodId(
    r'getSystemService',
    r'(Ljava/lang/String;)Ljava/lang/Object;',
  );

  static final _getSystemService =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public abstract java.lang.Object getSystemService(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getSystemService(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getSystemService(
      reference.pointer,
      _id_getSystemService as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getSystemService$1 = _class.instanceMethodId(
    r'getSystemService',
    r'(Ljava/lang/Class;)Ljava/lang/Object;',
  );

  static final _getSystemService$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public final T getSystemService(java.lang.Class<T> class)`
  /// The returned object must be released after use, by calling the [release] method.
  $T? getSystemService$1<$T extends jni$_.JObject?>(
    jni$_.JObject? class$, {
    required jni$_.JObjType<$T> T,
  }) {
    final _$class$ = class$?.reference ?? jni$_.jNullReference;
    return _getSystemService$1(
      reference.pointer,
      _id_getSystemService$1 as jni$_.JMethodIDPtr,
      _$class$.pointer,
    ).object<$T?>(T.nullableType);
  }

  static final _id_getSystemServiceName = _class.instanceMethodId(
    r'getSystemServiceName',
    r'(Ljava/lang/Class;)Ljava/lang/String;',
  );

  static final _getSystemServiceName =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public abstract java.lang.String getSystemServiceName(java.lang.Class<?> class)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getSystemServiceName(
    jni$_.JObject? class$,
  ) {
    final _$class$ = class$?.reference ?? jni$_.jNullReference;
    return _getSystemServiceName(
      reference.pointer,
      _id_getSystemServiceName as jni$_.JMethodIDPtr,
      _$class$.pointer,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_checkPermission = _class.instanceMethodId(
    r'checkPermission',
    r'(Ljava/lang/String;II)I',
  );

  static final _checkPermission =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int, int)
          >();

  /// from: `public abstract int checkPermission(java.lang.String string, int i, int i1)`
  int checkPermission(
    jni$_.JString? string,
    int i,
    int i1,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _checkPermission(
      reference.pointer,
      _id_checkPermission as jni$_.JMethodIDPtr,
      _$string.pointer,
      i,
      i1,
    ).integer;
  }

  static final _id_checkCallingPermission = _class.instanceMethodId(
    r'checkCallingPermission',
    r'(Ljava/lang/String;)I',
  );

  static final _checkCallingPermission =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public abstract int checkCallingPermission(java.lang.String string)`
  int checkCallingPermission(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _checkCallingPermission(
      reference.pointer,
      _id_checkCallingPermission as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).integer;
  }

  static final _id_checkCallingOrSelfPermission = _class.instanceMethodId(
    r'checkCallingOrSelfPermission',
    r'(Ljava/lang/String;)I',
  );

  static final _checkCallingOrSelfPermission =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public abstract int checkCallingOrSelfPermission(java.lang.String string)`
  int checkCallingOrSelfPermission(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _checkCallingOrSelfPermission(
      reference.pointer,
      _id_checkCallingOrSelfPermission as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).integer;
  }

  static final _id_checkSelfPermission = _class.instanceMethodId(
    r'checkSelfPermission',
    r'(Ljava/lang/String;)I',
  );

  static final _checkSelfPermission =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public abstract int checkSelfPermission(java.lang.String string)`
  int checkSelfPermission(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _checkSelfPermission(
      reference.pointer,
      _id_checkSelfPermission as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).integer;
  }

  static final _id_enforcePermission = _class.instanceMethodId(
    r'enforcePermission',
    r'(Ljava/lang/String;IILjava/lang/String;)V',
  );

  static final _enforcePermission =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32, jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void enforcePermission(java.lang.String string, int i, int i1, java.lang.String string1)`
  void enforcePermission(
    jni$_.JString? string,
    int i,
    int i1,
    jni$_.JString? string1,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    _enforcePermission(
      reference.pointer,
      _id_enforcePermission as jni$_.JMethodIDPtr,
      _$string.pointer,
      i,
      i1,
      _$string1.pointer,
    ).check();
  }

  static final _id_enforceCallingPermission = _class.instanceMethodId(
    r'enforceCallingPermission',
    r'(Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _enforceCallingPermission =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void enforceCallingPermission(java.lang.String string, java.lang.String string1)`
  void enforceCallingPermission(
    jni$_.JString? string,
    jni$_.JString? string1,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    _enforceCallingPermission(
      reference.pointer,
      _id_enforceCallingPermission as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$string1.pointer,
    ).check();
  }

  static final _id_enforceCallingOrSelfPermission = _class.instanceMethodId(
    r'enforceCallingOrSelfPermission',
    r'(Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _enforceCallingOrSelfPermission =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void enforceCallingOrSelfPermission(java.lang.String string, java.lang.String string1)`
  void enforceCallingOrSelfPermission(
    jni$_.JString? string,
    jni$_.JString? string1,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    _enforceCallingOrSelfPermission(
      reference.pointer,
      _id_enforceCallingOrSelfPermission as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$string1.pointer,
    ).check();
  }

  static final _id_grantUriPermission = _class.instanceMethodId(
    r'grantUriPermission',
    r'(Ljava/lang/String;Landroid/net/Uri;I)V',
  );

  static final _grantUriPermission =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public abstract void grantUriPermission(java.lang.String string, android.net.Uri uri, int i)`
  void grantUriPermission(
    jni$_.JString? string,
    Uri? uri,
    int i,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    _grantUriPermission(
      reference.pointer,
      _id_grantUriPermission as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$uri.pointer,
      i,
    ).check();
  }

  static final _id_revokeUriPermission = _class.instanceMethodId(
    r'revokeUriPermission',
    r'(Landroid/net/Uri;I)V',
  );

  static final _revokeUriPermission =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)
          >();

  /// from: `public abstract void revokeUriPermission(android.net.Uri uri, int i)`
  void revokeUriPermission(
    Uri? uri,
    int i,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    _revokeUriPermission(reference.pointer, _id_revokeUriPermission as jni$_.JMethodIDPtr, _$uri.pointer, i).check();
  }

  static final _id_revokeUriPermission$1 = _class.instanceMethodId(
    r'revokeUriPermission',
    r'(Ljava/lang/String;Landroid/net/Uri;I)V',
  );

  static final _revokeUriPermission$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public abstract void revokeUriPermission(java.lang.String string, android.net.Uri uri, int i)`
  void revokeUriPermission$1(
    jni$_.JString? string,
    Uri? uri,
    int i,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    _revokeUriPermission$1(
      reference.pointer,
      _id_revokeUriPermission$1 as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$uri.pointer,
      i,
    ).check();
  }

  static final _id_checkUriPermission = _class.instanceMethodId(
    r'checkUriPermission',
    r'(Landroid/net/Uri;III)I',
  );

  static final _checkUriPermission =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32, jni$_.Int32, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              int,
            )
          >();

  /// from: `public abstract int checkUriPermission(android.net.Uri uri, int i, int i1, int i2)`
  int checkUriPermission(
    Uri? uri,
    int i,
    int i1,
    int i2,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    return _checkUriPermission(
      reference.pointer,
      _id_checkUriPermission as jni$_.JMethodIDPtr,
      _$uri.pointer,
      i,
      i1,
      i2,
    ).integer;
  }

  static final _id_checkContentUriPermissionFull = _class.instanceMethodId(
    r'checkContentUriPermissionFull',
    r'(Landroid/net/Uri;III)I',
  );

  static final _checkContentUriPermissionFull =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32, jni$_.Int32, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              int,
            )
          >();

  /// from: `public int checkContentUriPermissionFull(android.net.Uri uri, int i, int i1, int i2)`
  int checkContentUriPermissionFull(
    Uri? uri,
    int i,
    int i1,
    int i2,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    return _checkContentUriPermissionFull(
      reference.pointer,
      _id_checkContentUriPermissionFull as jni$_.JMethodIDPtr,
      _$uri.pointer,
      i,
      i1,
      i2,
    ).integer;
  }

  static final _id_checkUriPermissions = _class.instanceMethodId(
    r'checkUriPermissions',
    r'(Ljava/util/List;III)[I',
  );

  static final _checkUriPermissions =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32, jni$_.Int32, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              int,
            )
          >();

  /// from: `public int[] checkUriPermissions(java.util.List<android.net.Uri> list, int i, int i1, int i2)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JIntArray? checkUriPermissions(
    jni$_.JList<Uri?>? list,
    int i,
    int i1,
    int i2,
  ) {
    final _$list = list?.reference ?? jni$_.jNullReference;
    return _checkUriPermissions(
      reference.pointer,
      _id_checkUriPermissions as jni$_.JMethodIDPtr,
      _$list.pointer,
      i,
      i1,
      i2,
    ).object<jni$_.JIntArray?>(const jni$_.JIntArrayNullableType());
  }

  static final _id_checkCallingUriPermission = _class.instanceMethodId(
    r'checkCallingUriPermission',
    r'(Landroid/net/Uri;I)I',
  );

  static final _checkCallingUriPermission =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)
          >();

  /// from: `public abstract int checkCallingUriPermission(android.net.Uri uri, int i)`
  int checkCallingUriPermission(
    Uri? uri,
    int i,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    return _checkCallingUriPermission(
      reference.pointer,
      _id_checkCallingUriPermission as jni$_.JMethodIDPtr,
      _$uri.pointer,
      i,
    ).integer;
  }

  static final _id_checkCallingUriPermissions = _class.instanceMethodId(
    r'checkCallingUriPermissions',
    r'(Ljava/util/List;I)[I',
  );

  static final _checkCallingUriPermissions =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)
          >();

  /// from: `public int[] checkCallingUriPermissions(java.util.List<android.net.Uri> list, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JIntArray? checkCallingUriPermissions(
    jni$_.JList<Uri?>? list,
    int i,
  ) {
    final _$list = list?.reference ?? jni$_.jNullReference;
    return _checkCallingUriPermissions(
      reference.pointer,
      _id_checkCallingUriPermissions as jni$_.JMethodIDPtr,
      _$list.pointer,
      i,
    ).object<jni$_.JIntArray?>(const jni$_.JIntArrayNullableType());
  }

  static final _id_checkCallingOrSelfUriPermission = _class.instanceMethodId(
    r'checkCallingOrSelfUriPermission',
    r'(Landroid/net/Uri;I)I',
  );

  static final _checkCallingOrSelfUriPermission =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)
          >();

  /// from: `public abstract int checkCallingOrSelfUriPermission(android.net.Uri uri, int i)`
  int checkCallingOrSelfUriPermission(
    Uri? uri,
    int i,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    return _checkCallingOrSelfUriPermission(
      reference.pointer,
      _id_checkCallingOrSelfUriPermission as jni$_.JMethodIDPtr,
      _$uri.pointer,
      i,
    ).integer;
  }

  static final _id_checkCallingOrSelfUriPermissions = _class.instanceMethodId(
    r'checkCallingOrSelfUriPermissions',
    r'(Ljava/util/List;I)[I',
  );

  static final _checkCallingOrSelfUriPermissions =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)
          >();

  /// from: `public int[] checkCallingOrSelfUriPermissions(java.util.List<android.net.Uri> list, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JIntArray? checkCallingOrSelfUriPermissions(
    jni$_.JList<Uri?>? list,
    int i,
  ) {
    final _$list = list?.reference ?? jni$_.jNullReference;
    return _checkCallingOrSelfUriPermissions(
      reference.pointer,
      _id_checkCallingOrSelfUriPermissions as jni$_.JMethodIDPtr,
      _$list.pointer,
      i,
    ).object<jni$_.JIntArray?>(const jni$_.JIntArrayNullableType());
  }

  static final _id_checkUriPermission$1 = _class.instanceMethodId(
    r'checkUriPermission',
    r'(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;III)I',
  );

  static final _checkUriPermission$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Int32,
                    jni$_.Int32,
                  )
                >,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              int,
            )
          >();

  /// from: `public abstract int checkUriPermission(android.net.Uri uri, java.lang.String string, java.lang.String string1, int i, int i1, int i2)`
  int checkUriPermission$1(
    Uri? uri,
    jni$_.JString? string,
    jni$_.JString? string1,
    int i,
    int i1,
    int i2,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    return _checkUriPermission$1(
      reference.pointer,
      _id_checkUriPermission$1 as jni$_.JMethodIDPtr,
      _$uri.pointer,
      _$string.pointer,
      _$string1.pointer,
      i,
      i1,
      i2,
    ).integer;
  }

  static final _id_enforceUriPermission = _class.instanceMethodId(
    r'enforceUriPermission',
    r'(Landroid/net/Uri;IIILjava/lang/String;)V',
  );

  static final _enforceUriPermission =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Int32, jni$_.Int32, jni$_.Int32, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void enforceUriPermission(android.net.Uri uri, int i, int i1, int i2, java.lang.String string)`
  void enforceUriPermission(
    Uri? uri,
    int i,
    int i1,
    int i2,
    jni$_.JString? string,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    _enforceUriPermission(
      reference.pointer,
      _id_enforceUriPermission as jni$_.JMethodIDPtr,
      _$uri.pointer,
      i,
      i1,
      i2,
      _$string.pointer,
    ).check();
  }

  static final _id_enforceCallingUriPermission = _class.instanceMethodId(
    r'enforceCallingUriPermission',
    r'(Landroid/net/Uri;ILjava/lang/String;)V',
  );

  static final _enforceCallingUriPermission =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void enforceCallingUriPermission(android.net.Uri uri, int i, java.lang.String string)`
  void enforceCallingUriPermission(
    Uri? uri,
    int i,
    jni$_.JString? string,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    _enforceCallingUriPermission(
      reference.pointer,
      _id_enforceCallingUriPermission as jni$_.JMethodIDPtr,
      _$uri.pointer,
      i,
      _$string.pointer,
    ).check();
  }

  static final _id_enforceCallingOrSelfUriPermission = _class.instanceMethodId(
    r'enforceCallingOrSelfUriPermission',
    r'(Landroid/net/Uri;ILjava/lang/String;)V',
  );

  static final _enforceCallingOrSelfUriPermission =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void enforceCallingOrSelfUriPermission(android.net.Uri uri, int i, java.lang.String string)`
  void enforceCallingOrSelfUriPermission(
    Uri? uri,
    int i,
    jni$_.JString? string,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    _enforceCallingOrSelfUriPermission(
      reference.pointer,
      _id_enforceCallingOrSelfUriPermission as jni$_.JMethodIDPtr,
      _$uri.pointer,
      i,
      _$string.pointer,
    ).check();
  }

  static final _id_enforceUriPermission$1 = _class.instanceMethodId(
    r'enforceUriPermission',
    r'(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;IIILjava/lang/String;)V',
  );

  static final _enforceUriPermission$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Int32,
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void enforceUriPermission(android.net.Uri uri, java.lang.String string, java.lang.String string1, int i, int i1, int i2, java.lang.String string2)`
  void enforceUriPermission$1(
    Uri? uri,
    jni$_.JString? string,
    jni$_.JString? string1,
    int i,
    int i1,
    int i2,
    jni$_.JString? string2,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    final _$string2 = string2?.reference ?? jni$_.jNullReference;
    _enforceUriPermission$1(
      reference.pointer,
      _id_enforceUriPermission$1 as jni$_.JMethodIDPtr,
      _$uri.pointer,
      _$string.pointer,
      _$string1.pointer,
      i,
      i1,
      i2,
      _$string2.pointer,
    ).check();
  }

  static final _id_revokeSelfPermissionOnKill = _class.instanceMethodId(
    r'revokeSelfPermissionOnKill',
    r'(Ljava/lang/String;)V',
  );

  static final _revokeSelfPermissionOnKill =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void revokeSelfPermissionOnKill(java.lang.String string)`
  void revokeSelfPermissionOnKill(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    _revokeSelfPermissionOnKill(
      reference.pointer,
      _id_revokeSelfPermissionOnKill as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).check();
  }

  static final _id_revokeSelfPermissionsOnKill = _class.instanceMethodId(
    r'revokeSelfPermissionsOnKill',
    r'(Ljava/util/Collection;)V',
  );

  static final _revokeSelfPermissionsOnKill =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void revokeSelfPermissionsOnKill(java.util.Collection<java.lang.String> collection)`
  void revokeSelfPermissionsOnKill(
    jni$_.JObject? collection,
  ) {
    final _$collection = collection?.reference ?? jni$_.jNullReference;
    _revokeSelfPermissionsOnKill(
      reference.pointer,
      _id_revokeSelfPermissionsOnKill as jni$_.JMethodIDPtr,
      _$collection.pointer,
    ).check();
  }

  static final _id_createPackageContext = _class.instanceMethodId(
    r'createPackageContext',
    r'(Ljava/lang/String;I)Landroid/content/Context;',
  );

  static final _createPackageContext =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)
          >();

  /// from: `public abstract android.content.Context createPackageContext(java.lang.String string, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  Context? createPackageContext(
    jni$_.JString? string,
    int i,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _createPackageContext(
      reference.pointer,
      _id_createPackageContext as jni$_.JMethodIDPtr,
      _$string.pointer,
      i,
    ).object<Context?>(const $Context$NullableType());
  }

  static final _id_createContextForSplit = _class.instanceMethodId(
    r'createContextForSplit',
    r'(Ljava/lang/String;)Landroid/content/Context;',
  );

  static final _createContextForSplit =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public abstract android.content.Context createContextForSplit(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Context? createContextForSplit(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _createContextForSplit(
      reference.pointer,
      _id_createContextForSplit as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<Context?>(const $Context$NullableType());
  }

  static final _id_createConfigurationContext = _class.instanceMethodId(
    r'createConfigurationContext',
    r'(Landroid/content/res/Configuration;)Landroid/content/Context;',
  );

  static final _createConfigurationContext =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public abstract android.content.Context createConfigurationContext(android.content.res.Configuration configuration)`
  /// The returned object must be released after use, by calling the [release] method.
  Context? createConfigurationContext(
    jni$_.JObject? configuration,
  ) {
    final _$configuration = configuration?.reference ?? jni$_.jNullReference;
    return _createConfigurationContext(
      reference.pointer,
      _id_createConfigurationContext as jni$_.JMethodIDPtr,
      _$configuration.pointer,
    ).object<Context?>(const $Context$NullableType());
  }

  static final _id_createDisplayContext = _class.instanceMethodId(
    r'createDisplayContext',
    r'(Landroid/view/Display;)Landroid/content/Context;',
  );

  static final _createDisplayContext =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public abstract android.content.Context createDisplayContext(android.view.Display display)`
  /// The returned object must be released after use, by calling the [release] method.
  Context? createDisplayContext(
    jni$_.JObject? display,
  ) {
    final _$display = display?.reference ?? jni$_.jNullReference;
    return _createDisplayContext(
      reference.pointer,
      _id_createDisplayContext as jni$_.JMethodIDPtr,
      _$display.pointer,
    ).object<Context?>(const $Context$NullableType());
  }

  static final _id_createDeviceContext = _class.instanceMethodId(
    r'createDeviceContext',
    r'(I)Landroid/content/Context;',
  );

  static final _createDeviceContext =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public android.content.Context createDeviceContext(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  Context? createDeviceContext(
    int i,
  ) {
    return _createDeviceContext(
      reference.pointer,
      _id_createDeviceContext as jni$_.JMethodIDPtr,
      i,
    ).object<Context?>(const $Context$NullableType());
  }

  static final _id_createWindowContext = _class.instanceMethodId(
    r'createWindowContext',
    r'(ILandroid/os/Bundle;)Landroid/content/Context;',
  );

  static final _createWindowContext =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public android.content.Context createWindowContext(int i, android.os.Bundle bundle)`
  /// The returned object must be released after use, by calling the [release] method.
  Context? createWindowContext(
    int i,
    jni$_.JObject? bundle,
  ) {
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    return _createWindowContext(
      reference.pointer,
      _id_createWindowContext as jni$_.JMethodIDPtr,
      i,
      _$bundle.pointer,
    ).object<Context?>(const $Context$NullableType());
  }

  static final _id_createWindowContext$1 = _class.instanceMethodId(
    r'createWindowContext',
    r'(Landroid/view/Display;ILandroid/os/Bundle;)Landroid/content/Context;',
  );

  static final _createWindowContext$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public android.content.Context createWindowContext(android.view.Display display, int i, android.os.Bundle bundle)`
  /// The returned object must be released after use, by calling the [release] method.
  Context? createWindowContext$1(
    jni$_.JObject? display,
    int i,
    jni$_.JObject? bundle,
  ) {
    final _$display = display?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    return _createWindowContext$1(
      reference.pointer,
      _id_createWindowContext$1 as jni$_.JMethodIDPtr,
      _$display.pointer,
      i,
      _$bundle.pointer,
    ).object<Context?>(const $Context$NullableType());
  }

  static final _id_createContext = _class.instanceMethodId(
    r'createContext',
    r'(Landroid/content/ContextParams;)Landroid/content/Context;',
  );

  static final _createContext =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public android.content.Context createContext(android.content.ContextParams contextParams)`
  /// The returned object must be released after use, by calling the [release] method.
  Context? createContext(
    jni$_.JObject? contextParams,
  ) {
    final _$contextParams = contextParams?.reference ?? jni$_.jNullReference;
    return _createContext(
      reference.pointer,
      _id_createContext as jni$_.JMethodIDPtr,
      _$contextParams.pointer,
    ).object<Context?>(const $Context$NullableType());
  }

  static final _id_createAttributionContext = _class.instanceMethodId(
    r'createAttributionContext',
    r'(Ljava/lang/String;)Landroid/content/Context;',
  );

  static final _createAttributionContext =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public android.content.Context createAttributionContext(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Context? createAttributionContext(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _createAttributionContext(
      reference.pointer,
      _id_createAttributionContext as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<Context?>(const $Context$NullableType());
  }

  static final _id_createDeviceProtectedStorageContext = _class.instanceMethodId(
    r'createDeviceProtectedStorageContext',
    r'()Landroid/content/Context;',
  );

  static final _createDeviceProtectedStorageContext =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract android.content.Context createDeviceProtectedStorageContext()`
  /// The returned object must be released after use, by calling the [release] method.
  Context? createDeviceProtectedStorageContext() {
    return _createDeviceProtectedStorageContext(
      reference.pointer,
      _id_createDeviceProtectedStorageContext as jni$_.JMethodIDPtr,
    ).object<Context?>(const $Context$NullableType());
  }

  static final _id_getDisplay = _class.instanceMethodId(
    r'getDisplay',
    r'()Landroid/view/Display;',
  );

  static final _getDisplay =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.view.Display getDisplay()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getDisplay() {
    return _getDisplay(
      reference.pointer,
      _id_getDisplay as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getDeviceId = _class.instanceMethodId(
    r'getDeviceId',
    r'()I',
  );

  static final _getDeviceId =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int getDeviceId()`
  int getDeviceId() {
    return _getDeviceId(reference.pointer, _id_getDeviceId as jni$_.JMethodIDPtr).integer;
  }

  static final _id_registerDeviceIdChangeListener = _class.instanceMethodId(
    r'registerDeviceIdChangeListener',
    r'(Ljava/util/concurrent/Executor;Ljava/util/function/IntConsumer;)V',
  );

  static final _registerDeviceIdChangeListener =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void registerDeviceIdChangeListener(java.util.concurrent.Executor executor, java.util.function.IntConsumer intConsumer)`
  void registerDeviceIdChangeListener(
    jni$_.JObject? executor,
    jni$_.JObject? intConsumer,
  ) {
    final _$executor = executor?.reference ?? jni$_.jNullReference;
    final _$intConsumer = intConsumer?.reference ?? jni$_.jNullReference;
    _registerDeviceIdChangeListener(
      reference.pointer,
      _id_registerDeviceIdChangeListener as jni$_.JMethodIDPtr,
      _$executor.pointer,
      _$intConsumer.pointer,
    ).check();
  }

  static final _id_unregisterDeviceIdChangeListener = _class.instanceMethodId(
    r'unregisterDeviceIdChangeListener',
    r'(Ljava/util/function/IntConsumer;)V',
  );

  static final _unregisterDeviceIdChangeListener =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void unregisterDeviceIdChangeListener(java.util.function.IntConsumer intConsumer)`
  void unregisterDeviceIdChangeListener(
    jni$_.JObject? intConsumer,
  ) {
    final _$intConsumer = intConsumer?.reference ?? jni$_.jNullReference;
    _unregisterDeviceIdChangeListener(
      reference.pointer,
      _id_unregisterDeviceIdChangeListener as jni$_.JMethodIDPtr,
      _$intConsumer.pointer,
    ).check();
  }

  static final _id_isRestricted = _class.instanceMethodId(
    r'isRestricted',
    r'()Z',
  );

  static final _isRestricted =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean isRestricted()`
  bool isRestricted() {
    return _isRestricted(reference.pointer, _id_isRestricted as jni$_.JMethodIDPtr).boolean;
  }

  static final _id_isDeviceProtectedStorage = _class.instanceMethodId(
    r'isDeviceProtectedStorage',
    r'()Z',
  );

  static final _isDeviceProtectedStorage =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract boolean isDeviceProtectedStorage()`
  bool isDeviceProtectedStorage() {
    return _isDeviceProtectedStorage(reference.pointer, _id_isDeviceProtectedStorage as jni$_.JMethodIDPtr).boolean;
  }

  static final _id_isUiContext = _class.instanceMethodId(
    r'isUiContext',
    r'()Z',
  );

  static final _isUiContext =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean isUiContext()`
  bool isUiContext() {
    return _isUiContext(reference.pointer, _id_isUiContext as jni$_.JMethodIDPtr).boolean;
  }
}

final class $Context$NullableType extends jni$_.JObjType<Context?> {
  @jni$_.internal
  const $Context$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/content/Context;';

  @jni$_.internal
  @core$_.override
  Context? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : Context.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Context?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Context$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Context$NullableType) && other is $Context$NullableType;
  }
}

final class $Context$Type extends jni$_.JObjType<Context> {
  @jni$_.internal
  const $Context$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/content/Context;';

  @jni$_.internal
  @core$_.override
  Context fromReference(jni$_.JReference reference) => Context.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Context?> get nullableType => const $Context$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Context$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Context$Type) && other is $Context$Type;
  }
}

/// from: `android.app.Activity$ScreenCaptureCallback`
class Activity$ScreenCaptureCallback extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<Activity$ScreenCaptureCallback> $type;

  @jni$_.internal
  Activity$ScreenCaptureCallback.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/app/Activity$ScreenCaptureCallback');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $Activity$ScreenCaptureCallback$NullableType();
  static const type = $Activity$ScreenCaptureCallback$Type();
  static final _id_onScreenCaptured = _class.instanceMethodId(
    r'onScreenCaptured',
    r'()V',
  );

  static final _onScreenCaptured =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract void onScreenCaptured()`
  void onScreenCaptured() {
    _onScreenCaptured(reference.pointer, _id_onScreenCaptured as jni$_.JMethodIDPtr).check();
  }

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $Activity$ScreenCaptureCallback> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
    jni$_.NativeFunction<jni$_.JObjectPtr Function(jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>
  >
  _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onScreenCaptured()V') {
        _$impls[$p]!.onScreenCaptured();
        return jni$_.nullptr;
      }
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $Activity$ScreenCaptureCallback $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'android.app.Activity$ScreenCaptureCallback',
      $p,
      _$invokePointer,
      [
        if ($impl.onScreenCaptured$async) r'onScreenCaptured()V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory Activity$ScreenCaptureCallback.implement(
    $Activity$ScreenCaptureCallback $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return Activity$ScreenCaptureCallback.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $Activity$ScreenCaptureCallback {
  factory $Activity$ScreenCaptureCallback({
    required void Function() onScreenCaptured,
    bool onScreenCaptured$async,
  }) = _$Activity$ScreenCaptureCallback;

  void onScreenCaptured();
  bool get onScreenCaptured$async => false;
}

final class _$Activity$ScreenCaptureCallback with $Activity$ScreenCaptureCallback {
  _$Activity$ScreenCaptureCallback({
    required void Function() onScreenCaptured,
    this.onScreenCaptured$async = false,
  }) : _onScreenCaptured = onScreenCaptured;

  final void Function() _onScreenCaptured;
  final bool onScreenCaptured$async;

  void onScreenCaptured() {
    return _onScreenCaptured();
  }
}

final class $Activity$ScreenCaptureCallback$NullableType extends jni$_.JObjType<Activity$ScreenCaptureCallback?> {
  @jni$_.internal
  const $Activity$ScreenCaptureCallback$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/app/Activity$ScreenCaptureCallback;';

  @jni$_.internal
  @core$_.override
  Activity$ScreenCaptureCallback? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : Activity$ScreenCaptureCallback.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Activity$ScreenCaptureCallback?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Activity$ScreenCaptureCallback$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Activity$ScreenCaptureCallback$NullableType) &&
        other is $Activity$ScreenCaptureCallback$NullableType;
  }
}

final class $Activity$ScreenCaptureCallback$Type extends jni$_.JObjType<Activity$ScreenCaptureCallback> {
  @jni$_.internal
  const $Activity$ScreenCaptureCallback$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/app/Activity$ScreenCaptureCallback;';

  @jni$_.internal
  @core$_.override
  Activity$ScreenCaptureCallback fromReference(jni$_.JReference reference) =>
      Activity$ScreenCaptureCallback.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Activity$ScreenCaptureCallback?> get nullableType =>
      const $Activity$ScreenCaptureCallback$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Activity$ScreenCaptureCallback$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Activity$ScreenCaptureCallback$Type) && other is $Activity$ScreenCaptureCallback$Type;
  }
}

/// from: `android.app.Activity`
class Activity extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<Activity> $type;

  @jni$_.internal
  Activity.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/app/Activity');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $Activity$NullableType();
  static const type = $Activity$Type();

  /// from: `static public final int DEFAULT_KEYS_DIALER`
  static const DEFAULT_KEYS_DIALER = 1;

  /// from: `static public final int DEFAULT_KEYS_DISABLE`
  static const DEFAULT_KEYS_DISABLE = 0;

  /// from: `static public final int DEFAULT_KEYS_SEARCH_GLOBAL`
  static const DEFAULT_KEYS_SEARCH_GLOBAL = 4;

  /// from: `static public final int DEFAULT_KEYS_SEARCH_LOCAL`
  static const DEFAULT_KEYS_SEARCH_LOCAL = 3;

  /// from: `static public final int DEFAULT_KEYS_SHORTCUT`
  static const DEFAULT_KEYS_SHORTCUT = 2;

  /// from: `static public final int FULLSCREEN_MODE_REQUEST_ENTER`
  static const FULLSCREEN_MODE_REQUEST_ENTER = 1;

  /// from: `static public final int FULLSCREEN_MODE_REQUEST_EXIT`
  static const FULLSCREEN_MODE_REQUEST_EXIT = 0;

  /// from: `static public final int OVERRIDE_TRANSITION_CLOSE`
  static const OVERRIDE_TRANSITION_CLOSE = 1;

  /// from: `static public final int OVERRIDE_TRANSITION_OPEN`
  static const OVERRIDE_TRANSITION_OPEN = 0;

  /// from: `static public final int RESULT_CANCELED`
  static const RESULT_CANCELED = 0;

  /// from: `static public final int RESULT_FIRST_USER`
  static const RESULT_FIRST_USER = 1;

  /// from: `static public final int RESULT_OK`
  static const RESULT_OK = -1;
  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory Activity() {
    return Activity.fromReference(_new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr).reference);
  }

  static final _id_getIntent = _class.instanceMethodId(
    r'getIntent',
    r'()Landroid/content/Intent;',
  );

  static final _getIntent =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.content.Intent getIntent()`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? getIntent() {
    return _getIntent(
      reference.pointer,
      _id_getIntent as jni$_.JMethodIDPtr,
    ).object<Intent?>(const $Intent$NullableType());
  }

  static final _id_setIntent = _class.instanceMethodId(
    r'setIntent',
    r'(Landroid/content/Intent;)V',
  );

  static final _setIntent =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void setIntent(android.content.Intent intent)`
  void setIntent(
    Intent? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _setIntent(reference.pointer, _id_setIntent as jni$_.JMethodIDPtr, _$intent.pointer).check();
  }

  static final _id_getCaller = _class.instanceMethodId(
    r'getCaller',
    r'()Landroid/app/ComponentCaller;',
  );

  static final _getCaller =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.app.ComponentCaller getCaller()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getCaller() {
    return _getCaller(
      reference.pointer,
      _id_getCaller as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_setIntent$1 = _class.instanceMethodId(
    r'setIntent',
    r'(Landroid/content/Intent;Landroid/app/ComponentCaller;)V',
  );

  static final _setIntent$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void setIntent(android.content.Intent intent, android.app.ComponentCaller componentCaller)`
  void setIntent$1(
    Intent? intent,
    jni$_.JObject? componentCaller,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$componentCaller = componentCaller?.reference ?? jni$_.jNullReference;
    _setIntent$1(
      reference.pointer,
      _id_setIntent$1 as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$componentCaller.pointer,
    ).check();
  }

  static final _id_setLocusContext = _class.instanceMethodId(
    r'setLocusContext',
    r'(Landroid/content/LocusId;Landroid/os/Bundle;)V',
  );

  static final _setLocusContext =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void setLocusContext(android.content.LocusId locusId, android.os.Bundle bundle)`
  void setLocusContext(
    jni$_.JObject? locusId,
    jni$_.JObject? bundle,
  ) {
    final _$locusId = locusId?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _setLocusContext(
      reference.pointer,
      _id_setLocusContext as jni$_.JMethodIDPtr,
      _$locusId.pointer,
      _$bundle.pointer,
    ).check();
  }

  static final _id_getApplication = _class.instanceMethodId(
    r'getApplication',
    r'()Landroid/app/Application;',
  );

  static final _getApplication =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public final android.app.Application getApplication()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getApplication() {
    return _getApplication(
      reference.pointer,
      _id_getApplication as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_isChild = _class.instanceMethodId(
    r'isChild',
    r'()Z',
  );

  static final _isChild =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public final boolean isChild()`
  bool isChild() {
    return _isChild(reference.pointer, _id_isChild as jni$_.JMethodIDPtr).boolean;
  }

  static final _id_getParent = _class.instanceMethodId(
    r'getParent',
    r'()Landroid/app/Activity;',
  );

  static final _getParent =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public final android.app.Activity getParent()`
  /// The returned object must be released after use, by calling the [release] method.
  Activity? getParent() {
    return _getParent(
      reference.pointer,
      _id_getParent as jni$_.JMethodIDPtr,
    ).object<Activity?>(const $Activity$NullableType());
  }

  static final _id_getWindowManager = _class.instanceMethodId(
    r'getWindowManager',
    r'()Landroid/view/WindowManager;',
  );

  static final _getWindowManager =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.view.WindowManager getWindowManager()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getWindowManager() {
    return _getWindowManager(
      reference.pointer,
      _id_getWindowManager as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getWindow = _class.instanceMethodId(
    r'getWindow',
    r'()Landroid/view/Window;',
  );

  static final _getWindow =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.view.Window getWindow()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getWindow() {
    return _getWindow(
      reference.pointer,
      _id_getWindow as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getLoaderManager = _class.instanceMethodId(
    r'getLoaderManager',
    r'()Landroid/app/LoaderManager;',
  );

  static final _getLoaderManager =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.app.LoaderManager getLoaderManager()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getLoaderManager() {
    return _getLoaderManager(
      reference.pointer,
      _id_getLoaderManager as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getCurrentFocus = _class.instanceMethodId(
    r'getCurrentFocus',
    r'()Landroid/view/View;',
  );

  static final _getCurrentFocus =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.view.View getCurrentFocus()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getCurrentFocus() {
    return _getCurrentFocus(
      reference.pointer,
      _id_getCurrentFocus as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_registerActivityLifecycleCallbacks = _class.instanceMethodId(
    r'registerActivityLifecycleCallbacks',
    r'(Landroid/app/Application$ActivityLifecycleCallbacks;)V',
  );

  static final _registerActivityLifecycleCallbacks =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void registerActivityLifecycleCallbacks(android.app.Application$ActivityLifecycleCallbacks activityLifecycleCallbacks)`
  void registerActivityLifecycleCallbacks(
    jni$_.JObject? activityLifecycleCallbacks,
  ) {
    final _$activityLifecycleCallbacks = activityLifecycleCallbacks?.reference ?? jni$_.jNullReference;
    _registerActivityLifecycleCallbacks(
      reference.pointer,
      _id_registerActivityLifecycleCallbacks as jni$_.JMethodIDPtr,
      _$activityLifecycleCallbacks.pointer,
    ).check();
  }

  static final _id_unregisterActivityLifecycleCallbacks = _class.instanceMethodId(
    r'unregisterActivityLifecycleCallbacks',
    r'(Landroid/app/Application$ActivityLifecycleCallbacks;)V',
  );

  static final _unregisterActivityLifecycleCallbacks =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void unregisterActivityLifecycleCallbacks(android.app.Application$ActivityLifecycleCallbacks activityLifecycleCallbacks)`
  void unregisterActivityLifecycleCallbacks(
    jni$_.JObject? activityLifecycleCallbacks,
  ) {
    final _$activityLifecycleCallbacks = activityLifecycleCallbacks?.reference ?? jni$_.jNullReference;
    _unregisterActivityLifecycleCallbacks(
      reference.pointer,
      _id_unregisterActivityLifecycleCallbacks as jni$_.JMethodIDPtr,
      _$activityLifecycleCallbacks.pointer,
    ).check();
  }

  static final _id_registerComponentCallbacks = _class.instanceMethodId(
    r'registerComponentCallbacks',
    r'(Landroid/content/ComponentCallbacks;)V',
  );

  static final _registerComponentCallbacks =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void registerComponentCallbacks(android.content.ComponentCallbacks componentCallbacks)`
  void registerComponentCallbacks(
    jni$_.JObject? componentCallbacks,
  ) {
    final _$componentCallbacks = componentCallbacks?.reference ?? jni$_.jNullReference;
    _registerComponentCallbacks(
      reference.pointer,
      _id_registerComponentCallbacks as jni$_.JMethodIDPtr,
      _$componentCallbacks.pointer,
    ).check();
  }

  static final _id_unregisterComponentCallbacks = _class.instanceMethodId(
    r'unregisterComponentCallbacks',
    r'(Landroid/content/ComponentCallbacks;)V',
  );

  static final _unregisterComponentCallbacks =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void unregisterComponentCallbacks(android.content.ComponentCallbacks componentCallbacks)`
  void unregisterComponentCallbacks(
    jni$_.JObject? componentCallbacks,
  ) {
    final _$componentCallbacks = componentCallbacks?.reference ?? jni$_.jNullReference;
    _unregisterComponentCallbacks(
      reference.pointer,
      _id_unregisterComponentCallbacks as jni$_.JMethodIDPtr,
      _$componentCallbacks.pointer,
    ).check();
  }

  static final _id_getSplashScreen = _class.instanceMethodId(
    r'getSplashScreen',
    r'()Landroid/window/SplashScreen;',
  );

  static final _getSplashScreen =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public final android.window.SplashScreen getSplashScreen()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getSplashScreen() {
    return _getSplashScreen(
      reference.pointer,
      _id_getSplashScreen as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_onCreate = _class.instanceMethodId(
    r'onCreate',
    r'(Landroid/os/Bundle;Landroid/os/PersistableBundle;)V',
  );

  static final _onCreate =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void onCreate(android.os.Bundle bundle, android.os.PersistableBundle persistableBundle)`
  void onCreate(
    jni$_.JObject? bundle,
    jni$_.JObject? persistableBundle,
  ) {
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    final _$persistableBundle = persistableBundle?.reference ?? jni$_.jNullReference;
    _onCreate(
      reference.pointer,
      _id_onCreate as jni$_.JMethodIDPtr,
      _$bundle.pointer,
      _$persistableBundle.pointer,
    ).check();
  }

  static final _id_onRestoreInstanceState = _class.instanceMethodId(
    r'onRestoreInstanceState',
    r'(Landroid/os/Bundle;Landroid/os/PersistableBundle;)V',
  );

  static final _onRestoreInstanceState =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void onRestoreInstanceState(android.os.Bundle bundle, android.os.PersistableBundle persistableBundle)`
  void onRestoreInstanceState(
    jni$_.JObject? bundle,
    jni$_.JObject? persistableBundle,
  ) {
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    final _$persistableBundle = persistableBundle?.reference ?? jni$_.jNullReference;
    _onRestoreInstanceState(
      reference.pointer,
      _id_onRestoreInstanceState as jni$_.JMethodIDPtr,
      _$bundle.pointer,
      _$persistableBundle.pointer,
    ).check();
  }

  static final _id_onPostCreate = _class.instanceMethodId(
    r'onPostCreate',
    r'(Landroid/os/Bundle;Landroid/os/PersistableBundle;)V',
  );

  static final _onPostCreate =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void onPostCreate(android.os.Bundle bundle, android.os.PersistableBundle persistableBundle)`
  void onPostCreate(
    jni$_.JObject? bundle,
    jni$_.JObject? persistableBundle,
  ) {
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    final _$persistableBundle = persistableBundle?.reference ?? jni$_.jNullReference;
    _onPostCreate(
      reference.pointer,
      _id_onPostCreate as jni$_.JMethodIDPtr,
      _$bundle.pointer,
      _$persistableBundle.pointer,
    ).check();
  }

  static final _id_onStateNotSaved = _class.instanceMethodId(
    r'onStateNotSaved',
    r'()V',
  );

  static final _onStateNotSaved =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void onStateNotSaved()`
  void onStateNotSaved() {
    _onStateNotSaved(reference.pointer, _id_onStateNotSaved as jni$_.JMethodIDPtr).check();
  }

  static final _id_onTopResumedActivityChanged = _class.instanceMethodId(
    r'onTopResumedActivityChanged',
    r'(Z)V',
  );

  static final _onTopResumedActivityChanged =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void onTopResumedActivityChanged(boolean z)`
  void onTopResumedActivityChanged(
    bool z,
  ) {
    _onTopResumedActivityChanged(
      reference.pointer,
      _id_onTopResumedActivityChanged as jni$_.JMethodIDPtr,
      z ? 1 : 0,
    ).check();
  }

  static final _id_isVoiceInteraction = _class.instanceMethodId(
    r'isVoiceInteraction',
    r'()Z',
  );

  static final _isVoiceInteraction =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean isVoiceInteraction()`
  bool isVoiceInteraction() {
    return _isVoiceInteraction(reference.pointer, _id_isVoiceInteraction as jni$_.JMethodIDPtr).boolean;
  }

  static final _id_isVoiceInteractionRoot = _class.instanceMethodId(
    r'isVoiceInteractionRoot',
    r'()Z',
  );

  static final _isVoiceInteractionRoot =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean isVoiceInteractionRoot()`
  bool isVoiceInteractionRoot() {
    return _isVoiceInteractionRoot(reference.pointer, _id_isVoiceInteractionRoot as jni$_.JMethodIDPtr).boolean;
  }

  static final _id_getVoiceInteractor = _class.instanceMethodId(
    r'getVoiceInteractor',
    r'()Landroid/app/VoiceInteractor;',
  );

  static final _getVoiceInteractor =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.app.VoiceInteractor getVoiceInteractor()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getVoiceInteractor() {
    return _getVoiceInteractor(
      reference.pointer,
      _id_getVoiceInteractor as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_isLocalVoiceInteractionSupported = _class.instanceMethodId(
    r'isLocalVoiceInteractionSupported',
    r'()Z',
  );

  static final _isLocalVoiceInteractionSupported =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean isLocalVoiceInteractionSupported()`
  bool isLocalVoiceInteractionSupported() {
    return _isLocalVoiceInteractionSupported(
      reference.pointer,
      _id_isLocalVoiceInteractionSupported as jni$_.JMethodIDPtr,
    ).boolean;
  }

  static final _id_startLocalVoiceInteraction = _class.instanceMethodId(
    r'startLocalVoiceInteraction',
    r'(Landroid/os/Bundle;)V',
  );

  static final _startLocalVoiceInteraction =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void startLocalVoiceInteraction(android.os.Bundle bundle)`
  void startLocalVoiceInteraction(
    jni$_.JObject? bundle,
  ) {
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _startLocalVoiceInteraction(
      reference.pointer,
      _id_startLocalVoiceInteraction as jni$_.JMethodIDPtr,
      _$bundle.pointer,
    ).check();
  }

  static final _id_onLocalVoiceInteractionStarted = _class.instanceMethodId(
    r'onLocalVoiceInteractionStarted',
    r'()V',
  );

  static final _onLocalVoiceInteractionStarted =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void onLocalVoiceInteractionStarted()`
  void onLocalVoiceInteractionStarted() {
    _onLocalVoiceInteractionStarted(
      reference.pointer,
      _id_onLocalVoiceInteractionStarted as jni$_.JMethodIDPtr,
    ).check();
  }

  static final _id_onLocalVoiceInteractionStopped = _class.instanceMethodId(
    r'onLocalVoiceInteractionStopped',
    r'()V',
  );

  static final _onLocalVoiceInteractionStopped =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void onLocalVoiceInteractionStopped()`
  void onLocalVoiceInteractionStopped() {
    _onLocalVoiceInteractionStopped(
      reference.pointer,
      _id_onLocalVoiceInteractionStopped as jni$_.JMethodIDPtr,
    ).check();
  }

  static final _id_stopLocalVoiceInteraction = _class.instanceMethodId(
    r'stopLocalVoiceInteraction',
    r'()V',
  );

  static final _stopLocalVoiceInteraction =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void stopLocalVoiceInteraction()`
  void stopLocalVoiceInteraction() {
    _stopLocalVoiceInteraction(reference.pointer, _id_stopLocalVoiceInteraction as jni$_.JMethodIDPtr).check();
  }

  static final _id_onNewIntent = _class.instanceMethodId(
    r'onNewIntent',
    r'(Landroid/content/Intent;Landroid/app/ComponentCaller;)V',
  );

  static final _onNewIntent =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void onNewIntent(android.content.Intent intent, android.app.ComponentCaller componentCaller)`
  void onNewIntent(
    Intent? intent,
    jni$_.JObject? componentCaller,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$componentCaller = componentCaller?.reference ?? jni$_.jNullReference;
    _onNewIntent(
      reference.pointer,
      _id_onNewIntent as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$componentCaller.pointer,
    ).check();
  }

  static final _id_onSaveInstanceState = _class.instanceMethodId(
    r'onSaveInstanceState',
    r'(Landroid/os/Bundle;Landroid/os/PersistableBundle;)V',
  );

  static final _onSaveInstanceState =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void onSaveInstanceState(android.os.Bundle bundle, android.os.PersistableBundle persistableBundle)`
  void onSaveInstanceState(
    jni$_.JObject? bundle,
    jni$_.JObject? persistableBundle,
  ) {
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    final _$persistableBundle = persistableBundle?.reference ?? jni$_.jNullReference;
    _onSaveInstanceState(
      reference.pointer,
      _id_onSaveInstanceState as jni$_.JMethodIDPtr,
      _$bundle.pointer,
      _$persistableBundle.pointer,
    ).check();
  }

  static final _id_onCreateThumbnail = _class.instanceMethodId(
    r'onCreateThumbnail',
    r'(Landroid/graphics/Bitmap;Landroid/graphics/Canvas;)Z',
  );

  static final _onCreateThumbnail =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean onCreateThumbnail(android.graphics.Bitmap bitmap, android.graphics.Canvas canvas)`
  bool onCreateThumbnail(
    jni$_.JObject? bitmap,
    jni$_.JObject? canvas,
  ) {
    final _$bitmap = bitmap?.reference ?? jni$_.jNullReference;
    final _$canvas = canvas?.reference ?? jni$_.jNullReference;
    return _onCreateThumbnail(
      reference.pointer,
      _id_onCreateThumbnail as jni$_.JMethodIDPtr,
      _$bitmap.pointer,
      _$canvas.pointer,
    ).boolean;
  }

  static final _id_onCreateDescription = _class.instanceMethodId(
    r'onCreateDescription',
    r'()Ljava/lang/CharSequence;',
  );

  static final _onCreateDescription =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.lang.CharSequence onCreateDescription()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? onCreateDescription() {
    return _onCreateDescription(
      reference.pointer,
      _id_onCreateDescription as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_onProvideAssistData = _class.instanceMethodId(
    r'onProvideAssistData',
    r'(Landroid/os/Bundle;)V',
  );

  static final _onProvideAssistData =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void onProvideAssistData(android.os.Bundle bundle)`
  void onProvideAssistData(
    jni$_.JObject? bundle,
  ) {
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _onProvideAssistData(reference.pointer, _id_onProvideAssistData as jni$_.JMethodIDPtr, _$bundle.pointer).check();
  }

  static final _id_onProvideAssistContent = _class.instanceMethodId(
    r'onProvideAssistContent',
    r'(Landroid/app/assist/AssistContent;)V',
  );

  static final _onProvideAssistContent =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void onProvideAssistContent(android.app.assist.AssistContent assistContent)`
  void onProvideAssistContent(
    jni$_.JObject? assistContent,
  ) {
    final _$assistContent = assistContent?.reference ?? jni$_.jNullReference;
    _onProvideAssistContent(
      reference.pointer,
      _id_onProvideAssistContent as jni$_.JMethodIDPtr,
      _$assistContent.pointer,
    ).check();
  }

  static final _id_onGetDirectActions = _class.instanceMethodId(
    r'onGetDirectActions',
    r'(Landroid/os/CancellationSignal;Ljava/util/function/Consumer;)V',
  );

  static final _onGetDirectActions =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void onGetDirectActions(android.os.CancellationSignal cancellationSignal, java.util.function.Consumer<java.util.List<android.app.DirectAction>> consumer)`
  void onGetDirectActions(
    jni$_.JObject? cancellationSignal,
    jni$_.JObject? consumer,
  ) {
    final _$cancellationSignal = cancellationSignal?.reference ?? jni$_.jNullReference;
    final _$consumer = consumer?.reference ?? jni$_.jNullReference;
    _onGetDirectActions(
      reference.pointer,
      _id_onGetDirectActions as jni$_.JMethodIDPtr,
      _$cancellationSignal.pointer,
      _$consumer.pointer,
    ).check();
  }

  static final _id_onPerformDirectAction = _class.instanceMethodId(
    r'onPerformDirectAction',
    r'(Ljava/lang/String;Landroid/os/Bundle;Landroid/os/CancellationSignal;Ljava/util/function/Consumer;)V',
  );

  static final _onPerformDirectAction =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void onPerformDirectAction(java.lang.String string, android.os.Bundle bundle, android.os.CancellationSignal cancellationSignal, java.util.function.Consumer<android.os.Bundle> consumer)`
  void onPerformDirectAction(
    jni$_.JString? string,
    jni$_.JObject? bundle,
    jni$_.JObject? cancellationSignal,
    jni$_.JObject? consumer,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    final _$cancellationSignal = cancellationSignal?.reference ?? jni$_.jNullReference;
    final _$consumer = consumer?.reference ?? jni$_.jNullReference;
    _onPerformDirectAction(
      reference.pointer,
      _id_onPerformDirectAction as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$bundle.pointer,
      _$cancellationSignal.pointer,
      _$consumer.pointer,
    ).check();
  }

  static final _id_requestShowKeyboardShortcuts = _class.instanceMethodId(
    r'requestShowKeyboardShortcuts',
    r'()V',
  );

  static final _requestShowKeyboardShortcuts =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public final void requestShowKeyboardShortcuts()`
  void requestShowKeyboardShortcuts() {
    _requestShowKeyboardShortcuts(reference.pointer, _id_requestShowKeyboardShortcuts as jni$_.JMethodIDPtr).check();
  }

  static final _id_dismissKeyboardShortcutsHelper = _class.instanceMethodId(
    r'dismissKeyboardShortcutsHelper',
    r'()V',
  );

  static final _dismissKeyboardShortcutsHelper =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public final void dismissKeyboardShortcutsHelper()`
  void dismissKeyboardShortcutsHelper() {
    _dismissKeyboardShortcutsHelper(
      reference.pointer,
      _id_dismissKeyboardShortcutsHelper as jni$_.JMethodIDPtr,
    ).check();
  }

  static final _id_onProvideKeyboardShortcuts = _class.instanceMethodId(
    r'onProvideKeyboardShortcuts',
    r'(Ljava/util/List;Landroid/view/Menu;I)V',
  );

  static final _onProvideKeyboardShortcuts =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public void onProvideKeyboardShortcuts(java.util.List<android.view.KeyboardShortcutGroup> list, android.view.Menu menu, int i)`
  void onProvideKeyboardShortcuts(
    jni$_.JList<jni$_.JObject?>? list,
    jni$_.JObject? menu,
    int i,
  ) {
    final _$list = list?.reference ?? jni$_.jNullReference;
    final _$menu = menu?.reference ?? jni$_.jNullReference;
    _onProvideKeyboardShortcuts(
      reference.pointer,
      _id_onProvideKeyboardShortcuts as jni$_.JMethodIDPtr,
      _$list.pointer,
      _$menu.pointer,
      i,
    ).check();
  }

  static final _id_showAssist = _class.instanceMethodId(
    r'showAssist',
    r'(Landroid/os/Bundle;)Z',
  );

  static final _showAssist =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean showAssist(android.os.Bundle bundle)`
  bool showAssist(
    jni$_.JObject? bundle,
  ) {
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    return _showAssist(reference.pointer, _id_showAssist as jni$_.JMethodIDPtr, _$bundle.pointer).boolean;
  }

  static final _id_reportFullyDrawn = _class.instanceMethodId(
    r'reportFullyDrawn',
    r'()V',
  );

  static final _reportFullyDrawn =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void reportFullyDrawn()`
  void reportFullyDrawn() {
    _reportFullyDrawn(reference.pointer, _id_reportFullyDrawn as jni$_.JMethodIDPtr).check();
  }

  static final _id_onMultiWindowModeChanged = _class.instanceMethodId(
    r'onMultiWindowModeChanged',
    r'(ZLandroid/content/res/Configuration;)V',
  );

  static final _onMultiWindowModeChanged =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void onMultiWindowModeChanged(boolean z, android.content.res.Configuration configuration)`
  void onMultiWindowModeChanged(
    bool z,
    jni$_.JObject? configuration,
  ) {
    final _$configuration = configuration?.reference ?? jni$_.jNullReference;
    _onMultiWindowModeChanged(
      reference.pointer,
      _id_onMultiWindowModeChanged as jni$_.JMethodIDPtr,
      z ? 1 : 0,
      _$configuration.pointer,
    ).check();
  }

  static final _id_onMultiWindowModeChanged$1 = _class.instanceMethodId(
    r'onMultiWindowModeChanged',
    r'(Z)V',
  );

  static final _onMultiWindowModeChanged$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void onMultiWindowModeChanged(boolean z)`
  void onMultiWindowModeChanged$1(
    bool z,
  ) {
    _onMultiWindowModeChanged$1(
      reference.pointer,
      _id_onMultiWindowModeChanged$1 as jni$_.JMethodIDPtr,
      z ? 1 : 0,
    ).check();
  }

  static final _id_isInMultiWindowMode = _class.instanceMethodId(
    r'isInMultiWindowMode',
    r'()Z',
  );

  static final _isInMultiWindowMode =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean isInMultiWindowMode()`
  bool isInMultiWindowMode() {
    return _isInMultiWindowMode(reference.pointer, _id_isInMultiWindowMode as jni$_.JMethodIDPtr).boolean;
  }

  static final _id_onPictureInPictureModeChanged = _class.instanceMethodId(
    r'onPictureInPictureModeChanged',
    r'(ZLandroid/content/res/Configuration;)V',
  );

  static final _onPictureInPictureModeChanged =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void onPictureInPictureModeChanged(boolean z, android.content.res.Configuration configuration)`
  void onPictureInPictureModeChanged(
    bool z,
    jni$_.JObject? configuration,
  ) {
    final _$configuration = configuration?.reference ?? jni$_.jNullReference;
    _onPictureInPictureModeChanged(
      reference.pointer,
      _id_onPictureInPictureModeChanged as jni$_.JMethodIDPtr,
      z ? 1 : 0,
      _$configuration.pointer,
    ).check();
  }

  static final _id_onPictureInPictureUiStateChanged = _class.instanceMethodId(
    r'onPictureInPictureUiStateChanged',
    r'(Landroid/app/PictureInPictureUiState;)V',
  );

  static final _onPictureInPictureUiStateChanged =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void onPictureInPictureUiStateChanged(android.app.PictureInPictureUiState pictureInPictureUiState)`
  void onPictureInPictureUiStateChanged(
    jni$_.JObject? pictureInPictureUiState,
  ) {
    final _$pictureInPictureUiState = pictureInPictureUiState?.reference ?? jni$_.jNullReference;
    _onPictureInPictureUiStateChanged(
      reference.pointer,
      _id_onPictureInPictureUiStateChanged as jni$_.JMethodIDPtr,
      _$pictureInPictureUiState.pointer,
    ).check();
  }

  static final _id_onPictureInPictureModeChanged$1 = _class.instanceMethodId(
    r'onPictureInPictureModeChanged',
    r'(Z)V',
  );

  static final _onPictureInPictureModeChanged$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void onPictureInPictureModeChanged(boolean z)`
  void onPictureInPictureModeChanged$1(
    bool z,
  ) {
    _onPictureInPictureModeChanged$1(
      reference.pointer,
      _id_onPictureInPictureModeChanged$1 as jni$_.JMethodIDPtr,
      z ? 1 : 0,
    ).check();
  }

  static final _id_isInPictureInPictureMode = _class.instanceMethodId(
    r'isInPictureInPictureMode',
    r'()Z',
  );

  static final _isInPictureInPictureMode =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean isInPictureInPictureMode()`
  bool isInPictureInPictureMode() {
    return _isInPictureInPictureMode(reference.pointer, _id_isInPictureInPictureMode as jni$_.JMethodIDPtr).boolean;
  }

  static final _id_enterPictureInPictureMode = _class.instanceMethodId(
    r'enterPictureInPictureMode',
    r'()V',
  );

  static final _enterPictureInPictureMode =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void enterPictureInPictureMode()`
  void enterPictureInPictureMode() {
    _enterPictureInPictureMode(reference.pointer, _id_enterPictureInPictureMode as jni$_.JMethodIDPtr).check();
  }

  static final _id_enterPictureInPictureMode$1 = _class.instanceMethodId(
    r'enterPictureInPictureMode',
    r'(Landroid/app/PictureInPictureParams;)Z',
  );

  static final _enterPictureInPictureMode$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean enterPictureInPictureMode(android.app.PictureInPictureParams pictureInPictureParams)`
  bool enterPictureInPictureMode$1(
    jni$_.JObject? pictureInPictureParams,
  ) {
    final _$pictureInPictureParams = pictureInPictureParams?.reference ?? jni$_.jNullReference;
    return _enterPictureInPictureMode$1(
      reference.pointer,
      _id_enterPictureInPictureMode$1 as jni$_.JMethodIDPtr,
      _$pictureInPictureParams.pointer,
    ).boolean;
  }

  static final _id_setPictureInPictureParams = _class.instanceMethodId(
    r'setPictureInPictureParams',
    r'(Landroid/app/PictureInPictureParams;)V',
  );

  static final _setPictureInPictureParams =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void setPictureInPictureParams(android.app.PictureInPictureParams pictureInPictureParams)`
  void setPictureInPictureParams(
    jni$_.JObject? pictureInPictureParams,
  ) {
    final _$pictureInPictureParams = pictureInPictureParams?.reference ?? jni$_.jNullReference;
    _setPictureInPictureParams(
      reference.pointer,
      _id_setPictureInPictureParams as jni$_.JMethodIDPtr,
      _$pictureInPictureParams.pointer,
    ).check();
  }

  static final _id_getMaxNumPictureInPictureActions = _class.instanceMethodId(
    r'getMaxNumPictureInPictureActions',
    r'()I',
  );

  static final _getMaxNumPictureInPictureActions =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int getMaxNumPictureInPictureActions()`
  int getMaxNumPictureInPictureActions() {
    return _getMaxNumPictureInPictureActions(
      reference.pointer,
      _id_getMaxNumPictureInPictureActions as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_onPictureInPictureRequested = _class.instanceMethodId(
    r'onPictureInPictureRequested',
    r'()Z',
  );

  static final _onPictureInPictureRequested =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean onPictureInPictureRequested()`
  bool onPictureInPictureRequested() {
    return _onPictureInPictureRequested(
      reference.pointer,
      _id_onPictureInPictureRequested as jni$_.JMethodIDPtr,
    ).boolean;
  }

  static final _id_requestFullscreenMode = _class.instanceMethodId(
    r'requestFullscreenMode',
    r'(ILandroid/os/OutcomeReceiver;)V',
  );

  static final _requestFullscreenMode =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void requestFullscreenMode(int i, android.os.OutcomeReceiver<java.lang.Void, java.lang.Throwable> outcomeReceiver)`
  void requestFullscreenMode(
    int i,
    jni$_.JObject? outcomeReceiver,
  ) {
    final _$outcomeReceiver = outcomeReceiver?.reference ?? jni$_.jNullReference;
    _requestFullscreenMode(
      reference.pointer,
      _id_requestFullscreenMode as jni$_.JMethodIDPtr,
      i,
      _$outcomeReceiver.pointer,
    ).check();
  }

  static final _id_setShouldDockBigOverlays = _class.instanceMethodId(
    r'setShouldDockBigOverlays',
    r'(Z)V',
  );

  static final _setShouldDockBigOverlays =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setShouldDockBigOverlays(boolean z)`
  void setShouldDockBigOverlays(
    bool z,
  ) {
    _setShouldDockBigOverlays(reference.pointer, _id_setShouldDockBigOverlays as jni$_.JMethodIDPtr, z ? 1 : 0).check();
  }

  static final _id_shouldDockBigOverlays = _class.instanceMethodId(
    r'shouldDockBigOverlays',
    r'()Z',
  );

  static final _shouldDockBigOverlays =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean shouldDockBigOverlays()`
  bool shouldDockBigOverlays() {
    return _shouldDockBigOverlays(reference.pointer, _id_shouldDockBigOverlays as jni$_.JMethodIDPtr).boolean;
  }

  static final _id_onConfigurationChanged = _class.instanceMethodId(
    r'onConfigurationChanged',
    r'(Landroid/content/res/Configuration;)V',
  );

  static final _onConfigurationChanged =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void onConfigurationChanged(android.content.res.Configuration configuration)`
  void onConfigurationChanged(
    jni$_.JObject? configuration,
  ) {
    final _$configuration = configuration?.reference ?? jni$_.jNullReference;
    _onConfigurationChanged(
      reference.pointer,
      _id_onConfigurationChanged as jni$_.JMethodIDPtr,
      _$configuration.pointer,
    ).check();
  }

  static final _id_getChangingConfigurations = _class.instanceMethodId(
    r'getChangingConfigurations',
    r'()I',
  );

  static final _getChangingConfigurations =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int getChangingConfigurations()`
  int getChangingConfigurations() {
    return _getChangingConfigurations(reference.pointer, _id_getChangingConfigurations as jni$_.JMethodIDPtr).integer;
  }

  static final _id_getLastNonConfigurationInstance = _class.instanceMethodId(
    r'getLastNonConfigurationInstance',
    r'()Ljava/lang/Object;',
  );

  static final _getLastNonConfigurationInstance =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.lang.Object getLastNonConfigurationInstance()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getLastNonConfigurationInstance() {
    return _getLastNonConfigurationInstance(
      reference.pointer,
      _id_getLastNonConfigurationInstance as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_onRetainNonConfigurationInstance = _class.instanceMethodId(
    r'onRetainNonConfigurationInstance',
    r'()Ljava/lang/Object;',
  );

  static final _onRetainNonConfigurationInstance =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.lang.Object onRetainNonConfigurationInstance()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? onRetainNonConfigurationInstance() {
    return _onRetainNonConfigurationInstance(
      reference.pointer,
      _id_onRetainNonConfigurationInstance as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_onLowMemory = _class.instanceMethodId(
    r'onLowMemory',
    r'()V',
  );

  static final _onLowMemory =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void onLowMemory()`
  void onLowMemory() {
    _onLowMemory(reference.pointer, _id_onLowMemory as jni$_.JMethodIDPtr).check();
  }

  static final _id_onTrimMemory = _class.instanceMethodId(
    r'onTrimMemory',
    r'(I)V',
  );

  static final _onTrimMemory =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void onTrimMemory(int i)`
  void onTrimMemory(
    int i,
  ) {
    _onTrimMemory(reference.pointer, _id_onTrimMemory as jni$_.JMethodIDPtr, i).check();
  }

  static final _id_getFragmentManager = _class.instanceMethodId(
    r'getFragmentManager',
    r'()Landroid/app/FragmentManager;',
  );

  static final _getFragmentManager =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.app.FragmentManager getFragmentManager()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getFragmentManager() {
    return _getFragmentManager(
      reference.pointer,
      _id_getFragmentManager as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_onAttachFragment = _class.instanceMethodId(
    r'onAttachFragment',
    r'(Landroid/app/Fragment;)V',
  );

  static final _onAttachFragment =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void onAttachFragment(android.app.Fragment fragment)`
  void onAttachFragment(
    jni$_.JObject? fragment,
  ) {
    final _$fragment = fragment?.reference ?? jni$_.jNullReference;
    _onAttachFragment(reference.pointer, _id_onAttachFragment as jni$_.JMethodIDPtr, _$fragment.pointer).check();
  }

  static final _id_managedQuery = _class.instanceMethodId(
    r'managedQuery',
    r'(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;',
  );

  static final _managedQuery =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public final android.database.Cursor managedQuery(android.net.Uri uri, java.lang.String[] strings, java.lang.String string, java.lang.String[] strings1, java.lang.String string1)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? managedQuery(
    Uri? uri,
    jni$_.JArray<jni$_.JString?>? strings,
    jni$_.JString? string,
    jni$_.JArray<jni$_.JString?>? strings1,
    jni$_.JString? string1,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    final _$strings = strings?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$strings1 = strings1?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    return _managedQuery(
      reference.pointer,
      _id_managedQuery as jni$_.JMethodIDPtr,
      _$uri.pointer,
      _$strings.pointer,
      _$string.pointer,
      _$strings1.pointer,
      _$string1.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_startManagingCursor = _class.instanceMethodId(
    r'startManagingCursor',
    r'(Landroid/database/Cursor;)V',
  );

  static final _startManagingCursor =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void startManagingCursor(android.database.Cursor cursor)`
  void startManagingCursor(
    jni$_.JObject? cursor,
  ) {
    final _$cursor = cursor?.reference ?? jni$_.jNullReference;
    _startManagingCursor(reference.pointer, _id_startManagingCursor as jni$_.JMethodIDPtr, _$cursor.pointer).check();
  }

  static final _id_stopManagingCursor = _class.instanceMethodId(
    r'stopManagingCursor',
    r'(Landroid/database/Cursor;)V',
  );

  static final _stopManagingCursor =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void stopManagingCursor(android.database.Cursor cursor)`
  void stopManagingCursor(
    jni$_.JObject? cursor,
  ) {
    final _$cursor = cursor?.reference ?? jni$_.jNullReference;
    _stopManagingCursor(reference.pointer, _id_stopManagingCursor as jni$_.JMethodIDPtr, _$cursor.pointer).check();
  }

  static final _id_findViewById = _class.instanceMethodId(
    r'findViewById',
    r'(I)Landroid/view/View;',
  );

  static final _findViewById =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public T findViewById(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  $T? findViewById<$T extends jni$_.JObject?>(
    int i, {
    required jni$_.JObjType<$T> T,
  }) {
    return _findViewById(reference.pointer, _id_findViewById as jni$_.JMethodIDPtr, i).object<$T?>(T.nullableType);
  }

  static final _id_requireViewById = _class.instanceMethodId(
    r'requireViewById',
    r'(I)Landroid/view/View;',
  );

  static final _requireViewById =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final T requireViewById(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  $T? requireViewById<$T extends jni$_.JObject?>(
    int i, {
    required jni$_.JObjType<$T> T,
  }) {
    return _requireViewById(
      reference.pointer,
      _id_requireViewById as jni$_.JMethodIDPtr,
      i,
    ).object<$T?>(T.nullableType);
  }

  static final _id_getActionBar = _class.instanceMethodId(
    r'getActionBar',
    r'()Landroid/app/ActionBar;',
  );

  static final _getActionBar =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.app.ActionBar getActionBar()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getActionBar() {
    return _getActionBar(
      reference.pointer,
      _id_getActionBar as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_setActionBar = _class.instanceMethodId(
    r'setActionBar',
    r'(Landroid/widget/Toolbar;)V',
  );

  static final _setActionBar =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void setActionBar(android.widget.Toolbar toolbar)`
  void setActionBar(
    jni$_.JObject? toolbar,
  ) {
    final _$toolbar = toolbar?.reference ?? jni$_.jNullReference;
    _setActionBar(reference.pointer, _id_setActionBar as jni$_.JMethodIDPtr, _$toolbar.pointer).check();
  }

  static final _id_setContentView = _class.instanceMethodId(
    r'setContentView',
    r'(I)V',
  );

  static final _setContentView =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setContentView(int i)`
  void setContentView(
    int i,
  ) {
    _setContentView(reference.pointer, _id_setContentView as jni$_.JMethodIDPtr, i).check();
  }

  static final _id_setContentView$1 = _class.instanceMethodId(
    r'setContentView',
    r'(Landroid/view/View;)V',
  );

  static final _setContentView$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void setContentView(android.view.View view)`
  void setContentView$1(
    jni$_.JObject? view,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    _setContentView$1(reference.pointer, _id_setContentView$1 as jni$_.JMethodIDPtr, _$view.pointer).check();
  }

  static final _id_setContentView$2 = _class.instanceMethodId(
    r'setContentView',
    r'(Landroid/view/View;Landroid/view/ViewGroup$LayoutParams;)V',
  );

  static final _setContentView$2 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void setContentView(android.view.View view, android.view.ViewGroup$LayoutParams layoutParams)`
  void setContentView$2(
    jni$_.JObject? view,
    jni$_.JObject? layoutParams,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    final _$layoutParams = layoutParams?.reference ?? jni$_.jNullReference;
    _setContentView$2(
      reference.pointer,
      _id_setContentView$2 as jni$_.JMethodIDPtr,
      _$view.pointer,
      _$layoutParams.pointer,
    ).check();
  }

  static final _id_addContentView = _class.instanceMethodId(
    r'addContentView',
    r'(Landroid/view/View;Landroid/view/ViewGroup$LayoutParams;)V',
  );

  static final _addContentView =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void addContentView(android.view.View view, android.view.ViewGroup$LayoutParams layoutParams)`
  void addContentView(
    jni$_.JObject? view,
    jni$_.JObject? layoutParams,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    final _$layoutParams = layoutParams?.reference ?? jni$_.jNullReference;
    _addContentView(
      reference.pointer,
      _id_addContentView as jni$_.JMethodIDPtr,
      _$view.pointer,
      _$layoutParams.pointer,
    ).check();
  }

  static final _id_getContentTransitionManager = _class.instanceMethodId(
    r'getContentTransitionManager',
    r'()Landroid/transition/TransitionManager;',
  );

  static final _getContentTransitionManager =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.transition.TransitionManager getContentTransitionManager()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getContentTransitionManager() {
    return _getContentTransitionManager(
      reference.pointer,
      _id_getContentTransitionManager as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_setContentTransitionManager = _class.instanceMethodId(
    r'setContentTransitionManager',
    r'(Landroid/transition/TransitionManager;)V',
  );

  static final _setContentTransitionManager =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void setContentTransitionManager(android.transition.TransitionManager transitionManager)`
  void setContentTransitionManager(
    jni$_.JObject? transitionManager,
  ) {
    final _$transitionManager = transitionManager?.reference ?? jni$_.jNullReference;
    _setContentTransitionManager(
      reference.pointer,
      _id_setContentTransitionManager as jni$_.JMethodIDPtr,
      _$transitionManager.pointer,
    ).check();
  }

  static final _id_getContentScene = _class.instanceMethodId(
    r'getContentScene',
    r'()Landroid/transition/Scene;',
  );

  static final _getContentScene =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.transition.Scene getContentScene()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getContentScene() {
    return _getContentScene(
      reference.pointer,
      _id_getContentScene as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_setFinishOnTouchOutside = _class.instanceMethodId(
    r'setFinishOnTouchOutside',
    r'(Z)V',
  );

  static final _setFinishOnTouchOutside =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setFinishOnTouchOutside(boolean z)`
  void setFinishOnTouchOutside(
    bool z,
  ) {
    _setFinishOnTouchOutside(reference.pointer, _id_setFinishOnTouchOutside as jni$_.JMethodIDPtr, z ? 1 : 0).check();
  }

  static final _id_setDefaultKeyMode = _class.instanceMethodId(
    r'setDefaultKeyMode',
    r'(I)V',
  );

  static final _setDefaultKeyMode =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final void setDefaultKeyMode(int i)`
  void setDefaultKeyMode(
    int i,
  ) {
    _setDefaultKeyMode(reference.pointer, _id_setDefaultKeyMode as jni$_.JMethodIDPtr, i).check();
  }

  static final _id_onKeyDown = _class.instanceMethodId(
    r'onKeyDown',
    r'(ILandroid/view/KeyEvent;)Z',
  );

  static final _onKeyDown =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean onKeyDown(int i, android.view.KeyEvent keyEvent)`
  bool onKeyDown(
    int i,
    jni$_.JObject? keyEvent,
  ) {
    final _$keyEvent = keyEvent?.reference ?? jni$_.jNullReference;
    return _onKeyDown(reference.pointer, _id_onKeyDown as jni$_.JMethodIDPtr, i, _$keyEvent.pointer).boolean;
  }

  static final _id_onKeyLongPress = _class.instanceMethodId(
    r'onKeyLongPress',
    r'(ILandroid/view/KeyEvent;)Z',
  );

  static final _onKeyLongPress =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean onKeyLongPress(int i, android.view.KeyEvent keyEvent)`
  bool onKeyLongPress(
    int i,
    jni$_.JObject? keyEvent,
  ) {
    final _$keyEvent = keyEvent?.reference ?? jni$_.jNullReference;
    return _onKeyLongPress(reference.pointer, _id_onKeyLongPress as jni$_.JMethodIDPtr, i, _$keyEvent.pointer).boolean;
  }

  static final _id_onKeyUp = _class.instanceMethodId(
    r'onKeyUp',
    r'(ILandroid/view/KeyEvent;)Z',
  );

  static final _onKeyUp =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean onKeyUp(int i, android.view.KeyEvent keyEvent)`
  bool onKeyUp(
    int i,
    jni$_.JObject? keyEvent,
  ) {
    final _$keyEvent = keyEvent?.reference ?? jni$_.jNullReference;
    return _onKeyUp(reference.pointer, _id_onKeyUp as jni$_.JMethodIDPtr, i, _$keyEvent.pointer).boolean;
  }

  static final _id_onKeyMultiple = _class.instanceMethodId(
    r'onKeyMultiple',
    r'(IILandroid/view/KeyEvent;)Z',
  );

  static final _onKeyMultiple =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, int, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean onKeyMultiple(int i, int i1, android.view.KeyEvent keyEvent)`
  bool onKeyMultiple(
    int i,
    int i1,
    jni$_.JObject? keyEvent,
  ) {
    final _$keyEvent = keyEvent?.reference ?? jni$_.jNullReference;
    return _onKeyMultiple(
      reference.pointer,
      _id_onKeyMultiple as jni$_.JMethodIDPtr,
      i,
      i1,
      _$keyEvent.pointer,
    ).boolean;
  }

  static final _id_onBackPressed = _class.instanceMethodId(
    r'onBackPressed',
    r'()V',
  );

  static final _onBackPressed =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void onBackPressed()`
  void onBackPressed() {
    _onBackPressed(reference.pointer, _id_onBackPressed as jni$_.JMethodIDPtr).check();
  }

  static final _id_onKeyShortcut = _class.instanceMethodId(
    r'onKeyShortcut',
    r'(ILandroid/view/KeyEvent;)Z',
  );

  static final _onKeyShortcut =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean onKeyShortcut(int i, android.view.KeyEvent keyEvent)`
  bool onKeyShortcut(
    int i,
    jni$_.JObject? keyEvent,
  ) {
    final _$keyEvent = keyEvent?.reference ?? jni$_.jNullReference;
    return _onKeyShortcut(reference.pointer, _id_onKeyShortcut as jni$_.JMethodIDPtr, i, _$keyEvent.pointer).boolean;
  }

  static final _id_onTouchEvent = _class.instanceMethodId(
    r'onTouchEvent',
    r'(Landroid/view/MotionEvent;)Z',
  );

  static final _onTouchEvent =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean onTouchEvent(android.view.MotionEvent motionEvent)`
  bool onTouchEvent(
    jni$_.JObject? motionEvent,
  ) {
    final _$motionEvent = motionEvent?.reference ?? jni$_.jNullReference;
    return _onTouchEvent(reference.pointer, _id_onTouchEvent as jni$_.JMethodIDPtr, _$motionEvent.pointer).boolean;
  }

  static final _id_onTrackballEvent = _class.instanceMethodId(
    r'onTrackballEvent',
    r'(Landroid/view/MotionEvent;)Z',
  );

  static final _onTrackballEvent =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean onTrackballEvent(android.view.MotionEvent motionEvent)`
  bool onTrackballEvent(
    jni$_.JObject? motionEvent,
  ) {
    final _$motionEvent = motionEvent?.reference ?? jni$_.jNullReference;
    return _onTrackballEvent(
      reference.pointer,
      _id_onTrackballEvent as jni$_.JMethodIDPtr,
      _$motionEvent.pointer,
    ).boolean;
  }

  static final _id_onGenericMotionEvent = _class.instanceMethodId(
    r'onGenericMotionEvent',
    r'(Landroid/view/MotionEvent;)Z',
  );

  static final _onGenericMotionEvent =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean onGenericMotionEvent(android.view.MotionEvent motionEvent)`
  bool onGenericMotionEvent(
    jni$_.JObject? motionEvent,
  ) {
    final _$motionEvent = motionEvent?.reference ?? jni$_.jNullReference;
    return _onGenericMotionEvent(
      reference.pointer,
      _id_onGenericMotionEvent as jni$_.JMethodIDPtr,
      _$motionEvent.pointer,
    ).boolean;
  }

  static final _id_onUserInteraction = _class.instanceMethodId(
    r'onUserInteraction',
    r'()V',
  );

  static final _onUserInteraction =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void onUserInteraction()`
  void onUserInteraction() {
    _onUserInteraction(reference.pointer, _id_onUserInteraction as jni$_.JMethodIDPtr).check();
  }

  static final _id_onWindowAttributesChanged = _class.instanceMethodId(
    r'onWindowAttributesChanged',
    r'(Landroid/view/WindowManager$LayoutParams;)V',
  );

  static final _onWindowAttributesChanged =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void onWindowAttributesChanged(android.view.WindowManager$LayoutParams layoutParams)`
  void onWindowAttributesChanged(
    jni$_.JObject? layoutParams,
  ) {
    final _$layoutParams = layoutParams?.reference ?? jni$_.jNullReference;
    _onWindowAttributesChanged(
      reference.pointer,
      _id_onWindowAttributesChanged as jni$_.JMethodIDPtr,
      _$layoutParams.pointer,
    ).check();
  }

  static final _id_onContentChanged = _class.instanceMethodId(
    r'onContentChanged',
    r'()V',
  );

  static final _onContentChanged =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void onContentChanged()`
  void onContentChanged() {
    _onContentChanged(reference.pointer, _id_onContentChanged as jni$_.JMethodIDPtr).check();
  }

  static final _id_onWindowFocusChanged = _class.instanceMethodId(
    r'onWindowFocusChanged',
    r'(Z)V',
  );

  static final _onWindowFocusChanged =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void onWindowFocusChanged(boolean z)`
  void onWindowFocusChanged(
    bool z,
  ) {
    _onWindowFocusChanged(reference.pointer, _id_onWindowFocusChanged as jni$_.JMethodIDPtr, z ? 1 : 0).check();
  }

  static final _id_onAttachedToWindow = _class.instanceMethodId(
    r'onAttachedToWindow',
    r'()V',
  );

  static final _onAttachedToWindow =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void onAttachedToWindow()`
  void onAttachedToWindow() {
    _onAttachedToWindow(reference.pointer, _id_onAttachedToWindow as jni$_.JMethodIDPtr).check();
  }

  static final _id_onDetachedFromWindow = _class.instanceMethodId(
    r'onDetachedFromWindow',
    r'()V',
  );

  static final _onDetachedFromWindow =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void onDetachedFromWindow()`
  void onDetachedFromWindow() {
    _onDetachedFromWindow(reference.pointer, _id_onDetachedFromWindow as jni$_.JMethodIDPtr).check();
  }

  static final _id_hasWindowFocus = _class.instanceMethodId(
    r'hasWindowFocus',
    r'()Z',
  );

  static final _hasWindowFocus =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean hasWindowFocus()`
  bool hasWindowFocus() {
    return _hasWindowFocus(reference.pointer, _id_hasWindowFocus as jni$_.JMethodIDPtr).boolean;
  }

  static final _id_dispatchKeyEvent = _class.instanceMethodId(
    r'dispatchKeyEvent',
    r'(Landroid/view/KeyEvent;)Z',
  );

  static final _dispatchKeyEvent =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean dispatchKeyEvent(android.view.KeyEvent keyEvent)`
  bool dispatchKeyEvent(
    jni$_.JObject? keyEvent,
  ) {
    final _$keyEvent = keyEvent?.reference ?? jni$_.jNullReference;
    return _dispatchKeyEvent(reference.pointer, _id_dispatchKeyEvent as jni$_.JMethodIDPtr, _$keyEvent.pointer).boolean;
  }

  static final _id_dispatchKeyShortcutEvent = _class.instanceMethodId(
    r'dispatchKeyShortcutEvent',
    r'(Landroid/view/KeyEvent;)Z',
  );

  static final _dispatchKeyShortcutEvent =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean dispatchKeyShortcutEvent(android.view.KeyEvent keyEvent)`
  bool dispatchKeyShortcutEvent(
    jni$_.JObject? keyEvent,
  ) {
    final _$keyEvent = keyEvent?.reference ?? jni$_.jNullReference;
    return _dispatchKeyShortcutEvent(
      reference.pointer,
      _id_dispatchKeyShortcutEvent as jni$_.JMethodIDPtr,
      _$keyEvent.pointer,
    ).boolean;
  }

  static final _id_dispatchTouchEvent = _class.instanceMethodId(
    r'dispatchTouchEvent',
    r'(Landroid/view/MotionEvent;)Z',
  );

  static final _dispatchTouchEvent =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean dispatchTouchEvent(android.view.MotionEvent motionEvent)`
  bool dispatchTouchEvent(
    jni$_.JObject? motionEvent,
  ) {
    final _$motionEvent = motionEvent?.reference ?? jni$_.jNullReference;
    return _dispatchTouchEvent(
      reference.pointer,
      _id_dispatchTouchEvent as jni$_.JMethodIDPtr,
      _$motionEvent.pointer,
    ).boolean;
  }

  static final _id_dispatchTrackballEvent = _class.instanceMethodId(
    r'dispatchTrackballEvent',
    r'(Landroid/view/MotionEvent;)Z',
  );

  static final _dispatchTrackballEvent =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean dispatchTrackballEvent(android.view.MotionEvent motionEvent)`
  bool dispatchTrackballEvent(
    jni$_.JObject? motionEvent,
  ) {
    final _$motionEvent = motionEvent?.reference ?? jni$_.jNullReference;
    return _dispatchTrackballEvent(
      reference.pointer,
      _id_dispatchTrackballEvent as jni$_.JMethodIDPtr,
      _$motionEvent.pointer,
    ).boolean;
  }

  static final _id_dispatchGenericMotionEvent = _class.instanceMethodId(
    r'dispatchGenericMotionEvent',
    r'(Landroid/view/MotionEvent;)Z',
  );

  static final _dispatchGenericMotionEvent =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean dispatchGenericMotionEvent(android.view.MotionEvent motionEvent)`
  bool dispatchGenericMotionEvent(
    jni$_.JObject? motionEvent,
  ) {
    final _$motionEvent = motionEvent?.reference ?? jni$_.jNullReference;
    return _dispatchGenericMotionEvent(
      reference.pointer,
      _id_dispatchGenericMotionEvent as jni$_.JMethodIDPtr,
      _$motionEvent.pointer,
    ).boolean;
  }

  static final _id_dispatchPopulateAccessibilityEvent = _class.instanceMethodId(
    r'dispatchPopulateAccessibilityEvent',
    r'(Landroid/view/accessibility/AccessibilityEvent;)Z',
  );

  static final _dispatchPopulateAccessibilityEvent =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent accessibilityEvent)`
  bool dispatchPopulateAccessibilityEvent(
    jni$_.JObject? accessibilityEvent,
  ) {
    final _$accessibilityEvent = accessibilityEvent?.reference ?? jni$_.jNullReference;
    return _dispatchPopulateAccessibilityEvent(
      reference.pointer,
      _id_dispatchPopulateAccessibilityEvent as jni$_.JMethodIDPtr,
      _$accessibilityEvent.pointer,
    ).boolean;
  }

  static final _id_onCreatePanelView = _class.instanceMethodId(
    r'onCreatePanelView',
    r'(I)Landroid/view/View;',
  );

  static final _onCreatePanelView =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public android.view.View onCreatePanelView(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? onCreatePanelView(
    int i,
  ) {
    return _onCreatePanelView(
      reference.pointer,
      _id_onCreatePanelView as jni$_.JMethodIDPtr,
      i,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_onCreatePanelMenu = _class.instanceMethodId(
    r'onCreatePanelMenu',
    r'(ILandroid/view/Menu;)Z',
  );

  static final _onCreatePanelMenu =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean onCreatePanelMenu(int i, android.view.Menu menu)`
  bool onCreatePanelMenu(
    int i,
    jni$_.JObject? menu,
  ) {
    final _$menu = menu?.reference ?? jni$_.jNullReference;
    return _onCreatePanelMenu(
      reference.pointer,
      _id_onCreatePanelMenu as jni$_.JMethodIDPtr,
      i,
      _$menu.pointer,
    ).boolean;
  }

  static final _id_onPreparePanel = _class.instanceMethodId(
    r'onPreparePanel',
    r'(ILandroid/view/View;Landroid/view/Menu;)Z',
  );

  static final _onPreparePanel =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean onPreparePanel(int i, android.view.View view, android.view.Menu menu)`
  bool onPreparePanel(
    int i,
    jni$_.JObject? view,
    jni$_.JObject? menu,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    final _$menu = menu?.reference ?? jni$_.jNullReference;
    return _onPreparePanel(
      reference.pointer,
      _id_onPreparePanel as jni$_.JMethodIDPtr,
      i,
      _$view.pointer,
      _$menu.pointer,
    ).boolean;
  }

  static final _id_onMenuOpened = _class.instanceMethodId(
    r'onMenuOpened',
    r'(ILandroid/view/Menu;)Z',
  );

  static final _onMenuOpened =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean onMenuOpened(int i, android.view.Menu menu)`
  bool onMenuOpened(
    int i,
    jni$_.JObject? menu,
  ) {
    final _$menu = menu?.reference ?? jni$_.jNullReference;
    return _onMenuOpened(reference.pointer, _id_onMenuOpened as jni$_.JMethodIDPtr, i, _$menu.pointer).boolean;
  }

  static final _id_onMenuItemSelected = _class.instanceMethodId(
    r'onMenuItemSelected',
    r'(ILandroid/view/MenuItem;)Z',
  );

  static final _onMenuItemSelected =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean onMenuItemSelected(int i, android.view.MenuItem menuItem)`
  bool onMenuItemSelected(
    int i,
    jni$_.JObject? menuItem,
  ) {
    final _$menuItem = menuItem?.reference ?? jni$_.jNullReference;
    return _onMenuItemSelected(
      reference.pointer,
      _id_onMenuItemSelected as jni$_.JMethodIDPtr,
      i,
      _$menuItem.pointer,
    ).boolean;
  }

  static final _id_onPanelClosed = _class.instanceMethodId(
    r'onPanelClosed',
    r'(ILandroid/view/Menu;)V',
  );

  static final _onPanelClosed =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void onPanelClosed(int i, android.view.Menu menu)`
  void onPanelClosed(
    int i,
    jni$_.JObject? menu,
  ) {
    final _$menu = menu?.reference ?? jni$_.jNullReference;
    _onPanelClosed(reference.pointer, _id_onPanelClosed as jni$_.JMethodIDPtr, i, _$menu.pointer).check();
  }

  static final _id_invalidateOptionsMenu = _class.instanceMethodId(
    r'invalidateOptionsMenu',
    r'()V',
  );

  static final _invalidateOptionsMenu =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void invalidateOptionsMenu()`
  void invalidateOptionsMenu() {
    _invalidateOptionsMenu(reference.pointer, _id_invalidateOptionsMenu as jni$_.JMethodIDPtr).check();
  }

  static final _id_onCreateOptionsMenu = _class.instanceMethodId(
    r'onCreateOptionsMenu',
    r'(Landroid/view/Menu;)Z',
  );

  static final _onCreateOptionsMenu =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean onCreateOptionsMenu(android.view.Menu menu)`
  bool onCreateOptionsMenu(
    jni$_.JObject? menu,
  ) {
    final _$menu = menu?.reference ?? jni$_.jNullReference;
    return _onCreateOptionsMenu(
      reference.pointer,
      _id_onCreateOptionsMenu as jni$_.JMethodIDPtr,
      _$menu.pointer,
    ).boolean;
  }

  static final _id_onPrepareOptionsMenu = _class.instanceMethodId(
    r'onPrepareOptionsMenu',
    r'(Landroid/view/Menu;)Z',
  );

  static final _onPrepareOptionsMenu =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean onPrepareOptionsMenu(android.view.Menu menu)`
  bool onPrepareOptionsMenu(
    jni$_.JObject? menu,
  ) {
    final _$menu = menu?.reference ?? jni$_.jNullReference;
    return _onPrepareOptionsMenu(
      reference.pointer,
      _id_onPrepareOptionsMenu as jni$_.JMethodIDPtr,
      _$menu.pointer,
    ).boolean;
  }

  static final _id_onOptionsItemSelected = _class.instanceMethodId(
    r'onOptionsItemSelected',
    r'(Landroid/view/MenuItem;)Z',
  );

  static final _onOptionsItemSelected =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean onOptionsItemSelected(android.view.MenuItem menuItem)`
  bool onOptionsItemSelected(
    jni$_.JObject? menuItem,
  ) {
    final _$menuItem = menuItem?.reference ?? jni$_.jNullReference;
    return _onOptionsItemSelected(
      reference.pointer,
      _id_onOptionsItemSelected as jni$_.JMethodIDPtr,
      _$menuItem.pointer,
    ).boolean;
  }

  static final _id_onNavigateUp = _class.instanceMethodId(
    r'onNavigateUp',
    r'()Z',
  );

  static final _onNavigateUp =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean onNavigateUp()`
  bool onNavigateUp() {
    return _onNavigateUp(reference.pointer, _id_onNavigateUp as jni$_.JMethodIDPtr).boolean;
  }

  static final _id_onNavigateUpFromChild = _class.instanceMethodId(
    r'onNavigateUpFromChild',
    r'(Landroid/app/Activity;)Z',
  );

  static final _onNavigateUpFromChild =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean onNavigateUpFromChild(android.app.Activity activity)`
  bool onNavigateUpFromChild(
    Activity? activity,
  ) {
    final _$activity = activity?.reference ?? jni$_.jNullReference;
    return _onNavigateUpFromChild(
      reference.pointer,
      _id_onNavigateUpFromChild as jni$_.JMethodIDPtr,
      _$activity.pointer,
    ).boolean;
  }

  static final _id_onCreateNavigateUpTaskStack = _class.instanceMethodId(
    r'onCreateNavigateUpTaskStack',
    r'(Landroid/app/TaskStackBuilder;)V',
  );

  static final _onCreateNavigateUpTaskStack =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void onCreateNavigateUpTaskStack(android.app.TaskStackBuilder taskStackBuilder)`
  void onCreateNavigateUpTaskStack(
    jni$_.JObject? taskStackBuilder,
  ) {
    final _$taskStackBuilder = taskStackBuilder?.reference ?? jni$_.jNullReference;
    _onCreateNavigateUpTaskStack(
      reference.pointer,
      _id_onCreateNavigateUpTaskStack as jni$_.JMethodIDPtr,
      _$taskStackBuilder.pointer,
    ).check();
  }

  static final _id_onPrepareNavigateUpTaskStack = _class.instanceMethodId(
    r'onPrepareNavigateUpTaskStack',
    r'(Landroid/app/TaskStackBuilder;)V',
  );

  static final _onPrepareNavigateUpTaskStack =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void onPrepareNavigateUpTaskStack(android.app.TaskStackBuilder taskStackBuilder)`
  void onPrepareNavigateUpTaskStack(
    jni$_.JObject? taskStackBuilder,
  ) {
    final _$taskStackBuilder = taskStackBuilder?.reference ?? jni$_.jNullReference;
    _onPrepareNavigateUpTaskStack(
      reference.pointer,
      _id_onPrepareNavigateUpTaskStack as jni$_.JMethodIDPtr,
      _$taskStackBuilder.pointer,
    ).check();
  }

  static final _id_onOptionsMenuClosed = _class.instanceMethodId(
    r'onOptionsMenuClosed',
    r'(Landroid/view/Menu;)V',
  );

  static final _onOptionsMenuClosed =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void onOptionsMenuClosed(android.view.Menu menu)`
  void onOptionsMenuClosed(
    jni$_.JObject? menu,
  ) {
    final _$menu = menu?.reference ?? jni$_.jNullReference;
    _onOptionsMenuClosed(reference.pointer, _id_onOptionsMenuClosed as jni$_.JMethodIDPtr, _$menu.pointer).check();
  }

  static final _id_openOptionsMenu = _class.instanceMethodId(
    r'openOptionsMenu',
    r'()V',
  );

  static final _openOptionsMenu =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void openOptionsMenu()`
  void openOptionsMenu() {
    _openOptionsMenu(reference.pointer, _id_openOptionsMenu as jni$_.JMethodIDPtr).check();
  }

  static final _id_closeOptionsMenu = _class.instanceMethodId(
    r'closeOptionsMenu',
    r'()V',
  );

  static final _closeOptionsMenu =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void closeOptionsMenu()`
  void closeOptionsMenu() {
    _closeOptionsMenu(reference.pointer, _id_closeOptionsMenu as jni$_.JMethodIDPtr).check();
  }

  static final _id_onCreateContextMenu = _class.instanceMethodId(
    r'onCreateContextMenu',
    r'(Landroid/view/ContextMenu;Landroid/view/View;Landroid/view/ContextMenu$ContextMenuInfo;)V',
  );

  static final _onCreateContextMenu =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void onCreateContextMenu(android.view.ContextMenu contextMenu, android.view.View view, android.view.ContextMenu$ContextMenuInfo contextMenuInfo)`
  void onCreateContextMenu(
    jni$_.JObject? contextMenu,
    jni$_.JObject? view,
    jni$_.JObject? contextMenuInfo,
  ) {
    final _$contextMenu = contextMenu?.reference ?? jni$_.jNullReference;
    final _$view = view?.reference ?? jni$_.jNullReference;
    final _$contextMenuInfo = contextMenuInfo?.reference ?? jni$_.jNullReference;
    _onCreateContextMenu(
      reference.pointer,
      _id_onCreateContextMenu as jni$_.JMethodIDPtr,
      _$contextMenu.pointer,
      _$view.pointer,
      _$contextMenuInfo.pointer,
    ).check();
  }

  static final _id_registerForContextMenu = _class.instanceMethodId(
    r'registerForContextMenu',
    r'(Landroid/view/View;)V',
  );

  static final _registerForContextMenu =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void registerForContextMenu(android.view.View view)`
  void registerForContextMenu(
    jni$_.JObject? view,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    _registerForContextMenu(
      reference.pointer,
      _id_registerForContextMenu as jni$_.JMethodIDPtr,
      _$view.pointer,
    ).check();
  }

  static final _id_unregisterForContextMenu = _class.instanceMethodId(
    r'unregisterForContextMenu',
    r'(Landroid/view/View;)V',
  );

  static final _unregisterForContextMenu =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void unregisterForContextMenu(android.view.View view)`
  void unregisterForContextMenu(
    jni$_.JObject? view,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    _unregisterForContextMenu(
      reference.pointer,
      _id_unregisterForContextMenu as jni$_.JMethodIDPtr,
      _$view.pointer,
    ).check();
  }

  static final _id_openContextMenu = _class.instanceMethodId(
    r'openContextMenu',
    r'(Landroid/view/View;)V',
  );

  static final _openContextMenu =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void openContextMenu(android.view.View view)`
  void openContextMenu(
    jni$_.JObject? view,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    _openContextMenu(reference.pointer, _id_openContextMenu as jni$_.JMethodIDPtr, _$view.pointer).check();
  }

  static final _id_closeContextMenu = _class.instanceMethodId(
    r'closeContextMenu',
    r'()V',
  );

  static final _closeContextMenu =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void closeContextMenu()`
  void closeContextMenu() {
    _closeContextMenu(reference.pointer, _id_closeContextMenu as jni$_.JMethodIDPtr).check();
  }

  static final _id_onContextItemSelected = _class.instanceMethodId(
    r'onContextItemSelected',
    r'(Landroid/view/MenuItem;)Z',
  );

  static final _onContextItemSelected =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean onContextItemSelected(android.view.MenuItem menuItem)`
  bool onContextItemSelected(
    jni$_.JObject? menuItem,
  ) {
    final _$menuItem = menuItem?.reference ?? jni$_.jNullReference;
    return _onContextItemSelected(
      reference.pointer,
      _id_onContextItemSelected as jni$_.JMethodIDPtr,
      _$menuItem.pointer,
    ).boolean;
  }

  static final _id_onContextMenuClosed = _class.instanceMethodId(
    r'onContextMenuClosed',
    r'(Landroid/view/Menu;)V',
  );

  static final _onContextMenuClosed =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void onContextMenuClosed(android.view.Menu menu)`
  void onContextMenuClosed(
    jni$_.JObject? menu,
  ) {
    final _$menu = menu?.reference ?? jni$_.jNullReference;
    _onContextMenuClosed(reference.pointer, _id_onContextMenuClosed as jni$_.JMethodIDPtr, _$menu.pointer).check();
  }

  static final _id_showDialog = _class.instanceMethodId(
    r'showDialog',
    r'(I)V',
  );

  static final _showDialog =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final void showDialog(int i)`
  void showDialog(
    int i,
  ) {
    _showDialog(reference.pointer, _id_showDialog as jni$_.JMethodIDPtr, i).check();
  }

  static final _id_showDialog$1 = _class.instanceMethodId(
    r'showDialog',
    r'(ILandroid/os/Bundle;)Z',
  );

  static final _showDialog$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public final boolean showDialog(int i, android.os.Bundle bundle)`
  bool showDialog$1(
    int i,
    jni$_.JObject? bundle,
  ) {
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    return _showDialog$1(reference.pointer, _id_showDialog$1 as jni$_.JMethodIDPtr, i, _$bundle.pointer).boolean;
  }

  static final _id_dismissDialog = _class.instanceMethodId(
    r'dismissDialog',
    r'(I)V',
  );

  static final _dismissDialog =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final void dismissDialog(int i)`
  void dismissDialog(
    int i,
  ) {
    _dismissDialog(reference.pointer, _id_dismissDialog as jni$_.JMethodIDPtr, i).check();
  }

  static final _id_removeDialog = _class.instanceMethodId(
    r'removeDialog',
    r'(I)V',
  );

  static final _removeDialog =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final void removeDialog(int i)`
  void removeDialog(
    int i,
  ) {
    _removeDialog(reference.pointer, _id_removeDialog as jni$_.JMethodIDPtr, i).check();
  }

  static final _id_onSearchRequested = _class.instanceMethodId(
    r'onSearchRequested',
    r'(Landroid/view/SearchEvent;)Z',
  );

  static final _onSearchRequested =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean onSearchRequested(android.view.SearchEvent searchEvent)`
  bool onSearchRequested(
    jni$_.JObject? searchEvent,
  ) {
    final _$searchEvent = searchEvent?.reference ?? jni$_.jNullReference;
    return _onSearchRequested(
      reference.pointer,
      _id_onSearchRequested as jni$_.JMethodIDPtr,
      _$searchEvent.pointer,
    ).boolean;
  }

  static final _id_onSearchRequested$1 = _class.instanceMethodId(
    r'onSearchRequested',
    r'()Z',
  );

  static final _onSearchRequested$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean onSearchRequested()`
  bool onSearchRequested$1() {
    return _onSearchRequested$1(reference.pointer, _id_onSearchRequested$1 as jni$_.JMethodIDPtr).boolean;
  }

  static final _id_getSearchEvent = _class.instanceMethodId(
    r'getSearchEvent',
    r'()Landroid/view/SearchEvent;',
  );

  static final _getSearchEvent =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public final android.view.SearchEvent getSearchEvent()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getSearchEvent() {
    return _getSearchEvent(
      reference.pointer,
      _id_getSearchEvent as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_startSearch = _class.instanceMethodId(
    r'startSearch',
    r'(Ljava/lang/String;ZLandroid/os/Bundle;Z)V',
  );

  static final _startSearch =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32, jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public void startSearch(java.lang.String string, boolean z, android.os.Bundle bundle, boolean z1)`
  void startSearch(
    jni$_.JString? string,
    bool z,
    jni$_.JObject? bundle,
    bool z1,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _startSearch(
      reference.pointer,
      _id_startSearch as jni$_.JMethodIDPtr,
      _$string.pointer,
      z ? 1 : 0,
      _$bundle.pointer,
      z1 ? 1 : 0,
    ).check();
  }

  static final _id_triggerSearch = _class.instanceMethodId(
    r'triggerSearch',
    r'(Ljava/lang/String;Landroid/os/Bundle;)V',
  );

  static final _triggerSearch =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void triggerSearch(java.lang.String string, android.os.Bundle bundle)`
  void triggerSearch(
    jni$_.JString? string,
    jni$_.JObject? bundle,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _triggerSearch(
      reference.pointer,
      _id_triggerSearch as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$bundle.pointer,
    ).check();
  }

  static final _id_takeKeyEvents = _class.instanceMethodId(
    r'takeKeyEvents',
    r'(Z)V',
  );

  static final _takeKeyEvents =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void takeKeyEvents(boolean z)`
  void takeKeyEvents(
    bool z,
  ) {
    _takeKeyEvents(reference.pointer, _id_takeKeyEvents as jni$_.JMethodIDPtr, z ? 1 : 0).check();
  }

  static final _id_requestWindowFeature = _class.instanceMethodId(
    r'requestWindowFeature',
    r'(I)Z',
  );

  static final _requestWindowFeature =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final boolean requestWindowFeature(int i)`
  bool requestWindowFeature(
    int i,
  ) {
    return _requestWindowFeature(reference.pointer, _id_requestWindowFeature as jni$_.JMethodIDPtr, i).boolean;
  }

  static final _id_setFeatureDrawableResource = _class.instanceMethodId(
    r'setFeatureDrawableResource',
    r'(II)V',
  );

  static final _setFeatureDrawableResource =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, int)>();

  /// from: `public final void setFeatureDrawableResource(int i, int i1)`
  void setFeatureDrawableResource(
    int i,
    int i1,
  ) {
    _setFeatureDrawableResource(reference.pointer, _id_setFeatureDrawableResource as jni$_.JMethodIDPtr, i, i1).check();
  }

  static final _id_setFeatureDrawableUri = _class.instanceMethodId(
    r'setFeatureDrawableUri',
    r'(ILandroid/net/Uri;)V',
  );

  static final _setFeatureDrawableUri =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public final void setFeatureDrawableUri(int i, android.net.Uri uri)`
  void setFeatureDrawableUri(
    int i,
    Uri? uri,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    _setFeatureDrawableUri(
      reference.pointer,
      _id_setFeatureDrawableUri as jni$_.JMethodIDPtr,
      i,
      _$uri.pointer,
    ).check();
  }

  static final _id_setFeatureDrawable = _class.instanceMethodId(
    r'setFeatureDrawable',
    r'(ILandroid/graphics/drawable/Drawable;)V',
  );

  static final _setFeatureDrawable =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public final void setFeatureDrawable(int i, android.graphics.drawable.Drawable drawable)`
  void setFeatureDrawable(
    int i,
    jni$_.JObject? drawable,
  ) {
    final _$drawable = drawable?.reference ?? jni$_.jNullReference;
    _setFeatureDrawable(reference.pointer, _id_setFeatureDrawable as jni$_.JMethodIDPtr, i, _$drawable.pointer).check();
  }

  static final _id_setFeatureDrawableAlpha = _class.instanceMethodId(
    r'setFeatureDrawableAlpha',
    r'(II)V',
  );

  static final _setFeatureDrawableAlpha =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, int)>();

  /// from: `public final void setFeatureDrawableAlpha(int i, int i1)`
  void setFeatureDrawableAlpha(
    int i,
    int i1,
  ) {
    _setFeatureDrawableAlpha(reference.pointer, _id_setFeatureDrawableAlpha as jni$_.JMethodIDPtr, i, i1).check();
  }

  static final _id_getLayoutInflater = _class.instanceMethodId(
    r'getLayoutInflater',
    r'()Landroid/view/LayoutInflater;',
  );

  static final _getLayoutInflater =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.view.LayoutInflater getLayoutInflater()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getLayoutInflater() {
    return _getLayoutInflater(
      reference.pointer,
      _id_getLayoutInflater as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getMenuInflater = _class.instanceMethodId(
    r'getMenuInflater',
    r'()Landroid/view/MenuInflater;',
  );

  static final _getMenuInflater =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.view.MenuInflater getMenuInflater()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getMenuInflater() {
    return _getMenuInflater(
      reference.pointer,
      _id_getMenuInflater as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_setTheme = _class.instanceMethodId(
    r'setTheme',
    r'(I)V',
  );

  static final _setTheme =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setTheme(int i)`
  void setTheme(
    int i,
  ) {
    _setTheme(reference.pointer, _id_setTheme as jni$_.JMethodIDPtr, i).check();
  }

  static final _id_requestPermissions = _class.instanceMethodId(
    r'requestPermissions',
    r'([Ljava/lang/String;I)V',
  );

  static final _requestPermissions =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)
          >();

  /// from: `public final void requestPermissions(java.lang.String[] strings, int i)`
  void requestPermissions(
    jni$_.JArray<jni$_.JString?>? strings,
    int i,
  ) {
    final _$strings = strings?.reference ?? jni$_.jNullReference;
    _requestPermissions(reference.pointer, _id_requestPermissions as jni$_.JMethodIDPtr, _$strings.pointer, i).check();
  }

  static final _id_requestPermissions$1 = _class.instanceMethodId(
    r'requestPermissions',
    r'([Ljava/lang/String;II)V',
  );

  static final _requestPermissions$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
            )
          >();

  /// from: `public final void requestPermissions(java.lang.String[] strings, int i, int i1)`
  void requestPermissions$1(
    jni$_.JArray<jni$_.JString?>? strings,
    int i,
    int i1,
  ) {
    final _$strings = strings?.reference ?? jni$_.jNullReference;
    _requestPermissions$1(
      reference.pointer,
      _id_requestPermissions$1 as jni$_.JMethodIDPtr,
      _$strings.pointer,
      i,
      i1,
    ).check();
  }

  static final _id_onRequestPermissionsResult = _class.instanceMethodId(
    r'onRequestPermissionsResult',
    r'(I[Ljava/lang/String;[I)V',
  );

  static final _onRequestPermissionsResult =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void onRequestPermissionsResult(int i, java.lang.String[] strings, int[] is)`
  void onRequestPermissionsResult(
    int i,
    jni$_.JArray<jni$_.JString?>? strings,
    jni$_.JIntArray? is$,
  ) {
    final _$strings = strings?.reference ?? jni$_.jNullReference;
    final _$is$ = is$?.reference ?? jni$_.jNullReference;
    _onRequestPermissionsResult(
      reference.pointer,
      _id_onRequestPermissionsResult as jni$_.JMethodIDPtr,
      i,
      _$strings.pointer,
      _$is$.pointer,
    ).check();
  }

  static final _id_onRequestPermissionsResult$1 = _class.instanceMethodId(
    r'onRequestPermissionsResult',
    r'(I[Ljava/lang/String;[II)V',
  );

  static final _onRequestPermissionsResult$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public void onRequestPermissionsResult(int i, java.lang.String[] strings, int[] is, int i1)`
  void onRequestPermissionsResult$1(
    int i,
    jni$_.JArray<jni$_.JString?>? strings,
    jni$_.JIntArray? is$,
    int i1,
  ) {
    final _$strings = strings?.reference ?? jni$_.jNullReference;
    final _$is$ = is$?.reference ?? jni$_.jNullReference;
    _onRequestPermissionsResult$1(
      reference.pointer,
      _id_onRequestPermissionsResult$1 as jni$_.JMethodIDPtr,
      i,
      _$strings.pointer,
      _$is$.pointer,
      i1,
    ).check();
  }

  static final _id_shouldShowRequestPermissionRationale = _class.instanceMethodId(
    r'shouldShowRequestPermissionRationale',
    r'(Ljava/lang/String;)Z',
  );

  static final _shouldShowRequestPermissionRationale =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean shouldShowRequestPermissionRationale(java.lang.String string)`
  bool shouldShowRequestPermissionRationale(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _shouldShowRequestPermissionRationale(
      reference.pointer,
      _id_shouldShowRequestPermissionRationale as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).boolean;
  }

  static final _id_shouldShowRequestPermissionRationale$1 = _class.instanceMethodId(
    r'shouldShowRequestPermissionRationale',
    r'(Ljava/lang/String;I)Z',
  );

  static final _shouldShowRequestPermissionRationale$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)
          >();

  /// from: `public boolean shouldShowRequestPermissionRationale(java.lang.String string, int i)`
  bool shouldShowRequestPermissionRationale$1(
    jni$_.JString? string,
    int i,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _shouldShowRequestPermissionRationale$1(
      reference.pointer,
      _id_shouldShowRequestPermissionRationale$1 as jni$_.JMethodIDPtr,
      _$string.pointer,
      i,
    ).boolean;
  }

  static final _id_startActivityForResult = _class.instanceMethodId(
    r'startActivityForResult',
    r'(Landroid/content/Intent;I)V',
  );

  static final _startActivityForResult =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)
          >();

  /// from: `public void startActivityForResult(android.content.Intent intent, int i)`
  void startActivityForResult(
    Intent? intent,
    int i,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _startActivityForResult(
      reference.pointer,
      _id_startActivityForResult as jni$_.JMethodIDPtr,
      _$intent.pointer,
      i,
    ).check();
  }

  static final _id_startActivityForResult$1 = _class.instanceMethodId(
    r'startActivityForResult',
    r'(Landroid/content/Intent;ILandroid/os/Bundle;)V',
  );

  static final _startActivityForResult$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void startActivityForResult(android.content.Intent intent, int i, android.os.Bundle bundle)`
  void startActivityForResult$1(
    Intent? intent,
    int i,
    jni$_.JObject? bundle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _startActivityForResult$1(
      reference.pointer,
      _id_startActivityForResult$1 as jni$_.JMethodIDPtr,
      _$intent.pointer,
      i,
      _$bundle.pointer,
    ).check();
  }

  static final _id_isActivityTransitionRunning = _class.instanceMethodId(
    r'isActivityTransitionRunning',
    r'()Z',
  );

  static final _isActivityTransitionRunning =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean isActivityTransitionRunning()`
  bool isActivityTransitionRunning() {
    return _isActivityTransitionRunning(
      reference.pointer,
      _id_isActivityTransitionRunning as jni$_.JMethodIDPtr,
    ).boolean;
  }

  static final _id_startIntentSenderForResult = _class.instanceMethodId(
    r'startIntentSenderForResult',
    r'(Landroid/content/IntentSender;ILandroid/content/Intent;III)V',
  );

  static final _startIntentSenderForResult =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Int32,
                    jni$_.Int32,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              int,
            )
          >();

  /// from: `public void startIntentSenderForResult(android.content.IntentSender intentSender, int i, android.content.Intent intent, int i1, int i2, int i3)`
  void startIntentSenderForResult(
    jni$_.JObject? intentSender,
    int i,
    Intent? intent,
    int i1,
    int i2,
    int i3,
  ) {
    final _$intentSender = intentSender?.reference ?? jni$_.jNullReference;
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _startIntentSenderForResult(
      reference.pointer,
      _id_startIntentSenderForResult as jni$_.JMethodIDPtr,
      _$intentSender.pointer,
      i,
      _$intent.pointer,
      i1,
      i2,
      i3,
    ).check();
  }

  static final _id_startIntentSenderForResult$1 = _class.instanceMethodId(
    r'startIntentSenderForResult',
    r'(Landroid/content/IntentSender;ILandroid/content/Intent;IIILandroid/os/Bundle;)V',
  );

  static final _startIntentSenderForResult$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Int32,
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void startIntentSenderForResult(android.content.IntentSender intentSender, int i, android.content.Intent intent, int i1, int i2, int i3, android.os.Bundle bundle)`
  void startIntentSenderForResult$1(
    jni$_.JObject? intentSender,
    int i,
    Intent? intent,
    int i1,
    int i2,
    int i3,
    jni$_.JObject? bundle,
  ) {
    final _$intentSender = intentSender?.reference ?? jni$_.jNullReference;
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _startIntentSenderForResult$1(
      reference.pointer,
      _id_startIntentSenderForResult$1 as jni$_.JMethodIDPtr,
      _$intentSender.pointer,
      i,
      _$intent.pointer,
      i1,
      i2,
      i3,
      _$bundle.pointer,
    ).check();
  }

  static final _id_startActivity = _class.instanceMethodId(
    r'startActivity',
    r'(Landroid/content/Intent;)V',
  );

  static final _startActivity =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void startActivity(android.content.Intent intent)`
  void startActivity(
    Intent? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _startActivity(reference.pointer, _id_startActivity as jni$_.JMethodIDPtr, _$intent.pointer).check();
  }

  static final _id_startActivity$1 = _class.instanceMethodId(
    r'startActivity',
    r'(Landroid/content/Intent;Landroid/os/Bundle;)V',
  );

  static final _startActivity$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void startActivity(android.content.Intent intent, android.os.Bundle bundle)`
  void startActivity$1(
    Intent? intent,
    jni$_.JObject? bundle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _startActivity$1(
      reference.pointer,
      _id_startActivity$1 as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$bundle.pointer,
    ).check();
  }

  static final _id_startActivities = _class.instanceMethodId(
    r'startActivities',
    r'([Landroid/content/Intent;)V',
  );

  static final _startActivities =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void startActivities(android.content.Intent[] intents)`
  void startActivities(
    jni$_.JArray<Intent?>? intents,
  ) {
    final _$intents = intents?.reference ?? jni$_.jNullReference;
    _startActivities(reference.pointer, _id_startActivities as jni$_.JMethodIDPtr, _$intents.pointer).check();
  }

  static final _id_startActivities$1 = _class.instanceMethodId(
    r'startActivities',
    r'([Landroid/content/Intent;Landroid/os/Bundle;)V',
  );

  static final _startActivities$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void startActivities(android.content.Intent[] intents, android.os.Bundle bundle)`
  void startActivities$1(
    jni$_.JArray<Intent?>? intents,
    jni$_.JObject? bundle,
  ) {
    final _$intents = intents?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _startActivities$1(
      reference.pointer,
      _id_startActivities$1 as jni$_.JMethodIDPtr,
      _$intents.pointer,
      _$bundle.pointer,
    ).check();
  }

  static final _id_startIntentSender = _class.instanceMethodId(
    r'startIntentSender',
    r'(Landroid/content/IntentSender;Landroid/content/Intent;III)V',
  );

  static final _startIntentSender =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>, jni$_.Int32, jni$_.Int32, jni$_.Int32)
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              int,
            )
          >();

  /// from: `public void startIntentSender(android.content.IntentSender intentSender, android.content.Intent intent, int i, int i1, int i2)`
  void startIntentSender(
    jni$_.JObject? intentSender,
    Intent? intent,
    int i,
    int i1,
    int i2,
  ) {
    final _$intentSender = intentSender?.reference ?? jni$_.jNullReference;
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _startIntentSender(
      reference.pointer,
      _id_startIntentSender as jni$_.JMethodIDPtr,
      _$intentSender.pointer,
      _$intent.pointer,
      i,
      i1,
      i2,
    ).check();
  }

  static final _id_startIntentSender$1 = _class.instanceMethodId(
    r'startIntentSender',
    r'(Landroid/content/IntentSender;Landroid/content/Intent;IIILandroid/os/Bundle;)V',
  );

  static final _startIntentSender$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Int32,
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void startIntentSender(android.content.IntentSender intentSender, android.content.Intent intent, int i, int i1, int i2, android.os.Bundle bundle)`
  void startIntentSender$1(
    jni$_.JObject? intentSender,
    Intent? intent,
    int i,
    int i1,
    int i2,
    jni$_.JObject? bundle,
  ) {
    final _$intentSender = intentSender?.reference ?? jni$_.jNullReference;
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _startIntentSender$1(
      reference.pointer,
      _id_startIntentSender$1 as jni$_.JMethodIDPtr,
      _$intentSender.pointer,
      _$intent.pointer,
      i,
      i1,
      i2,
      _$bundle.pointer,
    ).check();
  }

  static final _id_startActivityIfNeeded = _class.instanceMethodId(
    r'startActivityIfNeeded',
    r'(Landroid/content/Intent;I)Z',
  );

  static final _startActivityIfNeeded =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)
          >();

  /// from: `public boolean startActivityIfNeeded(android.content.Intent intent, int i)`
  bool startActivityIfNeeded(
    Intent? intent,
    int i,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    return _startActivityIfNeeded(
      reference.pointer,
      _id_startActivityIfNeeded as jni$_.JMethodIDPtr,
      _$intent.pointer,
      i,
    ).boolean;
  }

  static final _id_startActivityIfNeeded$1 = _class.instanceMethodId(
    r'startActivityIfNeeded',
    r'(Landroid/content/Intent;ILandroid/os/Bundle;)Z',
  );

  static final _startActivityIfNeeded$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean startActivityIfNeeded(android.content.Intent intent, int i, android.os.Bundle bundle)`
  bool startActivityIfNeeded$1(
    Intent? intent,
    int i,
    jni$_.JObject? bundle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    return _startActivityIfNeeded$1(
      reference.pointer,
      _id_startActivityIfNeeded$1 as jni$_.JMethodIDPtr,
      _$intent.pointer,
      i,
      _$bundle.pointer,
    ).boolean;
  }

  static final _id_startNextMatchingActivity = _class.instanceMethodId(
    r'startNextMatchingActivity',
    r'(Landroid/content/Intent;)Z',
  );

  static final _startNextMatchingActivity =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean startNextMatchingActivity(android.content.Intent intent)`
  bool startNextMatchingActivity(
    Intent? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    return _startNextMatchingActivity(
      reference.pointer,
      _id_startNextMatchingActivity as jni$_.JMethodIDPtr,
      _$intent.pointer,
    ).boolean;
  }

  static final _id_startNextMatchingActivity$1 = _class.instanceMethodId(
    r'startNextMatchingActivity',
    r'(Landroid/content/Intent;Landroid/os/Bundle;)Z',
  );

  static final _startNextMatchingActivity$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean startNextMatchingActivity(android.content.Intent intent, android.os.Bundle bundle)`
  bool startNextMatchingActivity$1(
    Intent? intent,
    jni$_.JObject? bundle,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    return _startNextMatchingActivity$1(
      reference.pointer,
      _id_startNextMatchingActivity$1 as jni$_.JMethodIDPtr,
      _$intent.pointer,
      _$bundle.pointer,
    ).boolean;
  }

  static final _id_startActivityFromChild = _class.instanceMethodId(
    r'startActivityFromChild',
    r'(Landroid/app/Activity;Landroid/content/Intent;I)V',
  );

  static final _startActivityFromChild =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public void startActivityFromChild(android.app.Activity activity, android.content.Intent intent, int i)`
  void startActivityFromChild(
    Activity? activity,
    Intent? intent,
    int i,
  ) {
    final _$activity = activity?.reference ?? jni$_.jNullReference;
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _startActivityFromChild(
      reference.pointer,
      _id_startActivityFromChild as jni$_.JMethodIDPtr,
      _$activity.pointer,
      _$intent.pointer,
      i,
    ).check();
  }

  static final _id_startActivityFromChild$1 = _class.instanceMethodId(
    r'startActivityFromChild',
    r'(Landroid/app/Activity;Landroid/content/Intent;ILandroid/os/Bundle;)V',
  );

  static final _startActivityFromChild$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>, jni$_.Int32, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void startActivityFromChild(android.app.Activity activity, android.content.Intent intent, int i, android.os.Bundle bundle)`
  void startActivityFromChild$1(
    Activity? activity,
    Intent? intent,
    int i,
    jni$_.JObject? bundle,
  ) {
    final _$activity = activity?.reference ?? jni$_.jNullReference;
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _startActivityFromChild$1(
      reference.pointer,
      _id_startActivityFromChild$1 as jni$_.JMethodIDPtr,
      _$activity.pointer,
      _$intent.pointer,
      i,
      _$bundle.pointer,
    ).check();
  }

  static final _id_startActivityFromFragment = _class.instanceMethodId(
    r'startActivityFromFragment',
    r'(Landroid/app/Fragment;Landroid/content/Intent;I)V',
  );

  static final _startActivityFromFragment =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public void startActivityFromFragment(android.app.Fragment fragment, android.content.Intent intent, int i)`
  void startActivityFromFragment(
    jni$_.JObject? fragment,
    Intent? intent,
    int i,
  ) {
    final _$fragment = fragment?.reference ?? jni$_.jNullReference;
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _startActivityFromFragment(
      reference.pointer,
      _id_startActivityFromFragment as jni$_.JMethodIDPtr,
      _$fragment.pointer,
      _$intent.pointer,
      i,
    ).check();
  }

  static final _id_startActivityFromFragment$1 = _class.instanceMethodId(
    r'startActivityFromFragment',
    r'(Landroid/app/Fragment;Landroid/content/Intent;ILandroid/os/Bundle;)V',
  );

  static final _startActivityFromFragment$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>, jni$_.Int32, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void startActivityFromFragment(android.app.Fragment fragment, android.content.Intent intent, int i, android.os.Bundle bundle)`
  void startActivityFromFragment$1(
    jni$_.JObject? fragment,
    Intent? intent,
    int i,
    jni$_.JObject? bundle,
  ) {
    final _$fragment = fragment?.reference ?? jni$_.jNullReference;
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _startActivityFromFragment$1(
      reference.pointer,
      _id_startActivityFromFragment$1 as jni$_.JMethodIDPtr,
      _$fragment.pointer,
      _$intent.pointer,
      i,
      _$bundle.pointer,
    ).check();
  }

  static final _id_startIntentSenderFromChild = _class.instanceMethodId(
    r'startIntentSenderFromChild',
    r'(Landroid/app/Activity;Landroid/content/IntentSender;ILandroid/content/Intent;III)V',
  );

  static final _startIntentSenderFromChild =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Int32,
                    jni$_.Int32,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              int,
            )
          >();

  /// from: `public void startIntentSenderFromChild(android.app.Activity activity, android.content.IntentSender intentSender, int i, android.content.Intent intent, int i1, int i2, int i3)`
  void startIntentSenderFromChild(
    Activity? activity,
    jni$_.JObject? intentSender,
    int i,
    Intent? intent,
    int i1,
    int i2,
    int i3,
  ) {
    final _$activity = activity?.reference ?? jni$_.jNullReference;
    final _$intentSender = intentSender?.reference ?? jni$_.jNullReference;
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _startIntentSenderFromChild(
      reference.pointer,
      _id_startIntentSenderFromChild as jni$_.JMethodIDPtr,
      _$activity.pointer,
      _$intentSender.pointer,
      i,
      _$intent.pointer,
      i1,
      i2,
      i3,
    ).check();
  }

  static final _id_startIntentSenderFromChild$1 = _class.instanceMethodId(
    r'startIntentSenderFromChild',
    r'(Landroid/app/Activity;Landroid/content/IntentSender;ILandroid/content/Intent;IIILandroid/os/Bundle;)V',
  );

  static final _startIntentSenderFromChild$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Int32,
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void startIntentSenderFromChild(android.app.Activity activity, android.content.IntentSender intentSender, int i, android.content.Intent intent, int i1, int i2, int i3, android.os.Bundle bundle)`
  void startIntentSenderFromChild$1(
    Activity? activity,
    jni$_.JObject? intentSender,
    int i,
    Intent? intent,
    int i1,
    int i2,
    int i3,
    jni$_.JObject? bundle,
  ) {
    final _$activity = activity?.reference ?? jni$_.jNullReference;
    final _$intentSender = intentSender?.reference ?? jni$_.jNullReference;
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _startIntentSenderFromChild$1(
      reference.pointer,
      _id_startIntentSenderFromChild$1 as jni$_.JMethodIDPtr,
      _$activity.pointer,
      _$intentSender.pointer,
      i,
      _$intent.pointer,
      i1,
      i2,
      i3,
      _$bundle.pointer,
    ).check();
  }

  static final _id_overrideActivityTransition = _class.instanceMethodId(
    r'overrideActivityTransition',
    r'(III)V',
  );

  static final _overrideActivityTransition =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Int32, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, int, int)>();

  /// from: `public void overrideActivityTransition(int i, int i1, int i2)`
  void overrideActivityTransition(
    int i,
    int i1,
    int i2,
  ) {
    _overrideActivityTransition(
      reference.pointer,
      _id_overrideActivityTransition as jni$_.JMethodIDPtr,
      i,
      i1,
      i2,
    ).check();
  }

  static final _id_overrideActivityTransition$1 = _class.instanceMethodId(
    r'overrideActivityTransition',
    r'(IIII)V',
  );

  static final _overrideActivityTransition$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Int32, jni$_.Int32, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, int, int, int)
          >();

  /// from: `public void overrideActivityTransition(int i, int i1, int i2, int i3)`
  void overrideActivityTransition$1(
    int i,
    int i1,
    int i2,
    int i3,
  ) {
    _overrideActivityTransition$1(
      reference.pointer,
      _id_overrideActivityTransition$1 as jni$_.JMethodIDPtr,
      i,
      i1,
      i2,
      i3,
    ).check();
  }

  static final _id_clearOverrideActivityTransition = _class.instanceMethodId(
    r'clearOverrideActivityTransition',
    r'(I)V',
  );

  static final _clearOverrideActivityTransition =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void clearOverrideActivityTransition(int i)`
  void clearOverrideActivityTransition(
    int i,
  ) {
    _clearOverrideActivityTransition(
      reference.pointer,
      _id_clearOverrideActivityTransition as jni$_.JMethodIDPtr,
      i,
    ).check();
  }

  static final _id_overridePendingTransition = _class.instanceMethodId(
    r'overridePendingTransition',
    r'(II)V',
  );

  static final _overridePendingTransition =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, int)>();

  /// from: `public void overridePendingTransition(int i, int i1)`
  void overridePendingTransition(
    int i,
    int i1,
  ) {
    _overridePendingTransition(reference.pointer, _id_overridePendingTransition as jni$_.JMethodIDPtr, i, i1).check();
  }

  static final _id_overridePendingTransition$1 = _class.instanceMethodId(
    r'overridePendingTransition',
    r'(III)V',
  );

  static final _overridePendingTransition$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Int32, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, int, int)>();

  /// from: `public void overridePendingTransition(int i, int i1, int i2)`
  void overridePendingTransition$1(
    int i,
    int i1,
    int i2,
  ) {
    _overridePendingTransition$1(
      reference.pointer,
      _id_overridePendingTransition$1 as jni$_.JMethodIDPtr,
      i,
      i1,
      i2,
    ).check();
  }

  static final _id_setResult = _class.instanceMethodId(
    r'setResult',
    r'(I)V',
  );

  static final _setResult =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final void setResult(int i)`
  void setResult(
    int i,
  ) {
    _setResult(reference.pointer, _id_setResult as jni$_.JMethodIDPtr, i).check();
  }

  static final _id_setResult$1 = _class.instanceMethodId(
    r'setResult',
    r'(ILandroid/content/Intent;)V',
  );

  static final _setResult$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public final void setResult(int i, android.content.Intent intent)`
  void setResult$1(
    int i,
    Intent? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _setResult$1(reference.pointer, _id_setResult$1 as jni$_.JMethodIDPtr, i, _$intent.pointer).check();
  }

  static final _id_getReferrer = _class.instanceMethodId(
    r'getReferrer',
    r'()Landroid/net/Uri;',
  );

  static final _getReferrer =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.net.Uri getReferrer()`
  /// The returned object must be released after use, by calling the [release] method.
  Uri? getReferrer() {
    return _getReferrer(
      reference.pointer,
      _id_getReferrer as jni$_.JMethodIDPtr,
    ).object<Uri?>(const $Uri$NullableType());
  }

  static final _id_onProvideReferrer = _class.instanceMethodId(
    r'onProvideReferrer',
    r'()Landroid/net/Uri;',
  );

  static final _onProvideReferrer =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.net.Uri onProvideReferrer()`
  /// The returned object must be released after use, by calling the [release] method.
  Uri? onProvideReferrer() {
    return _onProvideReferrer(
      reference.pointer,
      _id_onProvideReferrer as jni$_.JMethodIDPtr,
    ).object<Uri?>(const $Uri$NullableType());
  }

  static final _id_getCallingPackage = _class.instanceMethodId(
    r'getCallingPackage',
    r'()Ljava/lang/String;',
  );

  static final _getCallingPackage =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.lang.String getCallingPackage()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getCallingPackage() {
    return _getCallingPackage(
      reference.pointer,
      _id_getCallingPackage as jni$_.JMethodIDPtr,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getCallingActivity = _class.instanceMethodId(
    r'getCallingActivity',
    r'()Landroid/content/ComponentName;',
  );

  static final _getCallingActivity =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.content.ComponentName getCallingActivity()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getCallingActivity() {
    return _getCallingActivity(
      reference.pointer,
      _id_getCallingActivity as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getLaunchedFromUid = _class.instanceMethodId(
    r'getLaunchedFromUid',
    r'()I',
  );

  static final _getLaunchedFromUid =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int getLaunchedFromUid()`
  int getLaunchedFromUid() {
    return _getLaunchedFromUid(reference.pointer, _id_getLaunchedFromUid as jni$_.JMethodIDPtr).integer;
  }

  static final _id_getLaunchedFromPackage = _class.instanceMethodId(
    r'getLaunchedFromPackage',
    r'()Ljava/lang/String;',
  );

  static final _getLaunchedFromPackage =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.lang.String getLaunchedFromPackage()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getLaunchedFromPackage() {
    return _getLaunchedFromPackage(
      reference.pointer,
      _id_getLaunchedFromPackage as jni$_.JMethodIDPtr,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getInitialCaller = _class.instanceMethodId(
    r'getInitialCaller',
    r'()Landroid/app/ComponentCaller;',
  );

  static final _getInitialCaller =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.app.ComponentCaller getInitialCaller()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getInitialCaller() {
    return _getInitialCaller(
      reference.pointer,
      _id_getInitialCaller as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getCurrentCaller = _class.instanceMethodId(
    r'getCurrentCaller',
    r'()Landroid/app/ComponentCaller;',
  );

  static final _getCurrentCaller =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.app.ComponentCaller getCurrentCaller()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getCurrentCaller() {
    return _getCurrentCaller(
      reference.pointer,
      _id_getCurrentCaller as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_setVisible = _class.instanceMethodId(
    r'setVisible',
    r'(Z)V',
  );

  static final _setVisible =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setVisible(boolean z)`
  void setVisible(
    bool z,
  ) {
    _setVisible(reference.pointer, _id_setVisible as jni$_.JMethodIDPtr, z ? 1 : 0).check();
  }

  static final _id_isFinishing = _class.instanceMethodId(
    r'isFinishing',
    r'()Z',
  );

  static final _isFinishing =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean isFinishing()`
  bool isFinishing() {
    return _isFinishing(reference.pointer, _id_isFinishing as jni$_.JMethodIDPtr).boolean;
  }

  static final _id_isDestroyed = _class.instanceMethodId(
    r'isDestroyed',
    r'()Z',
  );

  static final _isDestroyed =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean isDestroyed()`
  bool isDestroyed() {
    return _isDestroyed(reference.pointer, _id_isDestroyed as jni$_.JMethodIDPtr).boolean;
  }

  static final _id_isChangingConfigurations = _class.instanceMethodId(
    r'isChangingConfigurations',
    r'()Z',
  );

  static final _isChangingConfigurations =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean isChangingConfigurations()`
  bool isChangingConfigurations() {
    return _isChangingConfigurations(reference.pointer, _id_isChangingConfigurations as jni$_.JMethodIDPtr).boolean;
  }

  static final _id_recreate = _class.instanceMethodId(
    r'recreate',
    r'()V',
  );

  static final _recreate =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void recreate()`
  void recreate() {
    _recreate(reference.pointer, _id_recreate as jni$_.JMethodIDPtr).check();
  }

  static final _id_finish = _class.instanceMethodId(
    r'finish',
    r'()V',
  );

  static final _finish =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void finish()`
  void finish() {
    _finish(reference.pointer, _id_finish as jni$_.JMethodIDPtr).check();
  }

  static final _id_finishAffinity = _class.instanceMethodId(
    r'finishAffinity',
    r'()V',
  );

  static final _finishAffinity =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void finishAffinity()`
  void finishAffinity() {
    _finishAffinity(reference.pointer, _id_finishAffinity as jni$_.JMethodIDPtr).check();
  }

  static final _id_finishFromChild = _class.instanceMethodId(
    r'finishFromChild',
    r'(Landroid/app/Activity;)V',
  );

  static final _finishFromChild =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void finishFromChild(android.app.Activity activity)`
  void finishFromChild(
    Activity? activity,
  ) {
    final _$activity = activity?.reference ?? jni$_.jNullReference;
    _finishFromChild(reference.pointer, _id_finishFromChild as jni$_.JMethodIDPtr, _$activity.pointer).check();
  }

  static final _id_finishAfterTransition = _class.instanceMethodId(
    r'finishAfterTransition',
    r'()V',
  );

  static final _finishAfterTransition =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void finishAfterTransition()`
  void finishAfterTransition() {
    _finishAfterTransition(reference.pointer, _id_finishAfterTransition as jni$_.JMethodIDPtr).check();
  }

  static final _id_finishActivity = _class.instanceMethodId(
    r'finishActivity',
    r'(I)V',
  );

  static final _finishActivity =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void finishActivity(int i)`
  void finishActivity(
    int i,
  ) {
    _finishActivity(reference.pointer, _id_finishActivity as jni$_.JMethodIDPtr, i).check();
  }

  static final _id_finishActivityFromChild = _class.instanceMethodId(
    r'finishActivityFromChild',
    r'(Landroid/app/Activity;I)V',
  );

  static final _finishActivityFromChild =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)
          >();

  /// from: `public void finishActivityFromChild(android.app.Activity activity, int i)`
  void finishActivityFromChild(
    Activity? activity,
    int i,
  ) {
    final _$activity = activity?.reference ?? jni$_.jNullReference;
    _finishActivityFromChild(
      reference.pointer,
      _id_finishActivityFromChild as jni$_.JMethodIDPtr,
      _$activity.pointer,
      i,
    ).check();
  }

  static final _id_finishAndRemoveTask = _class.instanceMethodId(
    r'finishAndRemoveTask',
    r'()V',
  );

  static final _finishAndRemoveTask =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void finishAndRemoveTask()`
  void finishAndRemoveTask() {
    _finishAndRemoveTask(reference.pointer, _id_finishAndRemoveTask as jni$_.JMethodIDPtr).check();
  }

  static final _id_releaseInstance = _class.instanceMethodId(
    r'releaseInstance',
    r'()Z',
  );

  static final _releaseInstance =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean releaseInstance()`
  bool releaseInstance() {
    return _releaseInstance(reference.pointer, _id_releaseInstance as jni$_.JMethodIDPtr).boolean;
  }

  static final _id_onActivityResult = _class.instanceMethodId(
    r'onActivityResult',
    r'(IILandroid/content/Intent;Landroid/app/ComponentCaller;)V',
  );

  static final _onActivityResult =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Int32, jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
              int,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void onActivityResult(int i, int i1, android.content.Intent intent, android.app.ComponentCaller componentCaller)`
  void onActivityResult(
    int i,
    int i1,
    Intent? intent,
    jni$_.JObject? componentCaller,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    final _$componentCaller = componentCaller?.reference ?? jni$_.jNullReference;
    _onActivityResult(
      reference.pointer,
      _id_onActivityResult as jni$_.JMethodIDPtr,
      i,
      i1,
      _$intent.pointer,
      _$componentCaller.pointer,
    ).check();
  }

  static final _id_onActivityReenter = _class.instanceMethodId(
    r'onActivityReenter',
    r'(ILandroid/content/Intent;)V',
  );

  static final _onActivityReenter =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void onActivityReenter(int i, android.content.Intent intent)`
  void onActivityReenter(
    int i,
    Intent? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    _onActivityReenter(reference.pointer, _id_onActivityReenter as jni$_.JMethodIDPtr, i, _$intent.pointer).check();
  }

  static final _id_createPendingResult = _class.instanceMethodId(
    r'createPendingResult',
    r'(ILandroid/content/Intent;I)Landroid/app/PendingIntent;',
  );

  static final _createPendingResult =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>, int)
          >();

  /// from: `public android.app.PendingIntent createPendingResult(int i, android.content.Intent intent, int i1)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? createPendingResult(
    int i,
    Intent? intent,
    int i1,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    return _createPendingResult(
      reference.pointer,
      _id_createPendingResult as jni$_.JMethodIDPtr,
      i,
      _$intent.pointer,
      i1,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_setRequestedOrientation = _class.instanceMethodId(
    r'setRequestedOrientation',
    r'(I)V',
  );

  static final _setRequestedOrientation =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setRequestedOrientation(int i)`
  void setRequestedOrientation(
    int i,
  ) {
    _setRequestedOrientation(reference.pointer, _id_setRequestedOrientation as jni$_.JMethodIDPtr, i).check();
  }

  static final _id_getRequestedOrientation = _class.instanceMethodId(
    r'getRequestedOrientation',
    r'()I',
  );

  static final _getRequestedOrientation =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int getRequestedOrientation()`
  int getRequestedOrientation() {
    return _getRequestedOrientation(reference.pointer, _id_getRequestedOrientation as jni$_.JMethodIDPtr).integer;
  }

  static final _id_getTaskId = _class.instanceMethodId(
    r'getTaskId',
    r'()I',
  );

  static final _getTaskId =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int getTaskId()`
  int getTaskId() {
    return _getTaskId(reference.pointer, _id_getTaskId as jni$_.JMethodIDPtr).integer;
  }

  static final _id_isTaskRoot = _class.instanceMethodId(
    r'isTaskRoot',
    r'()Z',
  );

  static final _isTaskRoot =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean isTaskRoot()`
  bool isTaskRoot() {
    return _isTaskRoot(reference.pointer, _id_isTaskRoot as jni$_.JMethodIDPtr).boolean;
  }

  static final _id_moveTaskToBack = _class.instanceMethodId(
    r'moveTaskToBack',
    r'(Z)Z',
  );

  static final _moveTaskToBack =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public boolean moveTaskToBack(boolean z)`
  bool moveTaskToBack(
    bool z,
  ) {
    return _moveTaskToBack(reference.pointer, _id_moveTaskToBack as jni$_.JMethodIDPtr, z ? 1 : 0).boolean;
  }

  static final _id_getLocalClassName = _class.instanceMethodId(
    r'getLocalClassName',
    r'()Ljava/lang/String;',
  );

  static final _getLocalClassName =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.lang.String getLocalClassName()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getLocalClassName() {
    return _getLocalClassName(
      reference.pointer,
      _id_getLocalClassName as jni$_.JMethodIDPtr,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getComponentName = _class.instanceMethodId(
    r'getComponentName',
    r'()Landroid/content/ComponentName;',
  );

  static final _getComponentName =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.content.ComponentName getComponentName()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getComponentName() {
    return _getComponentName(
      reference.pointer,
      _id_getComponentName as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getPreferences = _class.instanceMethodId(
    r'getPreferences',
    r'(I)Landroid/content/SharedPreferences;',
  );

  static final _getPreferences =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public android.content.SharedPreferences getPreferences(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getPreferences(
    int i,
  ) {
    return _getPreferences(
      reference.pointer,
      _id_getPreferences as jni$_.JMethodIDPtr,
      i,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_isLaunchedFromBubble = _class.instanceMethodId(
    r'isLaunchedFromBubble',
    r'()Z',
  );

  static final _isLaunchedFromBubble =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean isLaunchedFromBubble()`
  bool isLaunchedFromBubble() {
    return _isLaunchedFromBubble(reference.pointer, _id_isLaunchedFromBubble as jni$_.JMethodIDPtr).boolean;
  }

  static final _id_getSystemService = _class.instanceMethodId(
    r'getSystemService',
    r'(Ljava/lang/String;)Ljava/lang/Object;',
  );

  static final _getSystemService =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public java.lang.Object getSystemService(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getSystemService(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getSystemService(
      reference.pointer,
      _id_getSystemService as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_setTitle = _class.instanceMethodId(
    r'setTitle',
    r'(Ljava/lang/CharSequence;)V',
  );

  static final _setTitle =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void setTitle(java.lang.CharSequence charSequence)`
  void setTitle(
    jni$_.JObject? charSequence,
  ) {
    final _$charSequence = charSequence?.reference ?? jni$_.jNullReference;
    _setTitle(reference.pointer, _id_setTitle as jni$_.JMethodIDPtr, _$charSequence.pointer).check();
  }

  static final _id_setTitle$1 = _class.instanceMethodId(
    r'setTitle',
    r'(I)V',
  );

  static final _setTitle$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setTitle(int i)`
  void setTitle$1(
    int i,
  ) {
    _setTitle$1(reference.pointer, _id_setTitle$1 as jni$_.JMethodIDPtr, i).check();
  }

  static final _id_setTitleColor = _class.instanceMethodId(
    r'setTitleColor',
    r'(I)V',
  );

  static final _setTitleColor =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setTitleColor(int i)`
  void setTitleColor(
    int i,
  ) {
    _setTitleColor(reference.pointer, _id_setTitleColor as jni$_.JMethodIDPtr, i).check();
  }

  static final _id_getTitle = _class.instanceMethodId(
    r'getTitle',
    r'()Ljava/lang/CharSequence;',
  );

  static final _getTitle =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public final java.lang.CharSequence getTitle()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getTitle() {
    return _getTitle(
      reference.pointer,
      _id_getTitle as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getTitleColor = _class.instanceMethodId(
    r'getTitleColor',
    r'()I',
  );

  static final _getTitleColor =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public final int getTitleColor()`
  int getTitleColor() {
    return _getTitleColor(reference.pointer, _id_getTitleColor as jni$_.JMethodIDPtr).integer;
  }

  static final _id_setTaskDescription = _class.instanceMethodId(
    r'setTaskDescription',
    r'(Landroid/app/ActivityManager$TaskDescription;)V',
  );

  static final _setTaskDescription =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void setTaskDescription(android.app.ActivityManager$TaskDescription taskDescription)`
  void setTaskDescription(
    jni$_.JObject? taskDescription,
  ) {
    final _$taskDescription = taskDescription?.reference ?? jni$_.jNullReference;
    _setTaskDescription(
      reference.pointer,
      _id_setTaskDescription as jni$_.JMethodIDPtr,
      _$taskDescription.pointer,
    ).check();
  }

  static final _id_setProgressBarVisibility = _class.instanceMethodId(
    r'setProgressBarVisibility',
    r'(Z)V',
  );

  static final _setProgressBarVisibility =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final void setProgressBarVisibility(boolean z)`
  void setProgressBarVisibility(
    bool z,
  ) {
    _setProgressBarVisibility(reference.pointer, _id_setProgressBarVisibility as jni$_.JMethodIDPtr, z ? 1 : 0).check();
  }

  static final _id_setProgressBarIndeterminateVisibility = _class.instanceMethodId(
    r'setProgressBarIndeterminateVisibility',
    r'(Z)V',
  );

  static final _setProgressBarIndeterminateVisibility =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final void setProgressBarIndeterminateVisibility(boolean z)`
  void setProgressBarIndeterminateVisibility(
    bool z,
  ) {
    _setProgressBarIndeterminateVisibility(
      reference.pointer,
      _id_setProgressBarIndeterminateVisibility as jni$_.JMethodIDPtr,
      z ? 1 : 0,
    ).check();
  }

  static final _id_setProgressBarIndeterminate = _class.instanceMethodId(
    r'setProgressBarIndeterminate',
    r'(Z)V',
  );

  static final _setProgressBarIndeterminate =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final void setProgressBarIndeterminate(boolean z)`
  void setProgressBarIndeterminate(
    bool z,
  ) {
    _setProgressBarIndeterminate(
      reference.pointer,
      _id_setProgressBarIndeterminate as jni$_.JMethodIDPtr,
      z ? 1 : 0,
    ).check();
  }

  static final _id_setProgress = _class.instanceMethodId(
    r'setProgress',
    r'(I)V',
  );

  static final _setProgress =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final void setProgress(int i)`
  void setProgress(
    int i,
  ) {
    _setProgress(reference.pointer, _id_setProgress as jni$_.JMethodIDPtr, i).check();
  }

  static final _id_setSecondaryProgress = _class.instanceMethodId(
    r'setSecondaryProgress',
    r'(I)V',
  );

  static final _setSecondaryProgress =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final void setSecondaryProgress(int i)`
  void setSecondaryProgress(
    int i,
  ) {
    _setSecondaryProgress(reference.pointer, _id_setSecondaryProgress as jni$_.JMethodIDPtr, i).check();
  }

  static final _id_setVolumeControlStream = _class.instanceMethodId(
    r'setVolumeControlStream',
    r'(I)V',
  );

  static final _setVolumeControlStream =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public final void setVolumeControlStream(int i)`
  void setVolumeControlStream(
    int i,
  ) {
    _setVolumeControlStream(reference.pointer, _id_setVolumeControlStream as jni$_.JMethodIDPtr, i).check();
  }

  static final _id_getVolumeControlStream = _class.instanceMethodId(
    r'getVolumeControlStream',
    r'()I',
  );

  static final _getVolumeControlStream =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public final int getVolumeControlStream()`
  int getVolumeControlStream() {
    return _getVolumeControlStream(reference.pointer, _id_getVolumeControlStream as jni$_.JMethodIDPtr).integer;
  }

  static final _id_setMediaController = _class.instanceMethodId(
    r'setMediaController',
    r'(Landroid/media/session/MediaController;)V',
  );

  static final _setMediaController =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public final void setMediaController(android.media.session.MediaController mediaController)`
  void setMediaController(
    jni$_.JObject? mediaController,
  ) {
    final _$mediaController = mediaController?.reference ?? jni$_.jNullReference;
    _setMediaController(
      reference.pointer,
      _id_setMediaController as jni$_.JMethodIDPtr,
      _$mediaController.pointer,
    ).check();
  }

  static final _id_getMediaController = _class.instanceMethodId(
    r'getMediaController',
    r'()Landroid/media/session/MediaController;',
  );

  static final _getMediaController =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public final android.media.session.MediaController getMediaController()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getMediaController() {
    return _getMediaController(
      reference.pointer,
      _id_getMediaController as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_runOnUiThread = _class.instanceMethodId(
    r'runOnUiThread',
    r'(Ljava/lang/Runnable;)V',
  );

  static final _runOnUiThread =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public final void runOnUiThread(java.lang.Runnable runnable)`
  void runOnUiThread(
    jni$_.JObject? runnable,
  ) {
    final _$runnable = runnable?.reference ?? jni$_.jNullReference;
    _runOnUiThread(reference.pointer, _id_runOnUiThread as jni$_.JMethodIDPtr, _$runnable.pointer).check();
  }

  static final _id_onCreateView = _class.instanceMethodId(
    r'onCreateView',
    r'(Ljava/lang/String;Landroid/content/Context;Landroid/util/AttributeSet;)Landroid/view/View;',
  );

  static final _onCreateView =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public android.view.View onCreateView(java.lang.String string, android.content.Context context, android.util.AttributeSet attributeSet)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? onCreateView(
    jni$_.JString? string,
    Context? context,
    jni$_.JObject? attributeSet,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$context = context?.reference ?? jni$_.jNullReference;
    final _$attributeSet = attributeSet?.reference ?? jni$_.jNullReference;
    return _onCreateView(
      reference.pointer,
      _id_onCreateView as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$context.pointer,
      _$attributeSet.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_onCreateView$1 = _class.instanceMethodId(
    r'onCreateView',
    r'(Landroid/view/View;Ljava/lang/String;Landroid/content/Context;Landroid/util/AttributeSet;)Landroid/view/View;',
  );

  static final _onCreateView$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public android.view.View onCreateView(android.view.View view, java.lang.String string, android.content.Context context, android.util.AttributeSet attributeSet)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? onCreateView$1(
    jni$_.JObject? view,
    jni$_.JString? string,
    Context? context,
    jni$_.JObject? attributeSet,
  ) {
    final _$view = view?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$context = context?.reference ?? jni$_.jNullReference;
    final _$attributeSet = attributeSet?.reference ?? jni$_.jNullReference;
    return _onCreateView$1(
      reference.pointer,
      _id_onCreateView$1 as jni$_.JMethodIDPtr,
      _$view.pointer,
      _$string.pointer,
      _$context.pointer,
      _$attributeSet.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_dump = _class.instanceMethodId(
    r'dump',
    r'(Ljava/lang/String;Ljava/io/FileDescriptor;Ljava/io/PrintWriter;[Ljava/lang/String;)V',
  );

  static final _dump =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void dump(java.lang.String string, java.io.FileDescriptor fileDescriptor, java.io.PrintWriter printWriter, java.lang.String[] strings)`
  void dump(
    jni$_.JString? string,
    jni$_.JObject? fileDescriptor,
    jni$_.JObject? printWriter,
    jni$_.JArray<jni$_.JString?>? strings,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$fileDescriptor = fileDescriptor?.reference ?? jni$_.jNullReference;
    final _$printWriter = printWriter?.reference ?? jni$_.jNullReference;
    final _$strings = strings?.reference ?? jni$_.jNullReference;
    _dump(
      reference.pointer,
      _id_dump as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$fileDescriptor.pointer,
      _$printWriter.pointer,
      _$strings.pointer,
    ).check();
  }

  static final _id_isImmersive = _class.instanceMethodId(
    r'isImmersive',
    r'()Z',
  );

  static final _isImmersive =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean isImmersive()`
  bool isImmersive() {
    return _isImmersive(reference.pointer, _id_isImmersive as jni$_.JMethodIDPtr).boolean;
  }

  static final _id_setTranslucent = _class.instanceMethodId(
    r'setTranslucent',
    r'(Z)Z',
  );

  static final _setTranslucent =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public boolean setTranslucent(boolean z)`
  bool setTranslucent(
    bool z,
  ) {
    return _setTranslucent(reference.pointer, _id_setTranslucent as jni$_.JMethodIDPtr, z ? 1 : 0).boolean;
  }

  static final _id_requestVisibleBehind = _class.instanceMethodId(
    r'requestVisibleBehind',
    r'(Z)Z',
  );

  static final _requestVisibleBehind =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public boolean requestVisibleBehind(boolean z)`
  bool requestVisibleBehind(
    bool z,
  ) {
    return _requestVisibleBehind(reference.pointer, _id_requestVisibleBehind as jni$_.JMethodIDPtr, z ? 1 : 0).boolean;
  }

  static final _id_onVisibleBehindCanceled = _class.instanceMethodId(
    r'onVisibleBehindCanceled',
    r'()V',
  );

  static final _onVisibleBehindCanceled =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void onVisibleBehindCanceled()`
  void onVisibleBehindCanceled() {
    _onVisibleBehindCanceled(reference.pointer, _id_onVisibleBehindCanceled as jni$_.JMethodIDPtr).check();
  }

  static final _id_onEnterAnimationComplete = _class.instanceMethodId(
    r'onEnterAnimationComplete',
    r'()V',
  );

  static final _onEnterAnimationComplete =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void onEnterAnimationComplete()`
  void onEnterAnimationComplete() {
    _onEnterAnimationComplete(reference.pointer, _id_onEnterAnimationComplete as jni$_.JMethodIDPtr).check();
  }

  static final _id_setImmersive = _class.instanceMethodId(
    r'setImmersive',
    r'(Z)V',
  );

  static final _setImmersive =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setImmersive(boolean z)`
  void setImmersive(
    bool z,
  ) {
    _setImmersive(reference.pointer, _id_setImmersive as jni$_.JMethodIDPtr, z ? 1 : 0).check();
  }

  static final _id_setVrModeEnabled = _class.instanceMethodId(
    r'setVrModeEnabled',
    r'(ZLandroid/content/ComponentName;)V',
  );

  static final _setVrModeEnabled =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void setVrModeEnabled(boolean z, android.content.ComponentName componentName)`
  void setVrModeEnabled(
    bool z,
    jni$_.JObject? componentName,
  ) {
    final _$componentName = componentName?.reference ?? jni$_.jNullReference;
    _setVrModeEnabled(
      reference.pointer,
      _id_setVrModeEnabled as jni$_.JMethodIDPtr,
      z ? 1 : 0,
      _$componentName.pointer,
    ).check();
  }

  static final _id_startActionMode = _class.instanceMethodId(
    r'startActionMode',
    r'(Landroid/view/ActionMode$Callback;)Landroid/view/ActionMode;',
  );

  static final _startActionMode =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public android.view.ActionMode startActionMode(android.view.ActionMode$Callback callback)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? startActionMode(
    jni$_.JObject? callback,
  ) {
    final _$callback = callback?.reference ?? jni$_.jNullReference;
    return _startActionMode(
      reference.pointer,
      _id_startActionMode as jni$_.JMethodIDPtr,
      _$callback.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_startActionMode$1 = _class.instanceMethodId(
    r'startActionMode',
    r'(Landroid/view/ActionMode$Callback;I)Landroid/view/ActionMode;',
  );

  static final _startActionMode$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)
          >();

  /// from: `public android.view.ActionMode startActionMode(android.view.ActionMode$Callback callback, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? startActionMode$1(
    jni$_.JObject? callback,
    int i,
  ) {
    final _$callback = callback?.reference ?? jni$_.jNullReference;
    return _startActionMode$1(
      reference.pointer,
      _id_startActionMode$1 as jni$_.JMethodIDPtr,
      _$callback.pointer,
      i,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_onWindowStartingActionMode = _class.instanceMethodId(
    r'onWindowStartingActionMode',
    r'(Landroid/view/ActionMode$Callback;)Landroid/view/ActionMode;',
  );

  static final _onWindowStartingActionMode =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback callback)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? onWindowStartingActionMode(
    jni$_.JObject? callback,
  ) {
    final _$callback = callback?.reference ?? jni$_.jNullReference;
    return _onWindowStartingActionMode(
      reference.pointer,
      _id_onWindowStartingActionMode as jni$_.JMethodIDPtr,
      _$callback.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_onWindowStartingActionMode$1 = _class.instanceMethodId(
    r'onWindowStartingActionMode',
    r'(Landroid/view/ActionMode$Callback;I)Landroid/view/ActionMode;',
  );

  static final _onWindowStartingActionMode$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)
          >();

  /// from: `public android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback callback, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? onWindowStartingActionMode$1(
    jni$_.JObject? callback,
    int i,
  ) {
    final _$callback = callback?.reference ?? jni$_.jNullReference;
    return _onWindowStartingActionMode$1(
      reference.pointer,
      _id_onWindowStartingActionMode$1 as jni$_.JMethodIDPtr,
      _$callback.pointer,
      i,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_onActionModeStarted = _class.instanceMethodId(
    r'onActionModeStarted',
    r'(Landroid/view/ActionMode;)V',
  );

  static final _onActionModeStarted =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void onActionModeStarted(android.view.ActionMode actionMode)`
  void onActionModeStarted(
    jni$_.JObject? actionMode,
  ) {
    final _$actionMode = actionMode?.reference ?? jni$_.jNullReference;
    _onActionModeStarted(
      reference.pointer,
      _id_onActionModeStarted as jni$_.JMethodIDPtr,
      _$actionMode.pointer,
    ).check();
  }

  static final _id_onActionModeFinished = _class.instanceMethodId(
    r'onActionModeFinished',
    r'(Landroid/view/ActionMode;)V',
  );

  static final _onActionModeFinished =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void onActionModeFinished(android.view.ActionMode actionMode)`
  void onActionModeFinished(
    jni$_.JObject? actionMode,
  ) {
    final _$actionMode = actionMode?.reference ?? jni$_.jNullReference;
    _onActionModeFinished(
      reference.pointer,
      _id_onActionModeFinished as jni$_.JMethodIDPtr,
      _$actionMode.pointer,
    ).check();
  }

  static final _id_shouldUpRecreateTask = _class.instanceMethodId(
    r'shouldUpRecreateTask',
    r'(Landroid/content/Intent;)Z',
  );

  static final _shouldUpRecreateTask =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean shouldUpRecreateTask(android.content.Intent intent)`
  bool shouldUpRecreateTask(
    Intent? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    return _shouldUpRecreateTask(
      reference.pointer,
      _id_shouldUpRecreateTask as jni$_.JMethodIDPtr,
      _$intent.pointer,
    ).boolean;
  }

  static final _id_navigateUpTo = _class.instanceMethodId(
    r'navigateUpTo',
    r'(Landroid/content/Intent;)Z',
  );

  static final _navigateUpTo =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean navigateUpTo(android.content.Intent intent)`
  bool navigateUpTo(
    Intent? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    return _navigateUpTo(reference.pointer, _id_navigateUpTo as jni$_.JMethodIDPtr, _$intent.pointer).boolean;
  }

  static final _id_navigateUpToFromChild = _class.instanceMethodId(
    r'navigateUpToFromChild',
    r'(Landroid/app/Activity;Landroid/content/Intent;)Z',
  );

  static final _navigateUpToFromChild =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public boolean navigateUpToFromChild(android.app.Activity activity, android.content.Intent intent)`
  bool navigateUpToFromChild(
    Activity? activity,
    Intent? intent,
  ) {
    final _$activity = activity?.reference ?? jni$_.jNullReference;
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    return _navigateUpToFromChild(
      reference.pointer,
      _id_navigateUpToFromChild as jni$_.JMethodIDPtr,
      _$activity.pointer,
      _$intent.pointer,
    ).boolean;
  }

  static final _id_getParentActivityIntent = _class.instanceMethodId(
    r'getParentActivityIntent',
    r'()Landroid/content/Intent;',
  );

  static final _getParentActivityIntent =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.content.Intent getParentActivityIntent()`
  /// The returned object must be released after use, by calling the [release] method.
  Intent? getParentActivityIntent() {
    return _getParentActivityIntent(
      reference.pointer,
      _id_getParentActivityIntent as jni$_.JMethodIDPtr,
    ).object<Intent?>(const $Intent$NullableType());
  }

  static final _id_setEnterSharedElementCallback = _class.instanceMethodId(
    r'setEnterSharedElementCallback',
    r'(Landroid/app/SharedElementCallback;)V',
  );

  static final _setEnterSharedElementCallback =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void setEnterSharedElementCallback(android.app.SharedElementCallback sharedElementCallback)`
  void setEnterSharedElementCallback(
    jni$_.JObject? sharedElementCallback,
  ) {
    final _$sharedElementCallback = sharedElementCallback?.reference ?? jni$_.jNullReference;
    _setEnterSharedElementCallback(
      reference.pointer,
      _id_setEnterSharedElementCallback as jni$_.JMethodIDPtr,
      _$sharedElementCallback.pointer,
    ).check();
  }

  static final _id_setExitSharedElementCallback = _class.instanceMethodId(
    r'setExitSharedElementCallback',
    r'(Landroid/app/SharedElementCallback;)V',
  );

  static final _setExitSharedElementCallback =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void setExitSharedElementCallback(android.app.SharedElementCallback sharedElementCallback)`
  void setExitSharedElementCallback(
    jni$_.JObject? sharedElementCallback,
  ) {
    final _$sharedElementCallback = sharedElementCallback?.reference ?? jni$_.jNullReference;
    _setExitSharedElementCallback(
      reference.pointer,
      _id_setExitSharedElementCallback as jni$_.JMethodIDPtr,
      _$sharedElementCallback.pointer,
    ).check();
  }

  static final _id_postponeEnterTransition = _class.instanceMethodId(
    r'postponeEnterTransition',
    r'()V',
  );

  static final _postponeEnterTransition =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void postponeEnterTransition()`
  void postponeEnterTransition() {
    _postponeEnterTransition(reference.pointer, _id_postponeEnterTransition as jni$_.JMethodIDPtr).check();
  }

  static final _id_startPostponedEnterTransition = _class.instanceMethodId(
    r'startPostponedEnterTransition',
    r'()V',
  );

  static final _startPostponedEnterTransition =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void startPostponedEnterTransition()`
  void startPostponedEnterTransition() {
    _startPostponedEnterTransition(reference.pointer, _id_startPostponedEnterTransition as jni$_.JMethodIDPtr).check();
  }

  static final _id_requestDragAndDropPermissions = _class.instanceMethodId(
    r'requestDragAndDropPermissions',
    r'(Landroid/view/DragEvent;)Landroid/view/DragAndDropPermissions;',
  );

  static final _requestDragAndDropPermissions =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public android.view.DragAndDropPermissions requestDragAndDropPermissions(android.view.DragEvent dragEvent)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? requestDragAndDropPermissions(
    jni$_.JObject? dragEvent,
  ) {
    final _$dragEvent = dragEvent?.reference ?? jni$_.jNullReference;
    return _requestDragAndDropPermissions(
      reference.pointer,
      _id_requestDragAndDropPermissions as jni$_.JMethodIDPtr,
      _$dragEvent.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_startLockTask = _class.instanceMethodId(
    r'startLockTask',
    r'()V',
  );

  static final _startLockTask =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void startLockTask()`
  void startLockTask() {
    _startLockTask(reference.pointer, _id_startLockTask as jni$_.JMethodIDPtr).check();
  }

  static final _id_stopLockTask = _class.instanceMethodId(
    r'stopLockTask',
    r'()V',
  );

  static final _stopLockTask =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void stopLockTask()`
  void stopLockTask() {
    _stopLockTask(reference.pointer, _id_stopLockTask as jni$_.JMethodIDPtr).check();
  }

  static final _id_showLockTaskEscapeMessage = _class.instanceMethodId(
    r'showLockTaskEscapeMessage',
    r'()V',
  );

  static final _showLockTaskEscapeMessage =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void showLockTaskEscapeMessage()`
  void showLockTaskEscapeMessage() {
    _showLockTaskEscapeMessage(reference.pointer, _id_showLockTaskEscapeMessage as jni$_.JMethodIDPtr).check();
  }

  static final _id_setRecentsScreenshotEnabled = _class.instanceMethodId(
    r'setRecentsScreenshotEnabled',
    r'(Z)V',
  );

  static final _setRecentsScreenshotEnabled =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setRecentsScreenshotEnabled(boolean z)`
  void setRecentsScreenshotEnabled(
    bool z,
  ) {
    _setRecentsScreenshotEnabled(
      reference.pointer,
      _id_setRecentsScreenshotEnabled as jni$_.JMethodIDPtr,
      z ? 1 : 0,
    ).check();
  }

  static final _id_setShowWhenLocked = _class.instanceMethodId(
    r'setShowWhenLocked',
    r'(Z)V',
  );

  static final _setShowWhenLocked =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setShowWhenLocked(boolean z)`
  void setShowWhenLocked(
    bool z,
  ) {
    _setShowWhenLocked(reference.pointer, _id_setShowWhenLocked as jni$_.JMethodIDPtr, z ? 1 : 0).check();
  }

  static final _id_setInheritShowWhenLocked = _class.instanceMethodId(
    r'setInheritShowWhenLocked',
    r'(Z)V',
  );

  static final _setInheritShowWhenLocked =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setInheritShowWhenLocked(boolean z)`
  void setInheritShowWhenLocked(
    bool z,
  ) {
    _setInheritShowWhenLocked(reference.pointer, _id_setInheritShowWhenLocked as jni$_.JMethodIDPtr, z ? 1 : 0).check();
  }

  static final _id_setTurnScreenOn = _class.instanceMethodId(
    r'setTurnScreenOn',
    r'(Z)V',
  );

  static final _setTurnScreenOn =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setTurnScreenOn(boolean z)`
  void setTurnScreenOn(
    bool z,
  ) {
    _setTurnScreenOn(reference.pointer, _id_setTurnScreenOn as jni$_.JMethodIDPtr, z ? 1 : 0).check();
  }

  static final _id_setAllowCrossUidActivitySwitchFromBelow = _class.instanceMethodId(
    r'setAllowCrossUidActivitySwitchFromBelow',
    r'(Z)V',
  );

  static final _setAllowCrossUidActivitySwitchFromBelow =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setAllowCrossUidActivitySwitchFromBelow(boolean z)`
  void setAllowCrossUidActivitySwitchFromBelow(
    bool z,
  ) {
    _setAllowCrossUidActivitySwitchFromBelow(
      reference.pointer,
      _id_setAllowCrossUidActivitySwitchFromBelow as jni$_.JMethodIDPtr,
      z ? 1 : 0,
    ).check();
  }

  static final _id_getOnBackInvokedDispatcher = _class.instanceMethodId(
    r'getOnBackInvokedDispatcher',
    r'()Landroid/window/OnBackInvokedDispatcher;',
  );

  static final _getOnBackInvokedDispatcher =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.window.OnBackInvokedDispatcher getOnBackInvokedDispatcher()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getOnBackInvokedDispatcher() {
    return _getOnBackInvokedDispatcher(
      reference.pointer,
      _id_getOnBackInvokedDispatcher as jni$_.JMethodIDPtr,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_registerScreenCaptureCallback = _class.instanceMethodId(
    r'registerScreenCaptureCallback',
    r'(Ljava/util/concurrent/Executor;Landroid/app/Activity$ScreenCaptureCallback;)V',
  );

  static final _registerScreenCaptureCallback =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void registerScreenCaptureCallback(java.util.concurrent.Executor executor, android.app.Activity$ScreenCaptureCallback screenCaptureCallback)`
  void registerScreenCaptureCallback(
    jni$_.JObject? executor,
    Activity$ScreenCaptureCallback? screenCaptureCallback,
  ) {
    final _$executor = executor?.reference ?? jni$_.jNullReference;
    final _$screenCaptureCallback = screenCaptureCallback?.reference ?? jni$_.jNullReference;
    _registerScreenCaptureCallback(
      reference.pointer,
      _id_registerScreenCaptureCallback as jni$_.JMethodIDPtr,
      _$executor.pointer,
      _$screenCaptureCallback.pointer,
    ).check();
  }

  static final _id_unregisterScreenCaptureCallback = _class.instanceMethodId(
    r'unregisterScreenCaptureCallback',
    r'(Landroid/app/Activity$ScreenCaptureCallback;)V',
  );

  static final _unregisterScreenCaptureCallback =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void unregisterScreenCaptureCallback(android.app.Activity$ScreenCaptureCallback screenCaptureCallback)`
  void unregisterScreenCaptureCallback(
    Activity$ScreenCaptureCallback? screenCaptureCallback,
  ) {
    final _$screenCaptureCallback = screenCaptureCallback?.reference ?? jni$_.jNullReference;
    _unregisterScreenCaptureCallback(
      reference.pointer,
      _id_unregisterScreenCaptureCallback as jni$_.JMethodIDPtr,
      _$screenCaptureCallback.pointer,
    ).check();
  }
}

final class $Activity$NullableType extends jni$_.JObjType<Activity?> {
  @jni$_.internal
  const $Activity$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/app/Activity;';

  @jni$_.internal
  @core$_.override
  Activity? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : Activity.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Activity?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Activity$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Activity$NullableType) && other is $Activity$NullableType;
  }
}

final class $Activity$Type extends jni$_.JObjType<Activity> {
  @jni$_.internal
  const $Activity$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/app/Activity;';

  @jni$_.internal
  @core$_.override
  Activity fromReference(jni$_.JReference reference) => Activity.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Activity?> get nullableType => const $Activity$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Activity$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Activity$Type) && other is $Activity$Type;
  }
}

/// from: `android.net.Uri$Builder`
class Uri$Builder extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<Uri$Builder> $type;

  @jni$_.internal
  Uri$Builder.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/net/Uri$Builder');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $Uri$Builder$NullableType();
  static const type = $Uri$Builder$Type();
  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory Uri$Builder() {
    return Uri$Builder.fromReference(_new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr).reference);
  }

  static final _id_scheme = _class.instanceMethodId(
    r'scheme',
    r'(Ljava/lang/String;)Landroid/net/Uri$Builder;',
  );

  static final _scheme =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public android.net.Uri$Builder scheme(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Uri$Builder? scheme(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _scheme(
      reference.pointer,
      _id_scheme as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<Uri$Builder?>(const $Uri$Builder$NullableType());
  }

  static final _id_opaquePart = _class.instanceMethodId(
    r'opaquePart',
    r'(Ljava/lang/String;)Landroid/net/Uri$Builder;',
  );

  static final _opaquePart =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public android.net.Uri$Builder opaquePart(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Uri$Builder? opaquePart(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _opaquePart(
      reference.pointer,
      _id_opaquePart as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<Uri$Builder?>(const $Uri$Builder$NullableType());
  }

  static final _id_encodedOpaquePart = _class.instanceMethodId(
    r'encodedOpaquePart',
    r'(Ljava/lang/String;)Landroid/net/Uri$Builder;',
  );

  static final _encodedOpaquePart =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public android.net.Uri$Builder encodedOpaquePart(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Uri$Builder? encodedOpaquePart(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _encodedOpaquePart(
      reference.pointer,
      _id_encodedOpaquePart as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<Uri$Builder?>(const $Uri$Builder$NullableType());
  }

  static final _id_authority = _class.instanceMethodId(
    r'authority',
    r'(Ljava/lang/String;)Landroid/net/Uri$Builder;',
  );

  static final _authority =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public android.net.Uri$Builder authority(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Uri$Builder? authority(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _authority(
      reference.pointer,
      _id_authority as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<Uri$Builder?>(const $Uri$Builder$NullableType());
  }

  static final _id_encodedAuthority = _class.instanceMethodId(
    r'encodedAuthority',
    r'(Ljava/lang/String;)Landroid/net/Uri$Builder;',
  );

  static final _encodedAuthority =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public android.net.Uri$Builder encodedAuthority(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Uri$Builder? encodedAuthority(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _encodedAuthority(
      reference.pointer,
      _id_encodedAuthority as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<Uri$Builder?>(const $Uri$Builder$NullableType());
  }

  static final _id_path = _class.instanceMethodId(
    r'path',
    r'(Ljava/lang/String;)Landroid/net/Uri$Builder;',
  );

  static final _path =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public android.net.Uri$Builder path(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Uri$Builder? path(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _path(
      reference.pointer,
      _id_path as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<Uri$Builder?>(const $Uri$Builder$NullableType());
  }

  static final _id_encodedPath = _class.instanceMethodId(
    r'encodedPath',
    r'(Ljava/lang/String;)Landroid/net/Uri$Builder;',
  );

  static final _encodedPath =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public android.net.Uri$Builder encodedPath(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Uri$Builder? encodedPath(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _encodedPath(
      reference.pointer,
      _id_encodedPath as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<Uri$Builder?>(const $Uri$Builder$NullableType());
  }

  static final _id_appendPath = _class.instanceMethodId(
    r'appendPath',
    r'(Ljava/lang/String;)Landroid/net/Uri$Builder;',
  );

  static final _appendPath =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public android.net.Uri$Builder appendPath(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Uri$Builder? appendPath(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _appendPath(
      reference.pointer,
      _id_appendPath as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<Uri$Builder?>(const $Uri$Builder$NullableType());
  }

  static final _id_appendEncodedPath = _class.instanceMethodId(
    r'appendEncodedPath',
    r'(Ljava/lang/String;)Landroid/net/Uri$Builder;',
  );

  static final _appendEncodedPath =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public android.net.Uri$Builder appendEncodedPath(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Uri$Builder? appendEncodedPath(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _appendEncodedPath(
      reference.pointer,
      _id_appendEncodedPath as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<Uri$Builder?>(const $Uri$Builder$NullableType());
  }

  static final _id_query = _class.instanceMethodId(
    r'query',
    r'(Ljava/lang/String;)Landroid/net/Uri$Builder;',
  );

  static final _query =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public android.net.Uri$Builder query(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Uri$Builder? query(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _query(
      reference.pointer,
      _id_query as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<Uri$Builder?>(const $Uri$Builder$NullableType());
  }

  static final _id_encodedQuery = _class.instanceMethodId(
    r'encodedQuery',
    r'(Ljava/lang/String;)Landroid/net/Uri$Builder;',
  );

  static final _encodedQuery =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public android.net.Uri$Builder encodedQuery(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Uri$Builder? encodedQuery(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _encodedQuery(
      reference.pointer,
      _id_encodedQuery as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<Uri$Builder?>(const $Uri$Builder$NullableType());
  }

  static final _id_fragment = _class.instanceMethodId(
    r'fragment',
    r'(Ljava/lang/String;)Landroid/net/Uri$Builder;',
  );

  static final _fragment =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public android.net.Uri$Builder fragment(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Uri$Builder? fragment(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _fragment(
      reference.pointer,
      _id_fragment as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<Uri$Builder?>(const $Uri$Builder$NullableType());
  }

  static final _id_encodedFragment = _class.instanceMethodId(
    r'encodedFragment',
    r'(Ljava/lang/String;)Landroid/net/Uri$Builder;',
  );

  static final _encodedFragment =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public android.net.Uri$Builder encodedFragment(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Uri$Builder? encodedFragment(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _encodedFragment(
      reference.pointer,
      _id_encodedFragment as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<Uri$Builder?>(const $Uri$Builder$NullableType());
  }

  static final _id_appendQueryParameter = _class.instanceMethodId(
    r'appendQueryParameter',
    r'(Ljava/lang/String;Ljava/lang/String;)Landroid/net/Uri$Builder;',
  );

  static final _appendQueryParameter =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public android.net.Uri$Builder appendQueryParameter(java.lang.String string, java.lang.String string1)`
  /// The returned object must be released after use, by calling the [release] method.
  Uri$Builder? appendQueryParameter(
    jni$_.JString? string,
    jni$_.JString? string1,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    return _appendQueryParameter(
      reference.pointer,
      _id_appendQueryParameter as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$string1.pointer,
    ).object<Uri$Builder?>(const $Uri$Builder$NullableType());
  }

  static final _id_clearQuery = _class.instanceMethodId(
    r'clearQuery',
    r'()Landroid/net/Uri$Builder;',
  );

  static final _clearQuery =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.net.Uri$Builder clearQuery()`
  /// The returned object must be released after use, by calling the [release] method.
  Uri$Builder? clearQuery() {
    return _clearQuery(
      reference.pointer,
      _id_clearQuery as jni$_.JMethodIDPtr,
    ).object<Uri$Builder?>(const $Uri$Builder$NullableType());
  }

  static final _id_build = _class.instanceMethodId(
    r'build',
    r'()Landroid/net/Uri;',
  );

  static final _build =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.net.Uri build()`
  /// The returned object must be released after use, by calling the [release] method.
  Uri? build() {
    return _build(reference.pointer, _id_build as jni$_.JMethodIDPtr).object<Uri?>(const $Uri$NullableType());
  }

  static final _id_toString$1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.lang.String toString()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? toString$1() {
    return _toString$1(
      reference.pointer,
      _id_toString$1 as jni$_.JMethodIDPtr,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }
}

final class $Uri$Builder$NullableType extends jni$_.JObjType<Uri$Builder?> {
  @jni$_.internal
  const $Uri$Builder$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/net/Uri$Builder;';

  @jni$_.internal
  @core$_.override
  Uri$Builder? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : Uri$Builder.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Uri$Builder?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Uri$Builder$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Uri$Builder$NullableType) && other is $Uri$Builder$NullableType;
  }
}

final class $Uri$Builder$Type extends jni$_.JObjType<Uri$Builder> {
  @jni$_.internal
  const $Uri$Builder$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/net/Uri$Builder;';

  @jni$_.internal
  @core$_.override
  Uri$Builder fromReference(jni$_.JReference reference) => Uri$Builder.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Uri$Builder?> get nullableType => const $Uri$Builder$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Uri$Builder$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Uri$Builder$Type) && other is $Uri$Builder$Type;
  }
}

/// from: `android.net.Uri`
class Uri extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<Uri> $type;

  @jni$_.internal
  Uri.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/net/Uri');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $Uri$NullableType();
  static const type = $Uri$Type();
  static final _id_CREATOR = _class.staticFieldId(
    r'CREATOR',
    r'Landroid/os/Parcelable$Creator;',
  );

  /// from: `static public final android.os.Parcelable$Creator<android.net.Uri> CREATOR`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JObject? get CREATOR => _id_CREATOR.get(_class, const jni$_.JObjectNullableType());

  static final _id_EMPTY = _class.staticFieldId(
    r'EMPTY',
    r'Landroid/net/Uri;',
  );

  /// from: `static public final android.net.Uri EMPTY`
  /// The returned object must be released after use, by calling the [release] method.
  static Uri? get EMPTY => _id_EMPTY.get(_class, const $Uri$NullableType());

  static final _id_isHierarchical = _class.instanceMethodId(
    r'isHierarchical',
    r'()Z',
  );

  static final _isHierarchical =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract boolean isHierarchical()`
  bool isHierarchical() {
    return _isHierarchical(reference.pointer, _id_isHierarchical as jni$_.JMethodIDPtr).boolean;
  }

  static final _id_isOpaque = _class.instanceMethodId(
    r'isOpaque',
    r'()Z',
  );

  static final _isOpaque =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean isOpaque()`
  bool isOpaque() {
    return _isOpaque(reference.pointer, _id_isOpaque as jni$_.JMethodIDPtr).boolean;
  }

  static final _id_isRelative = _class.instanceMethodId(
    r'isRelative',
    r'()Z',
  );

  static final _isRelative =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract boolean isRelative()`
  bool isRelative() {
    return _isRelative(reference.pointer, _id_isRelative as jni$_.JMethodIDPtr).boolean;
  }

  static final _id_isAbsolute = _class.instanceMethodId(
    r'isAbsolute',
    r'()Z',
  );

  static final _isAbsolute =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public boolean isAbsolute()`
  bool isAbsolute() {
    return _isAbsolute(reference.pointer, _id_isAbsolute as jni$_.JMethodIDPtr).boolean;
  }

  static final _id_getScheme = _class.instanceMethodId(
    r'getScheme',
    r'()Ljava/lang/String;',
  );

  static final _getScheme =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract java.lang.String getScheme()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getScheme() {
    return _getScheme(
      reference.pointer,
      _id_getScheme as jni$_.JMethodIDPtr,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getSchemeSpecificPart = _class.instanceMethodId(
    r'getSchemeSpecificPart',
    r'()Ljava/lang/String;',
  );

  static final _getSchemeSpecificPart =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract java.lang.String getSchemeSpecificPart()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getSchemeSpecificPart() {
    return _getSchemeSpecificPart(
      reference.pointer,
      _id_getSchemeSpecificPart as jni$_.JMethodIDPtr,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getEncodedSchemeSpecificPart = _class.instanceMethodId(
    r'getEncodedSchemeSpecificPart',
    r'()Ljava/lang/String;',
  );

  static final _getEncodedSchemeSpecificPart =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract java.lang.String getEncodedSchemeSpecificPart()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getEncodedSchemeSpecificPart() {
    return _getEncodedSchemeSpecificPart(
      reference.pointer,
      _id_getEncodedSchemeSpecificPart as jni$_.JMethodIDPtr,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getAuthority = _class.instanceMethodId(
    r'getAuthority',
    r'()Ljava/lang/String;',
  );

  static final _getAuthority =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract java.lang.String getAuthority()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getAuthority() {
    return _getAuthority(
      reference.pointer,
      _id_getAuthority as jni$_.JMethodIDPtr,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getEncodedAuthority = _class.instanceMethodId(
    r'getEncodedAuthority',
    r'()Ljava/lang/String;',
  );

  static final _getEncodedAuthority =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract java.lang.String getEncodedAuthority()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getEncodedAuthority() {
    return _getEncodedAuthority(
      reference.pointer,
      _id_getEncodedAuthority as jni$_.JMethodIDPtr,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getUserInfo = _class.instanceMethodId(
    r'getUserInfo',
    r'()Ljava/lang/String;',
  );

  static final _getUserInfo =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract java.lang.String getUserInfo()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getUserInfo() {
    return _getUserInfo(
      reference.pointer,
      _id_getUserInfo as jni$_.JMethodIDPtr,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getEncodedUserInfo = _class.instanceMethodId(
    r'getEncodedUserInfo',
    r'()Ljava/lang/String;',
  );

  static final _getEncodedUserInfo =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract java.lang.String getEncodedUserInfo()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getEncodedUserInfo() {
    return _getEncodedUserInfo(
      reference.pointer,
      _id_getEncodedUserInfo as jni$_.JMethodIDPtr,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getHost = _class.instanceMethodId(
    r'getHost',
    r'()Ljava/lang/String;',
  );

  static final _getHost =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract java.lang.String getHost()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getHost() {
    return _getHost(
      reference.pointer,
      _id_getHost as jni$_.JMethodIDPtr,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getPort = _class.instanceMethodId(
    r'getPort',
    r'()I',
  );

  static final _getPort =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract int getPort()`
  int getPort() {
    return _getPort(reference.pointer, _id_getPort as jni$_.JMethodIDPtr).integer;
  }

  static final _id_getPath = _class.instanceMethodId(
    r'getPath',
    r'()Ljava/lang/String;',
  );

  static final _getPath =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract java.lang.String getPath()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getPath() {
    return _getPath(
      reference.pointer,
      _id_getPath as jni$_.JMethodIDPtr,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getEncodedPath = _class.instanceMethodId(
    r'getEncodedPath',
    r'()Ljava/lang/String;',
  );

  static final _getEncodedPath =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract java.lang.String getEncodedPath()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getEncodedPath() {
    return _getEncodedPath(
      reference.pointer,
      _id_getEncodedPath as jni$_.JMethodIDPtr,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getQuery = _class.instanceMethodId(
    r'getQuery',
    r'()Ljava/lang/String;',
  );

  static final _getQuery =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract java.lang.String getQuery()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getQuery() {
    return _getQuery(
      reference.pointer,
      _id_getQuery as jni$_.JMethodIDPtr,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getEncodedQuery = _class.instanceMethodId(
    r'getEncodedQuery',
    r'()Ljava/lang/String;',
  );

  static final _getEncodedQuery =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract java.lang.String getEncodedQuery()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getEncodedQuery() {
    return _getEncodedQuery(
      reference.pointer,
      _id_getEncodedQuery as jni$_.JMethodIDPtr,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getFragment = _class.instanceMethodId(
    r'getFragment',
    r'()Ljava/lang/String;',
  );

  static final _getFragment =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract java.lang.String getFragment()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getFragment() {
    return _getFragment(
      reference.pointer,
      _id_getFragment as jni$_.JMethodIDPtr,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getEncodedFragment = _class.instanceMethodId(
    r'getEncodedFragment',
    r'()Ljava/lang/String;',
  );

  static final _getEncodedFragment =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract java.lang.String getEncodedFragment()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getEncodedFragment() {
    return _getEncodedFragment(
      reference.pointer,
      _id_getEncodedFragment as jni$_.JMethodIDPtr,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getPathSegments = _class.instanceMethodId(
    r'getPathSegments',
    r'()Ljava/util/List;',
  );

  static final _getPathSegments =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract java.util.List<java.lang.String> getPathSegments()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JList<jni$_.JString?>? getPathSegments() {
    return _getPathSegments(
      reference.pointer,
      _id_getPathSegments as jni$_.JMethodIDPtr,
    ).object<jni$_.JList<jni$_.JString?>?>(const jni$_.JListNullableType<jni$_.JString?>(jni$_.JStringNullableType()));
  }

  static final _id_getLastPathSegment = _class.instanceMethodId(
    r'getLastPathSegment',
    r'()Ljava/lang/String;',
  );

  static final _getLastPathSegment =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract java.lang.String getLastPathSegment()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getLastPathSegment() {
    return _getLastPathSegment(
      reference.pointer,
      _id_getLastPathSegment as jni$_.JMethodIDPtr,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(
    jni$_.JObject? object,
  ) {
    final _$object = object?.reference ?? jni$_.jNullReference;
    return _equals(reference.pointer, _id_equals as jni$_.JMethodIDPtr, _$object.pointer).boolean;
  }

  static final _id_hashCode$1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int hashCode()`
  int hashCode$1() {
    return _hashCode$1(reference.pointer, _id_hashCode$1 as jni$_.JMethodIDPtr).integer;
  }

  static final _id_compareTo = _class.instanceMethodId(
    r'compareTo',
    r'(Landroid/net/Uri;)I',
  );

  static final _compareTo =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public int compareTo(android.net.Uri uri)`
  int compareTo(
    Uri? uri,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    return _compareTo(reference.pointer, _id_compareTo as jni$_.JMethodIDPtr, _$uri.pointer).integer;
  }

  static final _id_toString$1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract java.lang.String toString()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? toString$1() {
    return _toString$1(
      reference.pointer,
      _id_toString$1 as jni$_.JMethodIDPtr,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_buildUpon = _class.instanceMethodId(
    r'buildUpon',
    r'()Landroid/net/Uri$Builder;',
  );

  static final _buildUpon =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public abstract android.net.Uri$Builder buildUpon()`
  /// The returned object must be released after use, by calling the [release] method.
  Uri$Builder? buildUpon() {
    return _buildUpon(
      reference.pointer,
      _id_buildUpon as jni$_.JMethodIDPtr,
    ).object<Uri$Builder?>(const $Uri$Builder$NullableType());
  }

  static final _id_parse = _class.staticMethodId(
    r'parse',
    r'(Ljava/lang/String;)Landroid/net/Uri;',
  );

  static final _parse =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `static public android.net.Uri parse(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static Uri? parse(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _parse(
      _class.reference.pointer,
      _id_parse as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<Uri?>(const $Uri$NullableType());
  }

  static final _id_fromFile = _class.staticMethodId(
    r'fromFile',
    r'(Ljava/io/File;)Landroid/net/Uri;',
  );

  static final _fromFile =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `static public android.net.Uri fromFile(java.io.File file)`
  /// The returned object must be released after use, by calling the [release] method.
  static Uri? fromFile(
    jni$_.JObject? file,
  ) {
    final _$file = file?.reference ?? jni$_.jNullReference;
    return _fromFile(
      _class.reference.pointer,
      _id_fromFile as jni$_.JMethodIDPtr,
      _$file.pointer,
    ).object<Uri?>(const $Uri$NullableType());
  }

  static final _id_fromParts = _class.staticMethodId(
    r'fromParts',
    r'(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/net/Uri;',
  );

  static final _fromParts =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public android.net.Uri fromParts(java.lang.String string, java.lang.String string1, java.lang.String string2)`
  /// The returned object must be released after use, by calling the [release] method.
  static Uri? fromParts(
    jni$_.JString? string,
    jni$_.JString? string1,
    jni$_.JString? string2,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    final _$string2 = string2?.reference ?? jni$_.jNullReference;
    return _fromParts(
      _class.reference.pointer,
      _id_fromParts as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$string1.pointer,
      _$string2.pointer,
    ).object<Uri?>(const $Uri$NullableType());
  }

  static final _id_getQueryParameterNames = _class.instanceMethodId(
    r'getQueryParameterNames',
    r'()Ljava/util/Set;',
  );

  static final _getQueryParameterNames =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.util.Set<java.lang.String> getQueryParameterNames()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JSet<jni$_.JString?>? getQueryParameterNames() {
    return _getQueryParameterNames(
      reference.pointer,
      _id_getQueryParameterNames as jni$_.JMethodIDPtr,
    ).object<jni$_.JSet<jni$_.JString?>?>(const jni$_.JSetNullableType<jni$_.JString?>(jni$_.JStringNullableType()));
  }

  static final _id_getQueryParameters = _class.instanceMethodId(
    r'getQueryParameters',
    r'(Ljava/lang/String;)Ljava/util/List;',
  );

  static final _getQueryParameters =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public java.util.List<java.lang.String> getQueryParameters(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JList<jni$_.JString?>? getQueryParameters(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getQueryParameters(
      reference.pointer,
      _id_getQueryParameters as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<jni$_.JList<jni$_.JString?>?>(const jni$_.JListNullableType<jni$_.JString?>(jni$_.JStringNullableType()));
  }

  static final _id_getQueryParameter = _class.instanceMethodId(
    r'getQueryParameter',
    r'(Ljava/lang/String;)Ljava/lang/String;',
  );

  static final _getQueryParameter =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public java.lang.String getQueryParameter(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getQueryParameter(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getQueryParameter(
      reference.pointer,
      _id_getQueryParameter as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getBooleanQueryParameter = _class.instanceMethodId(
    r'getBooleanQueryParameter',
    r'(Ljava/lang/String;Z)Z',
  );

  static final _getBooleanQueryParameter =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)
          >();

  /// from: `public boolean getBooleanQueryParameter(java.lang.String string, boolean z)`
  bool getBooleanQueryParameter(
    jni$_.JString? string,
    bool z,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getBooleanQueryParameter(
      reference.pointer,
      _id_getBooleanQueryParameter as jni$_.JMethodIDPtr,
      _$string.pointer,
      z ? 1 : 0,
    ).boolean;
  }

  static final _id_normalizeScheme = _class.instanceMethodId(
    r'normalizeScheme',
    r'()Landroid/net/Uri;',
  );

  static final _normalizeScheme =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.net.Uri normalizeScheme()`
  /// The returned object must be released after use, by calling the [release] method.
  Uri? normalizeScheme() {
    return _normalizeScheme(
      reference.pointer,
      _id_normalizeScheme as jni$_.JMethodIDPtr,
    ).object<Uri?>(const $Uri$NullableType());
  }

  static final _id_writeToParcel = _class.staticMethodId(
    r'writeToParcel',
    r'(Landroid/os/Parcel;Landroid/net/Uri;)V',
  );

  static final _writeToParcel =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallStaticVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public void writeToParcel(android.os.Parcel parcel, android.net.Uri uri)`
  static void writeToParcel(
    jni$_.JObject? parcel,
    Uri? uri,
  ) {
    final _$parcel = parcel?.reference ?? jni$_.jNullReference;
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    _writeToParcel(
      _class.reference.pointer,
      _id_writeToParcel as jni$_.JMethodIDPtr,
      _$parcel.pointer,
      _$uri.pointer,
    ).check();
  }

  static final _id_encode = _class.staticMethodId(
    r'encode',
    r'(Ljava/lang/String;)Ljava/lang/String;',
  );

  static final _encode =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `static public java.lang.String encode(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? encode(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _encode(
      _class.reference.pointer,
      _id_encode as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_encode$1 = _class.staticMethodId(
    r'encode',
    r'(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;',
  );

  static final _encode$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public java.lang.String encode(java.lang.String string, java.lang.String string1)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? encode$1(
    jni$_.JString? string,
    jni$_.JString? string1,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    return _encode$1(
      _class.reference.pointer,
      _id_encode$1 as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$string1.pointer,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_decode = _class.staticMethodId(
    r'decode',
    r'(Ljava/lang/String;)Ljava/lang/String;',
  );

  static final _decode =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `static public java.lang.String decode(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? decode(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _decode(
      _class.reference.pointer,
      _id_decode as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_withAppendedPath = _class.staticMethodId(
    r'withAppendedPath',
    r'(Landroid/net/Uri;Ljava/lang/String;)Landroid/net/Uri;',
  );

  static final _withAppendedPath =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public android.net.Uri withAppendedPath(android.net.Uri uri, java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static Uri? withAppendedPath(
    Uri? uri,
    jni$_.JString? string,
  ) {
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _withAppendedPath(
      _class.reference.pointer,
      _id_withAppendedPath as jni$_.JMethodIDPtr,
      _$uri.pointer,
      _$string.pointer,
    ).object<Uri?>(const $Uri$NullableType());
  }

  bool operator <(Uri? uri) {
    return compareTo(uri) < 0;
  }

  bool operator <=(Uri? uri) {
    return compareTo(uri) <= 0;
  }

  bool operator >(Uri? uri) {
    return compareTo(uri) > 0;
  }

  bool operator >=(Uri? uri) {
    return compareTo(uri) >= 0;
  }
}

final class $Uri$NullableType extends jni$_.JObjType<Uri?> {
  @jni$_.internal
  const $Uri$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/net/Uri;';

  @jni$_.internal
  @core$_.override
  Uri? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : Uri.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Uri?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Uri$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Uri$NullableType) && other is $Uri$NullableType;
  }
}

final class $Uri$Type extends jni$_.JObjType<Uri> {
  @jni$_.internal
  const $Uri$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/net/Uri;';

  @jni$_.internal
  @core$_.override
  Uri fromReference(jni$_.JReference reference) => Uri.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Uri?> get nullableType => const $Uri$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Uri$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Uri$Type) && other is $Uri$Type;
  }
}

/// from: `android.provider.ContactsContract$AggregationExceptions`
class ContactsContract$AggregationExceptions extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ContactsContract$AggregationExceptions> $type;

  @jni$_.internal
  ContactsContract$AggregationExceptions.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/provider/ContactsContract$AggregationExceptions');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ContactsContract$AggregationExceptions$NullableType();
  static const type = $ContactsContract$AggregationExceptions$Type();
  static final _id_CONTENT_ITEM_TYPE = _class.staticFieldId(
    r'CONTENT_ITEM_TYPE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CONTENT_ITEM_TYPE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CONTENT_ITEM_TYPE => _id_CONTENT_ITEM_TYPE.get(_class, const jni$_.JStringNullableType());

  static final _id_CONTENT_TYPE = _class.staticFieldId(
    r'CONTENT_TYPE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CONTENT_TYPE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CONTENT_TYPE => _id_CONTENT_TYPE.get(_class, const jni$_.JStringNullableType());

  static final _id_CONTENT_URI = _class.staticFieldId(
    r'CONTENT_URI',
    r'Landroid/net/Uri;',
  );

  /// from: `static public final android.net.Uri CONTENT_URI`
  /// The returned object must be released after use, by calling the [release] method.
  static Uri? get CONTENT_URI => _id_CONTENT_URI.get(_class, const $Uri$NullableType());

  static final _id_RAW_CONTACT_ID1 = _class.staticFieldId(
    r'RAW_CONTACT_ID1',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String RAW_CONTACT_ID1`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get RAW_CONTACT_ID1 => _id_RAW_CONTACT_ID1.get(_class, const jni$_.JStringNullableType());

  static final _id_RAW_CONTACT_ID2 = _class.staticFieldId(
    r'RAW_CONTACT_ID2',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String RAW_CONTACT_ID2`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get RAW_CONTACT_ID2 => _id_RAW_CONTACT_ID2.get(_class, const jni$_.JStringNullableType());

  static final _id_TYPE = _class.staticFieldId(
    r'TYPE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String TYPE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get TYPE => _id_TYPE.get(_class, const jni$_.JStringNullableType());

  /// from: `static public final int TYPE_AUTOMATIC`
  static const TYPE_AUTOMATIC = 0;

  /// from: `static public final int TYPE_KEEP_SEPARATE`
  static const TYPE_KEEP_SEPARATE = 2;

  /// from: `static public final int TYPE_KEEP_TOGETHER`
  static const TYPE_KEEP_TOGETHER = 1;
}

final class $ContactsContract$AggregationExceptions$NullableType
    extends jni$_.JObjType<ContactsContract$AggregationExceptions?> {
  @jni$_.internal
  const $ContactsContract$AggregationExceptions$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$AggregationExceptions;';

  @jni$_.internal
  @core$_.override
  ContactsContract$AggregationExceptions? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : ContactsContract$AggregationExceptions.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$AggregationExceptions?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$AggregationExceptions$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$AggregationExceptions$NullableType) &&
        other is $ContactsContract$AggregationExceptions$NullableType;
  }
}

final class $ContactsContract$AggregationExceptions$Type
    extends jni$_.JObjType<ContactsContract$AggregationExceptions> {
  @jni$_.internal
  const $ContactsContract$AggregationExceptions$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$AggregationExceptions;';

  @jni$_.internal
  @core$_.override
  ContactsContract$AggregationExceptions fromReference(jni$_.JReference reference) =>
      ContactsContract$AggregationExceptions.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$AggregationExceptions?> get nullableType =>
      const $ContactsContract$AggregationExceptions$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$AggregationExceptions$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$AggregationExceptions$Type) &&
        other is $ContactsContract$AggregationExceptions$Type;
  }
}

/// from: `android.provider.ContactsContract$CommonDataKinds$BaseTypes`
class ContactsContract$CommonDataKinds$BaseTypes extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ContactsContract$CommonDataKinds$BaseTypes> $type;

  @jni$_.internal
  ContactsContract$CommonDataKinds$BaseTypes.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/provider/ContactsContract$CommonDataKinds$BaseTypes');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ContactsContract$CommonDataKinds$BaseTypes$NullableType();
  static const type = $ContactsContract$CommonDataKinds$BaseTypes$Type();

  /// from: `static public final int TYPE_CUSTOM`
  static const TYPE_CUSTOM = 0;

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $ContactsContract$CommonDataKinds$BaseTypes> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
    jni$_.NativeFunction<jni$_.JObjectPtr Function(jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>
  >
  _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $ContactsContract$CommonDataKinds$BaseTypes $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'android.provider.ContactsContract$CommonDataKinds$BaseTypes',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory ContactsContract$CommonDataKinds$BaseTypes.implement(
    $ContactsContract$CommonDataKinds$BaseTypes $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return ContactsContract$CommonDataKinds$BaseTypes.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $ContactsContract$CommonDataKinds$BaseTypes {
  factory $ContactsContract$CommonDataKinds$BaseTypes() = _$ContactsContract$CommonDataKinds$BaseTypes;
}

final class _$ContactsContract$CommonDataKinds$BaseTypes with $ContactsContract$CommonDataKinds$BaseTypes {
  _$ContactsContract$CommonDataKinds$BaseTypes();
}

final class $ContactsContract$CommonDataKinds$BaseTypes$NullableType
    extends jni$_.JObjType<ContactsContract$CommonDataKinds$BaseTypes?> {
  @jni$_.internal
  const $ContactsContract$CommonDataKinds$BaseTypes$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$CommonDataKinds$BaseTypes;';

  @jni$_.internal
  @core$_.override
  ContactsContract$CommonDataKinds$BaseTypes? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : ContactsContract$CommonDataKinds$BaseTypes.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$CommonDataKinds$BaseTypes?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$CommonDataKinds$BaseTypes$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$CommonDataKinds$BaseTypes$NullableType) &&
        other is $ContactsContract$CommonDataKinds$BaseTypes$NullableType;
  }
}

final class $ContactsContract$CommonDataKinds$BaseTypes$Type
    extends jni$_.JObjType<ContactsContract$CommonDataKinds$BaseTypes> {
  @jni$_.internal
  const $ContactsContract$CommonDataKinds$BaseTypes$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$CommonDataKinds$BaseTypes;';

  @jni$_.internal
  @core$_.override
  ContactsContract$CommonDataKinds$BaseTypes fromReference(jni$_.JReference reference) =>
      ContactsContract$CommonDataKinds$BaseTypes.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$CommonDataKinds$BaseTypes?> get nullableType =>
      const $ContactsContract$CommonDataKinds$BaseTypes$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$CommonDataKinds$BaseTypes$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$CommonDataKinds$BaseTypes$Type) &&
        other is $ContactsContract$CommonDataKinds$BaseTypes$Type;
  }
}

/// from: `android.provider.ContactsContract$CommonDataKinds$Callable`
class ContactsContract$CommonDataKinds$Callable extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ContactsContract$CommonDataKinds$Callable> $type;

  @jni$_.internal
  ContactsContract$CommonDataKinds$Callable.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/provider/ContactsContract$CommonDataKinds$Callable');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ContactsContract$CommonDataKinds$Callable$NullableType();
  static const type = $ContactsContract$CommonDataKinds$Callable$Type();
  static final _id_CONTENT_FILTER_URI = _class.staticFieldId(
    r'CONTENT_FILTER_URI',
    r'Landroid/net/Uri;',
  );

  /// from: `static public final android.net.Uri CONTENT_FILTER_URI`
  /// The returned object must be released after use, by calling the [release] method.
  static Uri? get CONTENT_FILTER_URI => _id_CONTENT_FILTER_URI.get(_class, const $Uri$NullableType());

  static final _id_CONTENT_URI = _class.staticFieldId(
    r'CONTENT_URI',
    r'Landroid/net/Uri;',
  );

  /// from: `static public final android.net.Uri CONTENT_URI`
  /// The returned object must be released after use, by calling the [release] method.
  static Uri? get CONTENT_URI => _id_CONTENT_URI.get(_class, const $Uri$NullableType());

  static final _id_ENTERPRISE_CONTENT_FILTER_URI = _class.staticFieldId(
    r'ENTERPRISE_CONTENT_FILTER_URI',
    r'Landroid/net/Uri;',
  );

  /// from: `static public final android.net.Uri ENTERPRISE_CONTENT_FILTER_URI`
  /// The returned object must be released after use, by calling the [release] method.
  static Uri? get ENTERPRISE_CONTENT_FILTER_URI =>
      _id_ENTERPRISE_CONTENT_FILTER_URI.get(_class, const $Uri$NullableType());

  static final _id_EXTRA_ADDRESS_BOOK_INDEX = _class.staticFieldId(
    r'EXTRA_ADDRESS_BOOK_INDEX',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ADDRESS_BOOK_INDEX`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ADDRESS_BOOK_INDEX =>
      _id_EXTRA_ADDRESS_BOOK_INDEX.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ADDRESS_BOOK_INDEX_COUNTS = _class.staticFieldId(
    r'EXTRA_ADDRESS_BOOK_INDEX_COUNTS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ADDRESS_BOOK_INDEX_COUNTS =>
      _id_EXTRA_ADDRESS_BOOK_INDEX_COUNTS.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ADDRESS_BOOK_INDEX_TITLES = _class.staticFieldId(
    r'EXTRA_ADDRESS_BOOK_INDEX_TITLES',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ADDRESS_BOOK_INDEX_TITLES =>
      _id_EXTRA_ADDRESS_BOOK_INDEX_TITLES.get(_class, const jni$_.JStringNullableType());

  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory ContactsContract$CommonDataKinds$Callable() {
    return ContactsContract$CommonDataKinds$Callable.fromReference(
      _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr).reference,
    );
  }
}

final class $ContactsContract$CommonDataKinds$Callable$NullableType
    extends jni$_.JObjType<ContactsContract$CommonDataKinds$Callable?> {
  @jni$_.internal
  const $ContactsContract$CommonDataKinds$Callable$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$CommonDataKinds$Callable;';

  @jni$_.internal
  @core$_.override
  ContactsContract$CommonDataKinds$Callable? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : ContactsContract$CommonDataKinds$Callable.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$CommonDataKinds$Callable?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$CommonDataKinds$Callable$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$CommonDataKinds$Callable$NullableType) &&
        other is $ContactsContract$CommonDataKinds$Callable$NullableType;
  }
}

final class $ContactsContract$CommonDataKinds$Callable$Type
    extends jni$_.JObjType<ContactsContract$CommonDataKinds$Callable> {
  @jni$_.internal
  const $ContactsContract$CommonDataKinds$Callable$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$CommonDataKinds$Callable;';

  @jni$_.internal
  @core$_.override
  ContactsContract$CommonDataKinds$Callable fromReference(jni$_.JReference reference) =>
      ContactsContract$CommonDataKinds$Callable.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$CommonDataKinds$Callable?> get nullableType =>
      const $ContactsContract$CommonDataKinds$Callable$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$CommonDataKinds$Callable$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$CommonDataKinds$Callable$Type) &&
        other is $ContactsContract$CommonDataKinds$Callable$Type;
  }
}

/// from: `android.provider.ContactsContract$CommonDataKinds$Contactables`
class ContactsContract$CommonDataKinds$Contactables extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ContactsContract$CommonDataKinds$Contactables> $type;

  @jni$_.internal
  ContactsContract$CommonDataKinds$Contactables.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/provider/ContactsContract$CommonDataKinds$Contactables');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ContactsContract$CommonDataKinds$Contactables$NullableType();
  static const type = $ContactsContract$CommonDataKinds$Contactables$Type();
  static final _id_CONTENT_FILTER_URI = _class.staticFieldId(
    r'CONTENT_FILTER_URI',
    r'Landroid/net/Uri;',
  );

  /// from: `static public final android.net.Uri CONTENT_FILTER_URI`
  /// The returned object must be released after use, by calling the [release] method.
  static Uri? get CONTENT_FILTER_URI => _id_CONTENT_FILTER_URI.get(_class, const $Uri$NullableType());

  static final _id_CONTENT_URI = _class.staticFieldId(
    r'CONTENT_URI',
    r'Landroid/net/Uri;',
  );

  /// from: `static public final android.net.Uri CONTENT_URI`
  /// The returned object must be released after use, by calling the [release] method.
  static Uri? get CONTENT_URI => _id_CONTENT_URI.get(_class, const $Uri$NullableType());

  static final _id_EXTRA_ADDRESS_BOOK_INDEX = _class.staticFieldId(
    r'EXTRA_ADDRESS_BOOK_INDEX',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ADDRESS_BOOK_INDEX`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ADDRESS_BOOK_INDEX =>
      _id_EXTRA_ADDRESS_BOOK_INDEX.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ADDRESS_BOOK_INDEX_COUNTS = _class.staticFieldId(
    r'EXTRA_ADDRESS_BOOK_INDEX_COUNTS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ADDRESS_BOOK_INDEX_COUNTS =>
      _id_EXTRA_ADDRESS_BOOK_INDEX_COUNTS.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ADDRESS_BOOK_INDEX_TITLES = _class.staticFieldId(
    r'EXTRA_ADDRESS_BOOK_INDEX_TITLES',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ADDRESS_BOOK_INDEX_TITLES =>
      _id_EXTRA_ADDRESS_BOOK_INDEX_TITLES.get(_class, const jni$_.JStringNullableType());

  static final _id_VISIBLE_CONTACTS_ONLY = _class.staticFieldId(
    r'VISIBLE_CONTACTS_ONLY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String VISIBLE_CONTACTS_ONLY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get VISIBLE_CONTACTS_ONLY =>
      _id_VISIBLE_CONTACTS_ONLY.get(_class, const jni$_.JStringNullableType());

  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory ContactsContract$CommonDataKinds$Contactables() {
    return ContactsContract$CommonDataKinds$Contactables.fromReference(
      _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr).reference,
    );
  }
}

final class $ContactsContract$CommonDataKinds$Contactables$NullableType
    extends jni$_.JObjType<ContactsContract$CommonDataKinds$Contactables?> {
  @jni$_.internal
  const $ContactsContract$CommonDataKinds$Contactables$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$CommonDataKinds$Contactables;';

  @jni$_.internal
  @core$_.override
  ContactsContract$CommonDataKinds$Contactables? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : ContactsContract$CommonDataKinds$Contactables.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$CommonDataKinds$Contactables?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$CommonDataKinds$Contactables$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$CommonDataKinds$Contactables$NullableType) &&
        other is $ContactsContract$CommonDataKinds$Contactables$NullableType;
  }
}

final class $ContactsContract$CommonDataKinds$Contactables$Type
    extends jni$_.JObjType<ContactsContract$CommonDataKinds$Contactables> {
  @jni$_.internal
  const $ContactsContract$CommonDataKinds$Contactables$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$CommonDataKinds$Contactables;';

  @jni$_.internal
  @core$_.override
  ContactsContract$CommonDataKinds$Contactables fromReference(jni$_.JReference reference) =>
      ContactsContract$CommonDataKinds$Contactables.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$CommonDataKinds$Contactables?> get nullableType =>
      const $ContactsContract$CommonDataKinds$Contactables$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$CommonDataKinds$Contactables$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$CommonDataKinds$Contactables$Type) &&
        other is $ContactsContract$CommonDataKinds$Contactables$Type;
  }
}

/// from: `android.provider.ContactsContract$CommonDataKinds$Email`
class ContactsContract$CommonDataKinds$Email extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ContactsContract$CommonDataKinds$Email> $type;

  @jni$_.internal
  ContactsContract$CommonDataKinds$Email.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/provider/ContactsContract$CommonDataKinds$Email');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ContactsContract$CommonDataKinds$Email$NullableType();
  static const type = $ContactsContract$CommonDataKinds$Email$Type();
  static final _id_ADDRESS = _class.staticFieldId(
    r'ADDRESS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ADDRESS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ADDRESS => _id_ADDRESS.get(_class, const jni$_.JStringNullableType());

  static final _id_CONTENT_FILTER_URI = _class.staticFieldId(
    r'CONTENT_FILTER_URI',
    r'Landroid/net/Uri;',
  );

  /// from: `static public final android.net.Uri CONTENT_FILTER_URI`
  /// The returned object must be released after use, by calling the [release] method.
  static Uri? get CONTENT_FILTER_URI => _id_CONTENT_FILTER_URI.get(_class, const $Uri$NullableType());

  static final _id_CONTENT_ITEM_TYPE = _class.staticFieldId(
    r'CONTENT_ITEM_TYPE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CONTENT_ITEM_TYPE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CONTENT_ITEM_TYPE => _id_CONTENT_ITEM_TYPE.get(_class, const jni$_.JStringNullableType());

  static final _id_CONTENT_LOOKUP_URI = _class.staticFieldId(
    r'CONTENT_LOOKUP_URI',
    r'Landroid/net/Uri;',
  );

  /// from: `static public final android.net.Uri CONTENT_LOOKUP_URI`
  /// The returned object must be released after use, by calling the [release] method.
  static Uri? get CONTENT_LOOKUP_URI => _id_CONTENT_LOOKUP_URI.get(_class, const $Uri$NullableType());

  static final _id_CONTENT_TYPE = _class.staticFieldId(
    r'CONTENT_TYPE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CONTENT_TYPE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CONTENT_TYPE => _id_CONTENT_TYPE.get(_class, const jni$_.JStringNullableType());

  static final _id_CONTENT_URI = _class.staticFieldId(
    r'CONTENT_URI',
    r'Landroid/net/Uri;',
  );

  /// from: `static public final android.net.Uri CONTENT_URI`
  /// The returned object must be released after use, by calling the [release] method.
  static Uri? get CONTENT_URI => _id_CONTENT_URI.get(_class, const $Uri$NullableType());

  static final _id_DISPLAY_NAME = _class.staticFieldId(
    r'DISPLAY_NAME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String DISPLAY_NAME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get DISPLAY_NAME => _id_DISPLAY_NAME.get(_class, const jni$_.JStringNullableType());

  static final _id_ENTERPRISE_CONTENT_FILTER_URI = _class.staticFieldId(
    r'ENTERPRISE_CONTENT_FILTER_URI',
    r'Landroid/net/Uri;',
  );

  /// from: `static public final android.net.Uri ENTERPRISE_CONTENT_FILTER_URI`
  /// The returned object must be released after use, by calling the [release] method.
  static Uri? get ENTERPRISE_CONTENT_FILTER_URI =>
      _id_ENTERPRISE_CONTENT_FILTER_URI.get(_class, const $Uri$NullableType());

  static final _id_ENTERPRISE_CONTENT_LOOKUP_URI = _class.staticFieldId(
    r'ENTERPRISE_CONTENT_LOOKUP_URI',
    r'Landroid/net/Uri;',
  );

  /// from: `static public final android.net.Uri ENTERPRISE_CONTENT_LOOKUP_URI`
  /// The returned object must be released after use, by calling the [release] method.
  static Uri? get ENTERPRISE_CONTENT_LOOKUP_URI =>
      _id_ENTERPRISE_CONTENT_LOOKUP_URI.get(_class, const $Uri$NullableType());

  static final _id_EXTRA_ADDRESS_BOOK_INDEX = _class.staticFieldId(
    r'EXTRA_ADDRESS_BOOK_INDEX',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ADDRESS_BOOK_INDEX`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ADDRESS_BOOK_INDEX =>
      _id_EXTRA_ADDRESS_BOOK_INDEX.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ADDRESS_BOOK_INDEX_COUNTS = _class.staticFieldId(
    r'EXTRA_ADDRESS_BOOK_INDEX_COUNTS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ADDRESS_BOOK_INDEX_COUNTS =>
      _id_EXTRA_ADDRESS_BOOK_INDEX_COUNTS.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ADDRESS_BOOK_INDEX_TITLES = _class.staticFieldId(
    r'EXTRA_ADDRESS_BOOK_INDEX_TITLES',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ADDRESS_BOOK_INDEX_TITLES =>
      _id_EXTRA_ADDRESS_BOOK_INDEX_TITLES.get(_class, const jni$_.JStringNullableType());

  /// from: `static public final int TYPE_HOME`
  static const TYPE_HOME = 1;

  /// from: `static public final int TYPE_MOBILE`
  static const TYPE_MOBILE = 4;

  /// from: `static public final int TYPE_OTHER`
  static const TYPE_OTHER = 3;

  /// from: `static public final int TYPE_WORK`
  static const TYPE_WORK = 2;
  static final _id_getTypeLabelResource = _class.staticMethodId(
    r'getTypeLabelResource',
    r'(I)I',
  );

  static final _getTypeLabelResource =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallStaticIntMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `static public int getTypeLabelResource(int i)`
  static int getTypeLabelResource(
    int i,
  ) {
    return _getTypeLabelResource(_class.reference.pointer, _id_getTypeLabelResource as jni$_.JMethodIDPtr, i).integer;
  }

  static final _id_getTypeLabel = _class.staticMethodId(
    r'getTypeLabel',
    r'(Landroid/content/res/Resources;ILjava/lang/CharSequence;)Ljava/lang/CharSequence;',
  );

  static final _getTypeLabel =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public java.lang.CharSequence getTypeLabel(android.content.res.Resources resources, int i, java.lang.CharSequence charSequence)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JObject? getTypeLabel(
    jni$_.JObject? resources,
    int i,
    jni$_.JObject? charSequence,
  ) {
    final _$resources = resources?.reference ?? jni$_.jNullReference;
    final _$charSequence = charSequence?.reference ?? jni$_.jNullReference;
    return _getTypeLabel(
      _class.reference.pointer,
      _id_getTypeLabel as jni$_.JMethodIDPtr,
      _$resources.pointer,
      i,
      _$charSequence.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }
}

final class $ContactsContract$CommonDataKinds$Email$NullableType
    extends jni$_.JObjType<ContactsContract$CommonDataKinds$Email?> {
  @jni$_.internal
  const $ContactsContract$CommonDataKinds$Email$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$CommonDataKinds$Email;';

  @jni$_.internal
  @core$_.override
  ContactsContract$CommonDataKinds$Email? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : ContactsContract$CommonDataKinds$Email.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$CommonDataKinds$Email?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$CommonDataKinds$Email$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$CommonDataKinds$Email$NullableType) &&
        other is $ContactsContract$CommonDataKinds$Email$NullableType;
  }
}

final class $ContactsContract$CommonDataKinds$Email$Type
    extends jni$_.JObjType<ContactsContract$CommonDataKinds$Email> {
  @jni$_.internal
  const $ContactsContract$CommonDataKinds$Email$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$CommonDataKinds$Email;';

  @jni$_.internal
  @core$_.override
  ContactsContract$CommonDataKinds$Email fromReference(jni$_.JReference reference) =>
      ContactsContract$CommonDataKinds$Email.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$CommonDataKinds$Email?> get nullableType =>
      const $ContactsContract$CommonDataKinds$Email$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$CommonDataKinds$Email$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$CommonDataKinds$Email$Type) &&
        other is $ContactsContract$CommonDataKinds$Email$Type;
  }
}

/// from: `android.provider.ContactsContract$CommonDataKinds$Event`
class ContactsContract$CommonDataKinds$Event extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ContactsContract$CommonDataKinds$Event> $type;

  @jni$_.internal
  ContactsContract$CommonDataKinds$Event.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/provider/ContactsContract$CommonDataKinds$Event');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ContactsContract$CommonDataKinds$Event$NullableType();
  static const type = $ContactsContract$CommonDataKinds$Event$Type();
  static final _id_CONTENT_ITEM_TYPE = _class.staticFieldId(
    r'CONTENT_ITEM_TYPE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CONTENT_ITEM_TYPE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CONTENT_ITEM_TYPE => _id_CONTENT_ITEM_TYPE.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ADDRESS_BOOK_INDEX = _class.staticFieldId(
    r'EXTRA_ADDRESS_BOOK_INDEX',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ADDRESS_BOOK_INDEX`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ADDRESS_BOOK_INDEX =>
      _id_EXTRA_ADDRESS_BOOK_INDEX.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ADDRESS_BOOK_INDEX_COUNTS = _class.staticFieldId(
    r'EXTRA_ADDRESS_BOOK_INDEX_COUNTS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ADDRESS_BOOK_INDEX_COUNTS =>
      _id_EXTRA_ADDRESS_BOOK_INDEX_COUNTS.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ADDRESS_BOOK_INDEX_TITLES = _class.staticFieldId(
    r'EXTRA_ADDRESS_BOOK_INDEX_TITLES',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ADDRESS_BOOK_INDEX_TITLES =>
      _id_EXTRA_ADDRESS_BOOK_INDEX_TITLES.get(_class, const jni$_.JStringNullableType());

  static final _id_START_DATE = _class.staticFieldId(
    r'START_DATE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String START_DATE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get START_DATE => _id_START_DATE.get(_class, const jni$_.JStringNullableType());

  /// from: `static public final int TYPE_ANNIVERSARY`
  static const TYPE_ANNIVERSARY = 1;

  /// from: `static public final int TYPE_BIRTHDAY`
  static const TYPE_BIRTHDAY = 3;

  /// from: `static public final int TYPE_OTHER`
  static const TYPE_OTHER = 2;
  static final _id_getTypeResource = _class.staticMethodId(
    r'getTypeResource',
    r'(Ljava/lang/Integer;)I',
  );

  static final _getTypeResource =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallStaticIntMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `static public int getTypeResource(java.lang.Integer integer)`
  static int getTypeResource(
    jni$_.JInteger? integer,
  ) {
    final _$integer = integer?.reference ?? jni$_.jNullReference;
    return _getTypeResource(
      _class.reference.pointer,
      _id_getTypeResource as jni$_.JMethodIDPtr,
      _$integer.pointer,
    ).integer;
  }

  static final _id_getTypeLabel = _class.staticMethodId(
    r'getTypeLabel',
    r'(Landroid/content/res/Resources;ILjava/lang/CharSequence;)Ljava/lang/CharSequence;',
  );

  static final _getTypeLabel =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public java.lang.CharSequence getTypeLabel(android.content.res.Resources resources, int i, java.lang.CharSequence charSequence)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JObject? getTypeLabel(
    jni$_.JObject? resources,
    int i,
    jni$_.JObject? charSequence,
  ) {
    final _$resources = resources?.reference ?? jni$_.jNullReference;
    final _$charSequence = charSequence?.reference ?? jni$_.jNullReference;
    return _getTypeLabel(
      _class.reference.pointer,
      _id_getTypeLabel as jni$_.JMethodIDPtr,
      _$resources.pointer,
      i,
      _$charSequence.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }
}

final class $ContactsContract$CommonDataKinds$Event$NullableType
    extends jni$_.JObjType<ContactsContract$CommonDataKinds$Event?> {
  @jni$_.internal
  const $ContactsContract$CommonDataKinds$Event$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$CommonDataKinds$Event;';

  @jni$_.internal
  @core$_.override
  ContactsContract$CommonDataKinds$Event? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : ContactsContract$CommonDataKinds$Event.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$CommonDataKinds$Event?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$CommonDataKinds$Event$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$CommonDataKinds$Event$NullableType) &&
        other is $ContactsContract$CommonDataKinds$Event$NullableType;
  }
}

final class $ContactsContract$CommonDataKinds$Event$Type
    extends jni$_.JObjType<ContactsContract$CommonDataKinds$Event> {
  @jni$_.internal
  const $ContactsContract$CommonDataKinds$Event$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$CommonDataKinds$Event;';

  @jni$_.internal
  @core$_.override
  ContactsContract$CommonDataKinds$Event fromReference(jni$_.JReference reference) =>
      ContactsContract$CommonDataKinds$Event.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$CommonDataKinds$Event?> get nullableType =>
      const $ContactsContract$CommonDataKinds$Event$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$CommonDataKinds$Event$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$CommonDataKinds$Event$Type) &&
        other is $ContactsContract$CommonDataKinds$Event$Type;
  }
}

/// from: `android.provider.ContactsContract$CommonDataKinds$GroupMembership`
class ContactsContract$CommonDataKinds$GroupMembership extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ContactsContract$CommonDataKinds$GroupMembership> $type;

  @jni$_.internal
  ContactsContract$CommonDataKinds$GroupMembership.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/provider/ContactsContract$CommonDataKinds$GroupMembership');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ContactsContract$CommonDataKinds$GroupMembership$NullableType();
  static const type = $ContactsContract$CommonDataKinds$GroupMembership$Type();
  static final _id_CONTENT_ITEM_TYPE = _class.staticFieldId(
    r'CONTENT_ITEM_TYPE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CONTENT_ITEM_TYPE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CONTENT_ITEM_TYPE => _id_CONTENT_ITEM_TYPE.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ADDRESS_BOOK_INDEX = _class.staticFieldId(
    r'EXTRA_ADDRESS_BOOK_INDEX',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ADDRESS_BOOK_INDEX`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ADDRESS_BOOK_INDEX =>
      _id_EXTRA_ADDRESS_BOOK_INDEX.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ADDRESS_BOOK_INDEX_COUNTS = _class.staticFieldId(
    r'EXTRA_ADDRESS_BOOK_INDEX_COUNTS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ADDRESS_BOOK_INDEX_COUNTS =>
      _id_EXTRA_ADDRESS_BOOK_INDEX_COUNTS.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ADDRESS_BOOK_INDEX_TITLES = _class.staticFieldId(
    r'EXTRA_ADDRESS_BOOK_INDEX_TITLES',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ADDRESS_BOOK_INDEX_TITLES =>
      _id_EXTRA_ADDRESS_BOOK_INDEX_TITLES.get(_class, const jni$_.JStringNullableType());

  static final _id_GROUP_ROW_ID = _class.staticFieldId(
    r'GROUP_ROW_ID',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String GROUP_ROW_ID`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get GROUP_ROW_ID => _id_GROUP_ROW_ID.get(_class, const jni$_.JStringNullableType());

  static final _id_GROUP_SOURCE_ID = _class.staticFieldId(
    r'GROUP_SOURCE_ID',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String GROUP_SOURCE_ID`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get GROUP_SOURCE_ID => _id_GROUP_SOURCE_ID.get(_class, const jni$_.JStringNullableType());
}

final class $ContactsContract$CommonDataKinds$GroupMembership$NullableType
    extends jni$_.JObjType<ContactsContract$CommonDataKinds$GroupMembership?> {
  @jni$_.internal
  const $ContactsContract$CommonDataKinds$GroupMembership$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$CommonDataKinds$GroupMembership;';

  @jni$_.internal
  @core$_.override
  ContactsContract$CommonDataKinds$GroupMembership? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : ContactsContract$CommonDataKinds$GroupMembership.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$CommonDataKinds$GroupMembership?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$CommonDataKinds$GroupMembership$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$CommonDataKinds$GroupMembership$NullableType) &&
        other is $ContactsContract$CommonDataKinds$GroupMembership$NullableType;
  }
}

final class $ContactsContract$CommonDataKinds$GroupMembership$Type
    extends jni$_.JObjType<ContactsContract$CommonDataKinds$GroupMembership> {
  @jni$_.internal
  const $ContactsContract$CommonDataKinds$GroupMembership$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$CommonDataKinds$GroupMembership;';

  @jni$_.internal
  @core$_.override
  ContactsContract$CommonDataKinds$GroupMembership fromReference(jni$_.JReference reference) =>
      ContactsContract$CommonDataKinds$GroupMembership.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$CommonDataKinds$GroupMembership?> get nullableType =>
      const $ContactsContract$CommonDataKinds$GroupMembership$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$CommonDataKinds$GroupMembership$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$CommonDataKinds$GroupMembership$Type) &&
        other is $ContactsContract$CommonDataKinds$GroupMembership$Type;
  }
}

/// from: `android.provider.ContactsContract$CommonDataKinds$Identity`
class ContactsContract$CommonDataKinds$Identity extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ContactsContract$CommonDataKinds$Identity> $type;

  @jni$_.internal
  ContactsContract$CommonDataKinds$Identity.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/provider/ContactsContract$CommonDataKinds$Identity');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ContactsContract$CommonDataKinds$Identity$NullableType();
  static const type = $ContactsContract$CommonDataKinds$Identity$Type();
  static final _id_CONTENT_ITEM_TYPE = _class.staticFieldId(
    r'CONTENT_ITEM_TYPE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CONTENT_ITEM_TYPE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CONTENT_ITEM_TYPE => _id_CONTENT_ITEM_TYPE.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ADDRESS_BOOK_INDEX = _class.staticFieldId(
    r'EXTRA_ADDRESS_BOOK_INDEX',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ADDRESS_BOOK_INDEX`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ADDRESS_BOOK_INDEX =>
      _id_EXTRA_ADDRESS_BOOK_INDEX.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ADDRESS_BOOK_INDEX_COUNTS = _class.staticFieldId(
    r'EXTRA_ADDRESS_BOOK_INDEX_COUNTS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ADDRESS_BOOK_INDEX_COUNTS =>
      _id_EXTRA_ADDRESS_BOOK_INDEX_COUNTS.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ADDRESS_BOOK_INDEX_TITLES = _class.staticFieldId(
    r'EXTRA_ADDRESS_BOOK_INDEX_TITLES',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ADDRESS_BOOK_INDEX_TITLES =>
      _id_EXTRA_ADDRESS_BOOK_INDEX_TITLES.get(_class, const jni$_.JStringNullableType());

  static final _id_IDENTITY = _class.staticFieldId(
    r'IDENTITY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String IDENTITY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get IDENTITY => _id_IDENTITY.get(_class, const jni$_.JStringNullableType());

  static final _id_NAMESPACE = _class.staticFieldId(
    r'NAMESPACE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String NAMESPACE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get NAMESPACE => _id_NAMESPACE.get(_class, const jni$_.JStringNullableType());
}

final class $ContactsContract$CommonDataKinds$Identity$NullableType
    extends jni$_.JObjType<ContactsContract$CommonDataKinds$Identity?> {
  @jni$_.internal
  const $ContactsContract$CommonDataKinds$Identity$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$CommonDataKinds$Identity;';

  @jni$_.internal
  @core$_.override
  ContactsContract$CommonDataKinds$Identity? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : ContactsContract$CommonDataKinds$Identity.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$CommonDataKinds$Identity?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$CommonDataKinds$Identity$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$CommonDataKinds$Identity$NullableType) &&
        other is $ContactsContract$CommonDataKinds$Identity$NullableType;
  }
}

final class $ContactsContract$CommonDataKinds$Identity$Type
    extends jni$_.JObjType<ContactsContract$CommonDataKinds$Identity> {
  @jni$_.internal
  const $ContactsContract$CommonDataKinds$Identity$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$CommonDataKinds$Identity;';

  @jni$_.internal
  @core$_.override
  ContactsContract$CommonDataKinds$Identity fromReference(jni$_.JReference reference) =>
      ContactsContract$CommonDataKinds$Identity.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$CommonDataKinds$Identity?> get nullableType =>
      const $ContactsContract$CommonDataKinds$Identity$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$CommonDataKinds$Identity$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$CommonDataKinds$Identity$Type) &&
        other is $ContactsContract$CommonDataKinds$Identity$Type;
  }
}

/// from: `android.provider.ContactsContract$CommonDataKinds$Im`
class ContactsContract$CommonDataKinds$Im extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ContactsContract$CommonDataKinds$Im> $type;

  @jni$_.internal
  ContactsContract$CommonDataKinds$Im.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/provider/ContactsContract$CommonDataKinds$Im');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ContactsContract$CommonDataKinds$Im$NullableType();
  static const type = $ContactsContract$CommonDataKinds$Im$Type();
  static final _id_CONTENT_ITEM_TYPE = _class.staticFieldId(
    r'CONTENT_ITEM_TYPE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CONTENT_ITEM_TYPE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CONTENT_ITEM_TYPE => _id_CONTENT_ITEM_TYPE.get(_class, const jni$_.JStringNullableType());

  static final _id_CUSTOM_PROTOCOL = _class.staticFieldId(
    r'CUSTOM_PROTOCOL',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CUSTOM_PROTOCOL`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CUSTOM_PROTOCOL => _id_CUSTOM_PROTOCOL.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ADDRESS_BOOK_INDEX = _class.staticFieldId(
    r'EXTRA_ADDRESS_BOOK_INDEX',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ADDRESS_BOOK_INDEX`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ADDRESS_BOOK_INDEX =>
      _id_EXTRA_ADDRESS_BOOK_INDEX.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ADDRESS_BOOK_INDEX_COUNTS = _class.staticFieldId(
    r'EXTRA_ADDRESS_BOOK_INDEX_COUNTS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ADDRESS_BOOK_INDEX_COUNTS =>
      _id_EXTRA_ADDRESS_BOOK_INDEX_COUNTS.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ADDRESS_BOOK_INDEX_TITLES = _class.staticFieldId(
    r'EXTRA_ADDRESS_BOOK_INDEX_TITLES',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ADDRESS_BOOK_INDEX_TITLES =>
      _id_EXTRA_ADDRESS_BOOK_INDEX_TITLES.get(_class, const jni$_.JStringNullableType());

  static final _id_PROTOCOL = _class.staticFieldId(
    r'PROTOCOL',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String PROTOCOL`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get PROTOCOL => _id_PROTOCOL.get(_class, const jni$_.JStringNullableType());

  /// from: `static public final int PROTOCOL_AIM`
  static const PROTOCOL_AIM = 0;

  /// from: `static public final int PROTOCOL_CUSTOM`
  static const PROTOCOL_CUSTOM = -1;

  /// from: `static public final int PROTOCOL_GOOGLE_TALK`
  static const PROTOCOL_GOOGLE_TALK = 5;

  /// from: `static public final int PROTOCOL_ICQ`
  static const PROTOCOL_ICQ = 6;

  /// from: `static public final int PROTOCOL_JABBER`
  static const PROTOCOL_JABBER = 7;

  /// from: `static public final int PROTOCOL_MSN`
  static const PROTOCOL_MSN = 1;

  /// from: `static public final int PROTOCOL_NETMEETING`
  static const PROTOCOL_NETMEETING = 8;

  /// from: `static public final int PROTOCOL_QQ`
  static const PROTOCOL_QQ = 4;

  /// from: `static public final int PROTOCOL_SKYPE`
  static const PROTOCOL_SKYPE = 3;

  /// from: `static public final int PROTOCOL_YAHOO`
  static const PROTOCOL_YAHOO = 2;

  /// from: `static public final int TYPE_HOME`
  static const TYPE_HOME = 1;

  /// from: `static public final int TYPE_OTHER`
  static const TYPE_OTHER = 3;

  /// from: `static public final int TYPE_WORK`
  static const TYPE_WORK = 2;
  static final _id_getTypeLabelResource = _class.staticMethodId(
    r'getTypeLabelResource',
    r'(I)I',
  );

  static final _getTypeLabelResource =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallStaticIntMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `static public int getTypeLabelResource(int i)`
  static int getTypeLabelResource(
    int i,
  ) {
    return _getTypeLabelResource(_class.reference.pointer, _id_getTypeLabelResource as jni$_.JMethodIDPtr, i).integer;
  }

  static final _id_getTypeLabel = _class.staticMethodId(
    r'getTypeLabel',
    r'(Landroid/content/res/Resources;ILjava/lang/CharSequence;)Ljava/lang/CharSequence;',
  );

  static final _getTypeLabel =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public java.lang.CharSequence getTypeLabel(android.content.res.Resources resources, int i, java.lang.CharSequence charSequence)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JObject? getTypeLabel(
    jni$_.JObject? resources,
    int i,
    jni$_.JObject? charSequence,
  ) {
    final _$resources = resources?.reference ?? jni$_.jNullReference;
    final _$charSequence = charSequence?.reference ?? jni$_.jNullReference;
    return _getTypeLabel(
      _class.reference.pointer,
      _id_getTypeLabel as jni$_.JMethodIDPtr,
      _$resources.pointer,
      i,
      _$charSequence.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getProtocolLabelResource = _class.staticMethodId(
    r'getProtocolLabelResource',
    r'(I)I',
  );

  static final _getProtocolLabelResource =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallStaticIntMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `static public int getProtocolLabelResource(int i)`
  static int getProtocolLabelResource(
    int i,
  ) {
    return _getProtocolLabelResource(
      _class.reference.pointer,
      _id_getProtocolLabelResource as jni$_.JMethodIDPtr,
      i,
    ).integer;
  }

  static final _id_getProtocolLabel = _class.staticMethodId(
    r'getProtocolLabel',
    r'(Landroid/content/res/Resources;ILjava/lang/CharSequence;)Ljava/lang/CharSequence;',
  );

  static final _getProtocolLabel =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public java.lang.CharSequence getProtocolLabel(android.content.res.Resources resources, int i, java.lang.CharSequence charSequence)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JObject? getProtocolLabel(
    jni$_.JObject? resources,
    int i,
    jni$_.JObject? charSequence,
  ) {
    final _$resources = resources?.reference ?? jni$_.jNullReference;
    final _$charSequence = charSequence?.reference ?? jni$_.jNullReference;
    return _getProtocolLabel(
      _class.reference.pointer,
      _id_getProtocolLabel as jni$_.JMethodIDPtr,
      _$resources.pointer,
      i,
      _$charSequence.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }
}

final class $ContactsContract$CommonDataKinds$Im$NullableType
    extends jni$_.JObjType<ContactsContract$CommonDataKinds$Im?> {
  @jni$_.internal
  const $ContactsContract$CommonDataKinds$Im$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$CommonDataKinds$Im;';

  @jni$_.internal
  @core$_.override
  ContactsContract$CommonDataKinds$Im? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : ContactsContract$CommonDataKinds$Im.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$CommonDataKinds$Im?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$CommonDataKinds$Im$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$CommonDataKinds$Im$NullableType) &&
        other is $ContactsContract$CommonDataKinds$Im$NullableType;
  }
}

final class $ContactsContract$CommonDataKinds$Im$Type extends jni$_.JObjType<ContactsContract$CommonDataKinds$Im> {
  @jni$_.internal
  const $ContactsContract$CommonDataKinds$Im$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$CommonDataKinds$Im;';

  @jni$_.internal
  @core$_.override
  ContactsContract$CommonDataKinds$Im fromReference(jni$_.JReference reference) =>
      ContactsContract$CommonDataKinds$Im.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$CommonDataKinds$Im?> get nullableType =>
      const $ContactsContract$CommonDataKinds$Im$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$CommonDataKinds$Im$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$CommonDataKinds$Im$Type) &&
        other is $ContactsContract$CommonDataKinds$Im$Type;
  }
}

/// from: `android.provider.ContactsContract$CommonDataKinds$Nickname`
class ContactsContract$CommonDataKinds$Nickname extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ContactsContract$CommonDataKinds$Nickname> $type;

  @jni$_.internal
  ContactsContract$CommonDataKinds$Nickname.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/provider/ContactsContract$CommonDataKinds$Nickname');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ContactsContract$CommonDataKinds$Nickname$NullableType();
  static const type = $ContactsContract$CommonDataKinds$Nickname$Type();
  static final _id_CONTENT_ITEM_TYPE = _class.staticFieldId(
    r'CONTENT_ITEM_TYPE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CONTENT_ITEM_TYPE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CONTENT_ITEM_TYPE => _id_CONTENT_ITEM_TYPE.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ADDRESS_BOOK_INDEX = _class.staticFieldId(
    r'EXTRA_ADDRESS_BOOK_INDEX',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ADDRESS_BOOK_INDEX`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ADDRESS_BOOK_INDEX =>
      _id_EXTRA_ADDRESS_BOOK_INDEX.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ADDRESS_BOOK_INDEX_COUNTS = _class.staticFieldId(
    r'EXTRA_ADDRESS_BOOK_INDEX_COUNTS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ADDRESS_BOOK_INDEX_COUNTS =>
      _id_EXTRA_ADDRESS_BOOK_INDEX_COUNTS.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ADDRESS_BOOK_INDEX_TITLES = _class.staticFieldId(
    r'EXTRA_ADDRESS_BOOK_INDEX_TITLES',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ADDRESS_BOOK_INDEX_TITLES =>
      _id_EXTRA_ADDRESS_BOOK_INDEX_TITLES.get(_class, const jni$_.JStringNullableType());

  static final _id_NAME = _class.staticFieldId(
    r'NAME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String NAME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get NAME => _id_NAME.get(_class, const jni$_.JStringNullableType());

  /// from: `static public final int TYPE_DEFAULT`
  static const TYPE_DEFAULT = 1;

  /// from: `static public final int TYPE_INITIALS`
  static const TYPE_INITIALS = 5;

  /// from: `static public final int TYPE_MAIDEN_NAME`
  static const TYPE_MAIDEN_NAME = 3;

  /// from: `static public final int TYPE_MAINDEN_NAME`
  static const TYPE_MAINDEN_NAME = 3;

  /// from: `static public final int TYPE_OTHER_NAME`
  static const TYPE_OTHER_NAME = 2;

  /// from: `static public final int TYPE_SHORT_NAME`
  static const TYPE_SHORT_NAME = 4;
}

final class $ContactsContract$CommonDataKinds$Nickname$NullableType
    extends jni$_.JObjType<ContactsContract$CommonDataKinds$Nickname?> {
  @jni$_.internal
  const $ContactsContract$CommonDataKinds$Nickname$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$CommonDataKinds$Nickname;';

  @jni$_.internal
  @core$_.override
  ContactsContract$CommonDataKinds$Nickname? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : ContactsContract$CommonDataKinds$Nickname.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$CommonDataKinds$Nickname?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$CommonDataKinds$Nickname$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$CommonDataKinds$Nickname$NullableType) &&
        other is $ContactsContract$CommonDataKinds$Nickname$NullableType;
  }
}

final class $ContactsContract$CommonDataKinds$Nickname$Type
    extends jni$_.JObjType<ContactsContract$CommonDataKinds$Nickname> {
  @jni$_.internal
  const $ContactsContract$CommonDataKinds$Nickname$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$CommonDataKinds$Nickname;';

  @jni$_.internal
  @core$_.override
  ContactsContract$CommonDataKinds$Nickname fromReference(jni$_.JReference reference) =>
      ContactsContract$CommonDataKinds$Nickname.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$CommonDataKinds$Nickname?> get nullableType =>
      const $ContactsContract$CommonDataKinds$Nickname$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$CommonDataKinds$Nickname$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$CommonDataKinds$Nickname$Type) &&
        other is $ContactsContract$CommonDataKinds$Nickname$Type;
  }
}

/// from: `android.provider.ContactsContract$CommonDataKinds$Note`
class ContactsContract$CommonDataKinds$Note extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ContactsContract$CommonDataKinds$Note> $type;

  @jni$_.internal
  ContactsContract$CommonDataKinds$Note.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/provider/ContactsContract$CommonDataKinds$Note');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ContactsContract$CommonDataKinds$Note$NullableType();
  static const type = $ContactsContract$CommonDataKinds$Note$Type();
  static final _id_CONTENT_ITEM_TYPE = _class.staticFieldId(
    r'CONTENT_ITEM_TYPE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CONTENT_ITEM_TYPE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CONTENT_ITEM_TYPE => _id_CONTENT_ITEM_TYPE.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ADDRESS_BOOK_INDEX = _class.staticFieldId(
    r'EXTRA_ADDRESS_BOOK_INDEX',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ADDRESS_BOOK_INDEX`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ADDRESS_BOOK_INDEX =>
      _id_EXTRA_ADDRESS_BOOK_INDEX.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ADDRESS_BOOK_INDEX_COUNTS = _class.staticFieldId(
    r'EXTRA_ADDRESS_BOOK_INDEX_COUNTS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ADDRESS_BOOK_INDEX_COUNTS =>
      _id_EXTRA_ADDRESS_BOOK_INDEX_COUNTS.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ADDRESS_BOOK_INDEX_TITLES = _class.staticFieldId(
    r'EXTRA_ADDRESS_BOOK_INDEX_TITLES',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ADDRESS_BOOK_INDEX_TITLES =>
      _id_EXTRA_ADDRESS_BOOK_INDEX_TITLES.get(_class, const jni$_.JStringNullableType());

  static final _id_NOTE = _class.staticFieldId(
    r'NOTE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String NOTE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get NOTE => _id_NOTE.get(_class, const jni$_.JStringNullableType());
}

final class $ContactsContract$CommonDataKinds$Note$NullableType
    extends jni$_.JObjType<ContactsContract$CommonDataKinds$Note?> {
  @jni$_.internal
  const $ContactsContract$CommonDataKinds$Note$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$CommonDataKinds$Note;';

  @jni$_.internal
  @core$_.override
  ContactsContract$CommonDataKinds$Note? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : ContactsContract$CommonDataKinds$Note.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$CommonDataKinds$Note?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$CommonDataKinds$Note$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$CommonDataKinds$Note$NullableType) &&
        other is $ContactsContract$CommonDataKinds$Note$NullableType;
  }
}

final class $ContactsContract$CommonDataKinds$Note$Type extends jni$_.JObjType<ContactsContract$CommonDataKinds$Note> {
  @jni$_.internal
  const $ContactsContract$CommonDataKinds$Note$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$CommonDataKinds$Note;';

  @jni$_.internal
  @core$_.override
  ContactsContract$CommonDataKinds$Note fromReference(jni$_.JReference reference) =>
      ContactsContract$CommonDataKinds$Note.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$CommonDataKinds$Note?> get nullableType =>
      const $ContactsContract$CommonDataKinds$Note$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$CommonDataKinds$Note$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$CommonDataKinds$Note$Type) &&
        other is $ContactsContract$CommonDataKinds$Note$Type;
  }
}

/// from: `android.provider.ContactsContract$CommonDataKinds$Organization`
class ContactsContract$CommonDataKinds$Organization extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ContactsContract$CommonDataKinds$Organization> $type;

  @jni$_.internal
  ContactsContract$CommonDataKinds$Organization.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/provider/ContactsContract$CommonDataKinds$Organization');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ContactsContract$CommonDataKinds$Organization$NullableType();
  static const type = $ContactsContract$CommonDataKinds$Organization$Type();
  static final _id_COMPANY = _class.staticFieldId(
    r'COMPANY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String COMPANY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get COMPANY => _id_COMPANY.get(_class, const jni$_.JStringNullableType());

  static final _id_CONTENT_ITEM_TYPE = _class.staticFieldId(
    r'CONTENT_ITEM_TYPE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CONTENT_ITEM_TYPE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CONTENT_ITEM_TYPE => _id_CONTENT_ITEM_TYPE.get(_class, const jni$_.JStringNullableType());

  static final _id_DEPARTMENT = _class.staticFieldId(
    r'DEPARTMENT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String DEPARTMENT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get DEPARTMENT => _id_DEPARTMENT.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ADDRESS_BOOK_INDEX = _class.staticFieldId(
    r'EXTRA_ADDRESS_BOOK_INDEX',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ADDRESS_BOOK_INDEX`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ADDRESS_BOOK_INDEX =>
      _id_EXTRA_ADDRESS_BOOK_INDEX.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ADDRESS_BOOK_INDEX_COUNTS = _class.staticFieldId(
    r'EXTRA_ADDRESS_BOOK_INDEX_COUNTS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ADDRESS_BOOK_INDEX_COUNTS =>
      _id_EXTRA_ADDRESS_BOOK_INDEX_COUNTS.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ADDRESS_BOOK_INDEX_TITLES = _class.staticFieldId(
    r'EXTRA_ADDRESS_BOOK_INDEX_TITLES',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ADDRESS_BOOK_INDEX_TITLES =>
      _id_EXTRA_ADDRESS_BOOK_INDEX_TITLES.get(_class, const jni$_.JStringNullableType());

  static final _id_JOB_DESCRIPTION = _class.staticFieldId(
    r'JOB_DESCRIPTION',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String JOB_DESCRIPTION`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get JOB_DESCRIPTION => _id_JOB_DESCRIPTION.get(_class, const jni$_.JStringNullableType());

  static final _id_OFFICE_LOCATION = _class.staticFieldId(
    r'OFFICE_LOCATION',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String OFFICE_LOCATION`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get OFFICE_LOCATION => _id_OFFICE_LOCATION.get(_class, const jni$_.JStringNullableType());

  static final _id_PHONETIC_NAME = _class.staticFieldId(
    r'PHONETIC_NAME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String PHONETIC_NAME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get PHONETIC_NAME => _id_PHONETIC_NAME.get(_class, const jni$_.JStringNullableType());

  static final _id_PHONETIC_NAME_STYLE = _class.staticFieldId(
    r'PHONETIC_NAME_STYLE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String PHONETIC_NAME_STYLE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get PHONETIC_NAME_STYLE =>
      _id_PHONETIC_NAME_STYLE.get(_class, const jni$_.JStringNullableType());

  static final _id_SYMBOL = _class.staticFieldId(
    r'SYMBOL',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SYMBOL`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get SYMBOL => _id_SYMBOL.get(_class, const jni$_.JStringNullableType());

  static final _id_TITLE = _class.staticFieldId(
    r'TITLE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String TITLE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get TITLE => _id_TITLE.get(_class, const jni$_.JStringNullableType());

  /// from: `static public final int TYPE_OTHER`
  static const TYPE_OTHER = 2;

  /// from: `static public final int TYPE_WORK`
  static const TYPE_WORK = 1;
  static final _id_getTypeLabelResource = _class.staticMethodId(
    r'getTypeLabelResource',
    r'(I)I',
  );

  static final _getTypeLabelResource =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallStaticIntMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `static public int getTypeLabelResource(int i)`
  static int getTypeLabelResource(
    int i,
  ) {
    return _getTypeLabelResource(_class.reference.pointer, _id_getTypeLabelResource as jni$_.JMethodIDPtr, i).integer;
  }

  static final _id_getTypeLabel = _class.staticMethodId(
    r'getTypeLabel',
    r'(Landroid/content/res/Resources;ILjava/lang/CharSequence;)Ljava/lang/CharSequence;',
  );

  static final _getTypeLabel =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public java.lang.CharSequence getTypeLabel(android.content.res.Resources resources, int i, java.lang.CharSequence charSequence)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JObject? getTypeLabel(
    jni$_.JObject? resources,
    int i,
    jni$_.JObject? charSequence,
  ) {
    final _$resources = resources?.reference ?? jni$_.jNullReference;
    final _$charSequence = charSequence?.reference ?? jni$_.jNullReference;
    return _getTypeLabel(
      _class.reference.pointer,
      _id_getTypeLabel as jni$_.JMethodIDPtr,
      _$resources.pointer,
      i,
      _$charSequence.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }
}

final class $ContactsContract$CommonDataKinds$Organization$NullableType
    extends jni$_.JObjType<ContactsContract$CommonDataKinds$Organization?> {
  @jni$_.internal
  const $ContactsContract$CommonDataKinds$Organization$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$CommonDataKinds$Organization;';

  @jni$_.internal
  @core$_.override
  ContactsContract$CommonDataKinds$Organization? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : ContactsContract$CommonDataKinds$Organization.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$CommonDataKinds$Organization?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$CommonDataKinds$Organization$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$CommonDataKinds$Organization$NullableType) &&
        other is $ContactsContract$CommonDataKinds$Organization$NullableType;
  }
}

final class $ContactsContract$CommonDataKinds$Organization$Type
    extends jni$_.JObjType<ContactsContract$CommonDataKinds$Organization> {
  @jni$_.internal
  const $ContactsContract$CommonDataKinds$Organization$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$CommonDataKinds$Organization;';

  @jni$_.internal
  @core$_.override
  ContactsContract$CommonDataKinds$Organization fromReference(jni$_.JReference reference) =>
      ContactsContract$CommonDataKinds$Organization.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$CommonDataKinds$Organization?> get nullableType =>
      const $ContactsContract$CommonDataKinds$Organization$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$CommonDataKinds$Organization$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$CommonDataKinds$Organization$Type) &&
        other is $ContactsContract$CommonDataKinds$Organization$Type;
  }
}

/// from: `android.provider.ContactsContract$CommonDataKinds$Phone`
class ContactsContract$CommonDataKinds$Phone extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ContactsContract$CommonDataKinds$Phone> $type;

  @jni$_.internal
  ContactsContract$CommonDataKinds$Phone.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/provider/ContactsContract$CommonDataKinds$Phone');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ContactsContract$CommonDataKinds$Phone$NullableType();
  static const type = $ContactsContract$CommonDataKinds$Phone$Type();
  static final _id_CONTENT_FILTER_URI = _class.staticFieldId(
    r'CONTENT_FILTER_URI',
    r'Landroid/net/Uri;',
  );

  /// from: `static public final android.net.Uri CONTENT_FILTER_URI`
  /// The returned object must be released after use, by calling the [release] method.
  static Uri? get CONTENT_FILTER_URI => _id_CONTENT_FILTER_URI.get(_class, const $Uri$NullableType());

  static final _id_CONTENT_ITEM_TYPE = _class.staticFieldId(
    r'CONTENT_ITEM_TYPE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CONTENT_ITEM_TYPE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CONTENT_ITEM_TYPE => _id_CONTENT_ITEM_TYPE.get(_class, const jni$_.JStringNullableType());

  static final _id_CONTENT_TYPE = _class.staticFieldId(
    r'CONTENT_TYPE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CONTENT_TYPE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CONTENT_TYPE => _id_CONTENT_TYPE.get(_class, const jni$_.JStringNullableType());

  static final _id_CONTENT_URI = _class.staticFieldId(
    r'CONTENT_URI',
    r'Landroid/net/Uri;',
  );

  /// from: `static public final android.net.Uri CONTENT_URI`
  /// The returned object must be released after use, by calling the [release] method.
  static Uri? get CONTENT_URI => _id_CONTENT_URI.get(_class, const $Uri$NullableType());

  static final _id_ENTERPRISE_CONTENT_FILTER_URI = _class.staticFieldId(
    r'ENTERPRISE_CONTENT_FILTER_URI',
    r'Landroid/net/Uri;',
  );

  /// from: `static public final android.net.Uri ENTERPRISE_CONTENT_FILTER_URI`
  /// The returned object must be released after use, by calling the [release] method.
  static Uri? get ENTERPRISE_CONTENT_FILTER_URI =>
      _id_ENTERPRISE_CONTENT_FILTER_URI.get(_class, const $Uri$NullableType());

  static final _id_ENTERPRISE_CONTENT_URI = _class.staticFieldId(
    r'ENTERPRISE_CONTENT_URI',
    r'Landroid/net/Uri;',
  );

  /// from: `static public final android.net.Uri ENTERPRISE_CONTENT_URI`
  /// The returned object must be released after use, by calling the [release] method.
  static Uri? get ENTERPRISE_CONTENT_URI => _id_ENTERPRISE_CONTENT_URI.get(_class, const $Uri$NullableType());

  static final _id_EXTRA_ADDRESS_BOOK_INDEX = _class.staticFieldId(
    r'EXTRA_ADDRESS_BOOK_INDEX',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ADDRESS_BOOK_INDEX`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ADDRESS_BOOK_INDEX =>
      _id_EXTRA_ADDRESS_BOOK_INDEX.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ADDRESS_BOOK_INDEX_COUNTS = _class.staticFieldId(
    r'EXTRA_ADDRESS_BOOK_INDEX_COUNTS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ADDRESS_BOOK_INDEX_COUNTS =>
      _id_EXTRA_ADDRESS_BOOK_INDEX_COUNTS.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ADDRESS_BOOK_INDEX_TITLES = _class.staticFieldId(
    r'EXTRA_ADDRESS_BOOK_INDEX_TITLES',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ADDRESS_BOOK_INDEX_TITLES =>
      _id_EXTRA_ADDRESS_BOOK_INDEX_TITLES.get(_class, const jni$_.JStringNullableType());

  static final _id_NORMALIZED_NUMBER = _class.staticFieldId(
    r'NORMALIZED_NUMBER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String NORMALIZED_NUMBER`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get NORMALIZED_NUMBER => _id_NORMALIZED_NUMBER.get(_class, const jni$_.JStringNullableType());

  static final _id_NUMBER = _class.staticFieldId(
    r'NUMBER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String NUMBER`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get NUMBER => _id_NUMBER.get(_class, const jni$_.JStringNullableType());

  static final _id_SEARCH_DISPLAY_NAME_KEY = _class.staticFieldId(
    r'SEARCH_DISPLAY_NAME_KEY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SEARCH_DISPLAY_NAME_KEY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get SEARCH_DISPLAY_NAME_KEY =>
      _id_SEARCH_DISPLAY_NAME_KEY.get(_class, const jni$_.JStringNullableType());

  static final _id_SEARCH_PHONE_NUMBER_KEY = _class.staticFieldId(
    r'SEARCH_PHONE_NUMBER_KEY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SEARCH_PHONE_NUMBER_KEY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get SEARCH_PHONE_NUMBER_KEY =>
      _id_SEARCH_PHONE_NUMBER_KEY.get(_class, const jni$_.JStringNullableType());

  /// from: `static public final int TYPE_ASSISTANT`
  static const TYPE_ASSISTANT = 19;

  /// from: `static public final int TYPE_CALLBACK`
  static const TYPE_CALLBACK = 8;

  /// from: `static public final int TYPE_CAR`
  static const TYPE_CAR = 9;

  /// from: `static public final int TYPE_COMPANY_MAIN`
  static const TYPE_COMPANY_MAIN = 10;

  /// from: `static public final int TYPE_FAX_HOME`
  static const TYPE_FAX_HOME = 5;

  /// from: `static public final int TYPE_FAX_WORK`
  static const TYPE_FAX_WORK = 4;

  /// from: `static public final int TYPE_HOME`
  static const TYPE_HOME = 1;

  /// from: `static public final int TYPE_ISDN`
  static const TYPE_ISDN = 11;

  /// from: `static public final int TYPE_MAIN`
  static const TYPE_MAIN = 12;

  /// from: `static public final int TYPE_MMS`
  static const TYPE_MMS = 20;

  /// from: `static public final int TYPE_MOBILE`
  static const TYPE_MOBILE = 2;

  /// from: `static public final int TYPE_OTHER`
  static const TYPE_OTHER = 7;

  /// from: `static public final int TYPE_OTHER_FAX`
  static const TYPE_OTHER_FAX = 13;

  /// from: `static public final int TYPE_PAGER`
  static const TYPE_PAGER = 6;

  /// from: `static public final int TYPE_RADIO`
  static const TYPE_RADIO = 14;

  /// from: `static public final int TYPE_TELEX`
  static const TYPE_TELEX = 15;

  /// from: `static public final int TYPE_TTY_TDD`
  static const TYPE_TTY_TDD = 16;

  /// from: `static public final int TYPE_WORK`
  static const TYPE_WORK = 3;

  /// from: `static public final int TYPE_WORK_MOBILE`
  static const TYPE_WORK_MOBILE = 17;

  /// from: `static public final int TYPE_WORK_PAGER`
  static const TYPE_WORK_PAGER = 18;
  static final _id_getTypeLabelResource = _class.staticMethodId(
    r'getTypeLabelResource',
    r'(I)I',
  );

  static final _getTypeLabelResource =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallStaticIntMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `static public int getTypeLabelResource(int i)`
  static int getTypeLabelResource(
    int i,
  ) {
    return _getTypeLabelResource(_class.reference.pointer, _id_getTypeLabelResource as jni$_.JMethodIDPtr, i).integer;
  }

  static final _id_getTypeLabel = _class.staticMethodId(
    r'getTypeLabel',
    r'(Landroid/content/res/Resources;ILjava/lang/CharSequence;)Ljava/lang/CharSequence;',
  );

  static final _getTypeLabel =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public java.lang.CharSequence getTypeLabel(android.content.res.Resources resources, int i, java.lang.CharSequence charSequence)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JObject? getTypeLabel(
    jni$_.JObject? resources,
    int i,
    jni$_.JObject? charSequence,
  ) {
    final _$resources = resources?.reference ?? jni$_.jNullReference;
    final _$charSequence = charSequence?.reference ?? jni$_.jNullReference;
    return _getTypeLabel(
      _class.reference.pointer,
      _id_getTypeLabel as jni$_.JMethodIDPtr,
      _$resources.pointer,
      i,
      _$charSequence.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }
}

final class $ContactsContract$CommonDataKinds$Phone$NullableType
    extends jni$_.JObjType<ContactsContract$CommonDataKinds$Phone?> {
  @jni$_.internal
  const $ContactsContract$CommonDataKinds$Phone$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$CommonDataKinds$Phone;';

  @jni$_.internal
  @core$_.override
  ContactsContract$CommonDataKinds$Phone? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : ContactsContract$CommonDataKinds$Phone.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$CommonDataKinds$Phone?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$CommonDataKinds$Phone$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$CommonDataKinds$Phone$NullableType) &&
        other is $ContactsContract$CommonDataKinds$Phone$NullableType;
  }
}

final class $ContactsContract$CommonDataKinds$Phone$Type
    extends jni$_.JObjType<ContactsContract$CommonDataKinds$Phone> {
  @jni$_.internal
  const $ContactsContract$CommonDataKinds$Phone$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$CommonDataKinds$Phone;';

  @jni$_.internal
  @core$_.override
  ContactsContract$CommonDataKinds$Phone fromReference(jni$_.JReference reference) =>
      ContactsContract$CommonDataKinds$Phone.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$CommonDataKinds$Phone?> get nullableType =>
      const $ContactsContract$CommonDataKinds$Phone$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$CommonDataKinds$Phone$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$CommonDataKinds$Phone$Type) &&
        other is $ContactsContract$CommonDataKinds$Phone$Type;
  }
}

/// from: `android.provider.ContactsContract$CommonDataKinds$Photo`
class ContactsContract$CommonDataKinds$Photo extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ContactsContract$CommonDataKinds$Photo> $type;

  @jni$_.internal
  ContactsContract$CommonDataKinds$Photo.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/provider/ContactsContract$CommonDataKinds$Photo');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ContactsContract$CommonDataKinds$Photo$NullableType();
  static const type = $ContactsContract$CommonDataKinds$Photo$Type();
  static final _id_CONTENT_ITEM_TYPE = _class.staticFieldId(
    r'CONTENT_ITEM_TYPE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CONTENT_ITEM_TYPE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CONTENT_ITEM_TYPE => _id_CONTENT_ITEM_TYPE.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ADDRESS_BOOK_INDEX = _class.staticFieldId(
    r'EXTRA_ADDRESS_BOOK_INDEX',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ADDRESS_BOOK_INDEX`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ADDRESS_BOOK_INDEX =>
      _id_EXTRA_ADDRESS_BOOK_INDEX.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ADDRESS_BOOK_INDEX_COUNTS = _class.staticFieldId(
    r'EXTRA_ADDRESS_BOOK_INDEX_COUNTS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ADDRESS_BOOK_INDEX_COUNTS =>
      _id_EXTRA_ADDRESS_BOOK_INDEX_COUNTS.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ADDRESS_BOOK_INDEX_TITLES = _class.staticFieldId(
    r'EXTRA_ADDRESS_BOOK_INDEX_TITLES',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ADDRESS_BOOK_INDEX_TITLES =>
      _id_EXTRA_ADDRESS_BOOK_INDEX_TITLES.get(_class, const jni$_.JStringNullableType());

  static final _id_PHOTO = _class.staticFieldId(
    r'PHOTO',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String PHOTO`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get PHOTO => _id_PHOTO.get(_class, const jni$_.JStringNullableType());

  static final _id_PHOTO_FILE_ID = _class.staticFieldId(
    r'PHOTO_FILE_ID',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String PHOTO_FILE_ID`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get PHOTO_FILE_ID => _id_PHOTO_FILE_ID.get(_class, const jni$_.JStringNullableType());
}

final class $ContactsContract$CommonDataKinds$Photo$NullableType
    extends jni$_.JObjType<ContactsContract$CommonDataKinds$Photo?> {
  @jni$_.internal
  const $ContactsContract$CommonDataKinds$Photo$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$CommonDataKinds$Photo;';

  @jni$_.internal
  @core$_.override
  ContactsContract$CommonDataKinds$Photo? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : ContactsContract$CommonDataKinds$Photo.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$CommonDataKinds$Photo?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$CommonDataKinds$Photo$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$CommonDataKinds$Photo$NullableType) &&
        other is $ContactsContract$CommonDataKinds$Photo$NullableType;
  }
}

final class $ContactsContract$CommonDataKinds$Photo$Type
    extends jni$_.JObjType<ContactsContract$CommonDataKinds$Photo> {
  @jni$_.internal
  const $ContactsContract$CommonDataKinds$Photo$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$CommonDataKinds$Photo;';

  @jni$_.internal
  @core$_.override
  ContactsContract$CommonDataKinds$Photo fromReference(jni$_.JReference reference) =>
      ContactsContract$CommonDataKinds$Photo.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$CommonDataKinds$Photo?> get nullableType =>
      const $ContactsContract$CommonDataKinds$Photo$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$CommonDataKinds$Photo$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$CommonDataKinds$Photo$Type) &&
        other is $ContactsContract$CommonDataKinds$Photo$Type;
  }
}

/// from: `android.provider.ContactsContract$CommonDataKinds$Relation`
class ContactsContract$CommonDataKinds$Relation extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ContactsContract$CommonDataKinds$Relation> $type;

  @jni$_.internal
  ContactsContract$CommonDataKinds$Relation.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/provider/ContactsContract$CommonDataKinds$Relation');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ContactsContract$CommonDataKinds$Relation$NullableType();
  static const type = $ContactsContract$CommonDataKinds$Relation$Type();
  static final _id_CONTENT_ITEM_TYPE = _class.staticFieldId(
    r'CONTENT_ITEM_TYPE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CONTENT_ITEM_TYPE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CONTENT_ITEM_TYPE => _id_CONTENT_ITEM_TYPE.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ADDRESS_BOOK_INDEX = _class.staticFieldId(
    r'EXTRA_ADDRESS_BOOK_INDEX',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ADDRESS_BOOK_INDEX`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ADDRESS_BOOK_INDEX =>
      _id_EXTRA_ADDRESS_BOOK_INDEX.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ADDRESS_BOOK_INDEX_COUNTS = _class.staticFieldId(
    r'EXTRA_ADDRESS_BOOK_INDEX_COUNTS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ADDRESS_BOOK_INDEX_COUNTS =>
      _id_EXTRA_ADDRESS_BOOK_INDEX_COUNTS.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ADDRESS_BOOK_INDEX_TITLES = _class.staticFieldId(
    r'EXTRA_ADDRESS_BOOK_INDEX_TITLES',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ADDRESS_BOOK_INDEX_TITLES =>
      _id_EXTRA_ADDRESS_BOOK_INDEX_TITLES.get(_class, const jni$_.JStringNullableType());

  static final _id_NAME = _class.staticFieldId(
    r'NAME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String NAME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get NAME => _id_NAME.get(_class, const jni$_.JStringNullableType());

  /// from: `static public final int TYPE_ASSISTANT`
  static const TYPE_ASSISTANT = 1;

  /// from: `static public final int TYPE_BROTHER`
  static const TYPE_BROTHER = 2;

  /// from: `static public final int TYPE_CHILD`
  static const TYPE_CHILD = 3;

  /// from: `static public final int TYPE_DOMESTIC_PARTNER`
  static const TYPE_DOMESTIC_PARTNER = 4;

  /// from: `static public final int TYPE_FATHER`
  static const TYPE_FATHER = 5;

  /// from: `static public final int TYPE_FRIEND`
  static const TYPE_FRIEND = 6;

  /// from: `static public final int TYPE_MANAGER`
  static const TYPE_MANAGER = 7;

  /// from: `static public final int TYPE_MOTHER`
  static const TYPE_MOTHER = 8;

  /// from: `static public final int TYPE_PARENT`
  static const TYPE_PARENT = 9;

  /// from: `static public final int TYPE_PARTNER`
  static const TYPE_PARTNER = 10;

  /// from: `static public final int TYPE_REFERRED_BY`
  static const TYPE_REFERRED_BY = 11;

  /// from: `static public final int TYPE_RELATIVE`
  static const TYPE_RELATIVE = 12;

  /// from: `static public final int TYPE_SISTER`
  static const TYPE_SISTER = 13;

  /// from: `static public final int TYPE_SPOUSE`
  static const TYPE_SPOUSE = 14;
  static final _id_getTypeLabelResource = _class.staticMethodId(
    r'getTypeLabelResource',
    r'(I)I',
  );

  static final _getTypeLabelResource =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallStaticIntMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `static public int getTypeLabelResource(int i)`
  static int getTypeLabelResource(
    int i,
  ) {
    return _getTypeLabelResource(_class.reference.pointer, _id_getTypeLabelResource as jni$_.JMethodIDPtr, i).integer;
  }

  static final _id_getTypeLabel = _class.staticMethodId(
    r'getTypeLabel',
    r'(Landroid/content/res/Resources;ILjava/lang/CharSequence;)Ljava/lang/CharSequence;',
  );

  static final _getTypeLabel =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public java.lang.CharSequence getTypeLabel(android.content.res.Resources resources, int i, java.lang.CharSequence charSequence)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JObject? getTypeLabel(
    jni$_.JObject? resources,
    int i,
    jni$_.JObject? charSequence,
  ) {
    final _$resources = resources?.reference ?? jni$_.jNullReference;
    final _$charSequence = charSequence?.reference ?? jni$_.jNullReference;
    return _getTypeLabel(
      _class.reference.pointer,
      _id_getTypeLabel as jni$_.JMethodIDPtr,
      _$resources.pointer,
      i,
      _$charSequence.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }
}

final class $ContactsContract$CommonDataKinds$Relation$NullableType
    extends jni$_.JObjType<ContactsContract$CommonDataKinds$Relation?> {
  @jni$_.internal
  const $ContactsContract$CommonDataKinds$Relation$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$CommonDataKinds$Relation;';

  @jni$_.internal
  @core$_.override
  ContactsContract$CommonDataKinds$Relation? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : ContactsContract$CommonDataKinds$Relation.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$CommonDataKinds$Relation?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$CommonDataKinds$Relation$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$CommonDataKinds$Relation$NullableType) &&
        other is $ContactsContract$CommonDataKinds$Relation$NullableType;
  }
}

final class $ContactsContract$CommonDataKinds$Relation$Type
    extends jni$_.JObjType<ContactsContract$CommonDataKinds$Relation> {
  @jni$_.internal
  const $ContactsContract$CommonDataKinds$Relation$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$CommonDataKinds$Relation;';

  @jni$_.internal
  @core$_.override
  ContactsContract$CommonDataKinds$Relation fromReference(jni$_.JReference reference) =>
      ContactsContract$CommonDataKinds$Relation.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$CommonDataKinds$Relation?> get nullableType =>
      const $ContactsContract$CommonDataKinds$Relation$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$CommonDataKinds$Relation$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$CommonDataKinds$Relation$Type) &&
        other is $ContactsContract$CommonDataKinds$Relation$Type;
  }
}

/// from: `android.provider.ContactsContract$CommonDataKinds$SipAddress`
class ContactsContract$CommonDataKinds$SipAddress extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ContactsContract$CommonDataKinds$SipAddress> $type;

  @jni$_.internal
  ContactsContract$CommonDataKinds$SipAddress.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/provider/ContactsContract$CommonDataKinds$SipAddress');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ContactsContract$CommonDataKinds$SipAddress$NullableType();
  static const type = $ContactsContract$CommonDataKinds$SipAddress$Type();
  static final _id_CONTENT_ITEM_TYPE = _class.staticFieldId(
    r'CONTENT_ITEM_TYPE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CONTENT_ITEM_TYPE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CONTENT_ITEM_TYPE => _id_CONTENT_ITEM_TYPE.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ADDRESS_BOOK_INDEX = _class.staticFieldId(
    r'EXTRA_ADDRESS_BOOK_INDEX',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ADDRESS_BOOK_INDEX`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ADDRESS_BOOK_INDEX =>
      _id_EXTRA_ADDRESS_BOOK_INDEX.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ADDRESS_BOOK_INDEX_COUNTS = _class.staticFieldId(
    r'EXTRA_ADDRESS_BOOK_INDEX_COUNTS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ADDRESS_BOOK_INDEX_COUNTS =>
      _id_EXTRA_ADDRESS_BOOK_INDEX_COUNTS.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ADDRESS_BOOK_INDEX_TITLES = _class.staticFieldId(
    r'EXTRA_ADDRESS_BOOK_INDEX_TITLES',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ADDRESS_BOOK_INDEX_TITLES =>
      _id_EXTRA_ADDRESS_BOOK_INDEX_TITLES.get(_class, const jni$_.JStringNullableType());

  static final _id_SIP_ADDRESS = _class.staticFieldId(
    r'SIP_ADDRESS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SIP_ADDRESS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get SIP_ADDRESS => _id_SIP_ADDRESS.get(_class, const jni$_.JStringNullableType());

  /// from: `static public final int TYPE_HOME`
  static const TYPE_HOME = 1;

  /// from: `static public final int TYPE_OTHER`
  static const TYPE_OTHER = 3;

  /// from: `static public final int TYPE_WORK`
  static const TYPE_WORK = 2;
  static final _id_getTypeLabelResource = _class.staticMethodId(
    r'getTypeLabelResource',
    r'(I)I',
  );

  static final _getTypeLabelResource =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallStaticIntMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `static public int getTypeLabelResource(int i)`
  static int getTypeLabelResource(
    int i,
  ) {
    return _getTypeLabelResource(_class.reference.pointer, _id_getTypeLabelResource as jni$_.JMethodIDPtr, i).integer;
  }

  static final _id_getTypeLabel = _class.staticMethodId(
    r'getTypeLabel',
    r'(Landroid/content/res/Resources;ILjava/lang/CharSequence;)Ljava/lang/CharSequence;',
  );

  static final _getTypeLabel =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public java.lang.CharSequence getTypeLabel(android.content.res.Resources resources, int i, java.lang.CharSequence charSequence)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JObject? getTypeLabel(
    jni$_.JObject? resources,
    int i,
    jni$_.JObject? charSequence,
  ) {
    final _$resources = resources?.reference ?? jni$_.jNullReference;
    final _$charSequence = charSequence?.reference ?? jni$_.jNullReference;
    return _getTypeLabel(
      _class.reference.pointer,
      _id_getTypeLabel as jni$_.JMethodIDPtr,
      _$resources.pointer,
      i,
      _$charSequence.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }
}

final class $ContactsContract$CommonDataKinds$SipAddress$NullableType
    extends jni$_.JObjType<ContactsContract$CommonDataKinds$SipAddress?> {
  @jni$_.internal
  const $ContactsContract$CommonDataKinds$SipAddress$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$CommonDataKinds$SipAddress;';

  @jni$_.internal
  @core$_.override
  ContactsContract$CommonDataKinds$SipAddress? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : ContactsContract$CommonDataKinds$SipAddress.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$CommonDataKinds$SipAddress?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$CommonDataKinds$SipAddress$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$CommonDataKinds$SipAddress$NullableType) &&
        other is $ContactsContract$CommonDataKinds$SipAddress$NullableType;
  }
}

final class $ContactsContract$CommonDataKinds$SipAddress$Type
    extends jni$_.JObjType<ContactsContract$CommonDataKinds$SipAddress> {
  @jni$_.internal
  const $ContactsContract$CommonDataKinds$SipAddress$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$CommonDataKinds$SipAddress;';

  @jni$_.internal
  @core$_.override
  ContactsContract$CommonDataKinds$SipAddress fromReference(jni$_.JReference reference) =>
      ContactsContract$CommonDataKinds$SipAddress.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$CommonDataKinds$SipAddress?> get nullableType =>
      const $ContactsContract$CommonDataKinds$SipAddress$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$CommonDataKinds$SipAddress$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$CommonDataKinds$SipAddress$Type) &&
        other is $ContactsContract$CommonDataKinds$SipAddress$Type;
  }
}

/// from: `android.provider.ContactsContract$CommonDataKinds$StructuredName`
class ContactsContract$CommonDataKinds$StructuredName extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ContactsContract$CommonDataKinds$StructuredName> $type;

  @jni$_.internal
  ContactsContract$CommonDataKinds$StructuredName.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/provider/ContactsContract$CommonDataKinds$StructuredName');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ContactsContract$CommonDataKinds$StructuredName$NullableType();
  static const type = $ContactsContract$CommonDataKinds$StructuredName$Type();
  static final _id_CONTENT_ITEM_TYPE = _class.staticFieldId(
    r'CONTENT_ITEM_TYPE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CONTENT_ITEM_TYPE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CONTENT_ITEM_TYPE => _id_CONTENT_ITEM_TYPE.get(_class, const jni$_.JStringNullableType());

  static final _id_DISPLAY_NAME = _class.staticFieldId(
    r'DISPLAY_NAME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String DISPLAY_NAME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get DISPLAY_NAME => _id_DISPLAY_NAME.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ADDRESS_BOOK_INDEX = _class.staticFieldId(
    r'EXTRA_ADDRESS_BOOK_INDEX',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ADDRESS_BOOK_INDEX`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ADDRESS_BOOK_INDEX =>
      _id_EXTRA_ADDRESS_BOOK_INDEX.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ADDRESS_BOOK_INDEX_COUNTS = _class.staticFieldId(
    r'EXTRA_ADDRESS_BOOK_INDEX_COUNTS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ADDRESS_BOOK_INDEX_COUNTS =>
      _id_EXTRA_ADDRESS_BOOK_INDEX_COUNTS.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ADDRESS_BOOK_INDEX_TITLES = _class.staticFieldId(
    r'EXTRA_ADDRESS_BOOK_INDEX_TITLES',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ADDRESS_BOOK_INDEX_TITLES =>
      _id_EXTRA_ADDRESS_BOOK_INDEX_TITLES.get(_class, const jni$_.JStringNullableType());

  static final _id_FAMILY_NAME = _class.staticFieldId(
    r'FAMILY_NAME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FAMILY_NAME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get FAMILY_NAME => _id_FAMILY_NAME.get(_class, const jni$_.JStringNullableType());

  static final _id_FULL_NAME_STYLE = _class.staticFieldId(
    r'FULL_NAME_STYLE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FULL_NAME_STYLE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get FULL_NAME_STYLE => _id_FULL_NAME_STYLE.get(_class, const jni$_.JStringNullableType());

  static final _id_GIVEN_NAME = _class.staticFieldId(
    r'GIVEN_NAME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String GIVEN_NAME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get GIVEN_NAME => _id_GIVEN_NAME.get(_class, const jni$_.JStringNullableType());

  static final _id_MIDDLE_NAME = _class.staticFieldId(
    r'MIDDLE_NAME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String MIDDLE_NAME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get MIDDLE_NAME => _id_MIDDLE_NAME.get(_class, const jni$_.JStringNullableType());

  static final _id_PHONETIC_FAMILY_NAME = _class.staticFieldId(
    r'PHONETIC_FAMILY_NAME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String PHONETIC_FAMILY_NAME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get PHONETIC_FAMILY_NAME =>
      _id_PHONETIC_FAMILY_NAME.get(_class, const jni$_.JStringNullableType());

  static final _id_PHONETIC_GIVEN_NAME = _class.staticFieldId(
    r'PHONETIC_GIVEN_NAME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String PHONETIC_GIVEN_NAME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get PHONETIC_GIVEN_NAME =>
      _id_PHONETIC_GIVEN_NAME.get(_class, const jni$_.JStringNullableType());

  static final _id_PHONETIC_MIDDLE_NAME = _class.staticFieldId(
    r'PHONETIC_MIDDLE_NAME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String PHONETIC_MIDDLE_NAME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get PHONETIC_MIDDLE_NAME =>
      _id_PHONETIC_MIDDLE_NAME.get(_class, const jni$_.JStringNullableType());

  static final _id_PHONETIC_NAME_STYLE = _class.staticFieldId(
    r'PHONETIC_NAME_STYLE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String PHONETIC_NAME_STYLE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get PHONETIC_NAME_STYLE =>
      _id_PHONETIC_NAME_STYLE.get(_class, const jni$_.JStringNullableType());

  static final _id_PREFIX = _class.staticFieldId(
    r'PREFIX',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String PREFIX`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get PREFIX => _id_PREFIX.get(_class, const jni$_.JStringNullableType());

  static final _id_SUFFIX = _class.staticFieldId(
    r'SUFFIX',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SUFFIX`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get SUFFIX => _id_SUFFIX.get(_class, const jni$_.JStringNullableType());
}

final class $ContactsContract$CommonDataKinds$StructuredName$NullableType
    extends jni$_.JObjType<ContactsContract$CommonDataKinds$StructuredName?> {
  @jni$_.internal
  const $ContactsContract$CommonDataKinds$StructuredName$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$CommonDataKinds$StructuredName;';

  @jni$_.internal
  @core$_.override
  ContactsContract$CommonDataKinds$StructuredName? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : ContactsContract$CommonDataKinds$StructuredName.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$CommonDataKinds$StructuredName?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$CommonDataKinds$StructuredName$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$CommonDataKinds$StructuredName$NullableType) &&
        other is $ContactsContract$CommonDataKinds$StructuredName$NullableType;
  }
}

final class $ContactsContract$CommonDataKinds$StructuredName$Type
    extends jni$_.JObjType<ContactsContract$CommonDataKinds$StructuredName> {
  @jni$_.internal
  const $ContactsContract$CommonDataKinds$StructuredName$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$CommonDataKinds$StructuredName;';

  @jni$_.internal
  @core$_.override
  ContactsContract$CommonDataKinds$StructuredName fromReference(jni$_.JReference reference) =>
      ContactsContract$CommonDataKinds$StructuredName.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$CommonDataKinds$StructuredName?> get nullableType =>
      const $ContactsContract$CommonDataKinds$StructuredName$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$CommonDataKinds$StructuredName$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$CommonDataKinds$StructuredName$Type) &&
        other is $ContactsContract$CommonDataKinds$StructuredName$Type;
  }
}

/// from: `android.provider.ContactsContract$CommonDataKinds$StructuredPostal`
class ContactsContract$CommonDataKinds$StructuredPostal extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ContactsContract$CommonDataKinds$StructuredPostal> $type;

  @jni$_.internal
  ContactsContract$CommonDataKinds$StructuredPostal.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/provider/ContactsContract$CommonDataKinds$StructuredPostal');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ContactsContract$CommonDataKinds$StructuredPostal$NullableType();
  static const type = $ContactsContract$CommonDataKinds$StructuredPostal$Type();
  static final _id_CITY = _class.staticFieldId(
    r'CITY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CITY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CITY => _id_CITY.get(_class, const jni$_.JStringNullableType());

  static final _id_CONTENT_ITEM_TYPE = _class.staticFieldId(
    r'CONTENT_ITEM_TYPE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CONTENT_ITEM_TYPE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CONTENT_ITEM_TYPE => _id_CONTENT_ITEM_TYPE.get(_class, const jni$_.JStringNullableType());

  static final _id_CONTENT_TYPE = _class.staticFieldId(
    r'CONTENT_TYPE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CONTENT_TYPE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CONTENT_TYPE => _id_CONTENT_TYPE.get(_class, const jni$_.JStringNullableType());

  static final _id_CONTENT_URI = _class.staticFieldId(
    r'CONTENT_URI',
    r'Landroid/net/Uri;',
  );

  /// from: `static public final android.net.Uri CONTENT_URI`
  /// The returned object must be released after use, by calling the [release] method.
  static Uri? get CONTENT_URI => _id_CONTENT_URI.get(_class, const $Uri$NullableType());

  static final _id_COUNTRY = _class.staticFieldId(
    r'COUNTRY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String COUNTRY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get COUNTRY => _id_COUNTRY.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ADDRESS_BOOK_INDEX = _class.staticFieldId(
    r'EXTRA_ADDRESS_BOOK_INDEX',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ADDRESS_BOOK_INDEX`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ADDRESS_BOOK_INDEX =>
      _id_EXTRA_ADDRESS_BOOK_INDEX.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ADDRESS_BOOK_INDEX_COUNTS = _class.staticFieldId(
    r'EXTRA_ADDRESS_BOOK_INDEX_COUNTS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ADDRESS_BOOK_INDEX_COUNTS =>
      _id_EXTRA_ADDRESS_BOOK_INDEX_COUNTS.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ADDRESS_BOOK_INDEX_TITLES = _class.staticFieldId(
    r'EXTRA_ADDRESS_BOOK_INDEX_TITLES',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ADDRESS_BOOK_INDEX_TITLES =>
      _id_EXTRA_ADDRESS_BOOK_INDEX_TITLES.get(_class, const jni$_.JStringNullableType());

  static final _id_FORMATTED_ADDRESS = _class.staticFieldId(
    r'FORMATTED_ADDRESS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FORMATTED_ADDRESS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get FORMATTED_ADDRESS => _id_FORMATTED_ADDRESS.get(_class, const jni$_.JStringNullableType());

  static final _id_NEIGHBORHOOD = _class.staticFieldId(
    r'NEIGHBORHOOD',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String NEIGHBORHOOD`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get NEIGHBORHOOD => _id_NEIGHBORHOOD.get(_class, const jni$_.JStringNullableType());

  static final _id_POBOX = _class.staticFieldId(
    r'POBOX',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String POBOX`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get POBOX => _id_POBOX.get(_class, const jni$_.JStringNullableType());

  static final _id_POSTCODE = _class.staticFieldId(
    r'POSTCODE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String POSTCODE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get POSTCODE => _id_POSTCODE.get(_class, const jni$_.JStringNullableType());

  static final _id_REGION = _class.staticFieldId(
    r'REGION',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String REGION`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get REGION => _id_REGION.get(_class, const jni$_.JStringNullableType());

  static final _id_STREET = _class.staticFieldId(
    r'STREET',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String STREET`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get STREET => _id_STREET.get(_class, const jni$_.JStringNullableType());

  /// from: `static public final int TYPE_HOME`
  static const TYPE_HOME = 1;

  /// from: `static public final int TYPE_OTHER`
  static const TYPE_OTHER = 3;

  /// from: `static public final int TYPE_WORK`
  static const TYPE_WORK = 2;
  static final _id_getTypeLabelResource = _class.staticMethodId(
    r'getTypeLabelResource',
    r'(I)I',
  );

  static final _getTypeLabelResource =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallStaticIntMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `static public int getTypeLabelResource(int i)`
  static int getTypeLabelResource(
    int i,
  ) {
    return _getTypeLabelResource(_class.reference.pointer, _id_getTypeLabelResource as jni$_.JMethodIDPtr, i).integer;
  }

  static final _id_getTypeLabel = _class.staticMethodId(
    r'getTypeLabel',
    r'(Landroid/content/res/Resources;ILjava/lang/CharSequence;)Ljava/lang/CharSequence;',
  );

  static final _getTypeLabel =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public java.lang.CharSequence getTypeLabel(android.content.res.Resources resources, int i, java.lang.CharSequence charSequence)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JObject? getTypeLabel(
    jni$_.JObject? resources,
    int i,
    jni$_.JObject? charSequence,
  ) {
    final _$resources = resources?.reference ?? jni$_.jNullReference;
    final _$charSequence = charSequence?.reference ?? jni$_.jNullReference;
    return _getTypeLabel(
      _class.reference.pointer,
      _id_getTypeLabel as jni$_.JMethodIDPtr,
      _$resources.pointer,
      i,
      _$charSequence.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }
}

final class $ContactsContract$CommonDataKinds$StructuredPostal$NullableType
    extends jni$_.JObjType<ContactsContract$CommonDataKinds$StructuredPostal?> {
  @jni$_.internal
  const $ContactsContract$CommonDataKinds$StructuredPostal$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$CommonDataKinds$StructuredPostal;';

  @jni$_.internal
  @core$_.override
  ContactsContract$CommonDataKinds$StructuredPostal? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : ContactsContract$CommonDataKinds$StructuredPostal.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$CommonDataKinds$StructuredPostal?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$CommonDataKinds$StructuredPostal$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$CommonDataKinds$StructuredPostal$NullableType) &&
        other is $ContactsContract$CommonDataKinds$StructuredPostal$NullableType;
  }
}

final class $ContactsContract$CommonDataKinds$StructuredPostal$Type
    extends jni$_.JObjType<ContactsContract$CommonDataKinds$StructuredPostal> {
  @jni$_.internal
  const $ContactsContract$CommonDataKinds$StructuredPostal$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$CommonDataKinds$StructuredPostal;';

  @jni$_.internal
  @core$_.override
  ContactsContract$CommonDataKinds$StructuredPostal fromReference(jni$_.JReference reference) =>
      ContactsContract$CommonDataKinds$StructuredPostal.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$CommonDataKinds$StructuredPostal?> get nullableType =>
      const $ContactsContract$CommonDataKinds$StructuredPostal$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$CommonDataKinds$StructuredPostal$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$CommonDataKinds$StructuredPostal$Type) &&
        other is $ContactsContract$CommonDataKinds$StructuredPostal$Type;
  }
}

/// from: `android.provider.ContactsContract$CommonDataKinds$Website`
class ContactsContract$CommonDataKinds$Website extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ContactsContract$CommonDataKinds$Website> $type;

  @jni$_.internal
  ContactsContract$CommonDataKinds$Website.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/provider/ContactsContract$CommonDataKinds$Website');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ContactsContract$CommonDataKinds$Website$NullableType();
  static const type = $ContactsContract$CommonDataKinds$Website$Type();
  static final _id_CONTENT_ITEM_TYPE = _class.staticFieldId(
    r'CONTENT_ITEM_TYPE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CONTENT_ITEM_TYPE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CONTENT_ITEM_TYPE => _id_CONTENT_ITEM_TYPE.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ADDRESS_BOOK_INDEX = _class.staticFieldId(
    r'EXTRA_ADDRESS_BOOK_INDEX',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ADDRESS_BOOK_INDEX`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ADDRESS_BOOK_INDEX =>
      _id_EXTRA_ADDRESS_BOOK_INDEX.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ADDRESS_BOOK_INDEX_COUNTS = _class.staticFieldId(
    r'EXTRA_ADDRESS_BOOK_INDEX_COUNTS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ADDRESS_BOOK_INDEX_COUNTS =>
      _id_EXTRA_ADDRESS_BOOK_INDEX_COUNTS.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ADDRESS_BOOK_INDEX_TITLES = _class.staticFieldId(
    r'EXTRA_ADDRESS_BOOK_INDEX_TITLES',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ADDRESS_BOOK_INDEX_TITLES =>
      _id_EXTRA_ADDRESS_BOOK_INDEX_TITLES.get(_class, const jni$_.JStringNullableType());

  /// from: `static public final int TYPE_BLOG`
  static const TYPE_BLOG = 2;

  /// from: `static public final int TYPE_FTP`
  static const TYPE_FTP = 6;

  /// from: `static public final int TYPE_HOME`
  static const TYPE_HOME = 4;

  /// from: `static public final int TYPE_HOMEPAGE`
  static const TYPE_HOMEPAGE = 1;

  /// from: `static public final int TYPE_OTHER`
  static const TYPE_OTHER = 7;

  /// from: `static public final int TYPE_PROFILE`
  static const TYPE_PROFILE = 3;

  /// from: `static public final int TYPE_WORK`
  static const TYPE_WORK = 5;
  static final _id_URL = _class.staticFieldId(
    r'URL',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String URL`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get URL => _id_URL.get(_class, const jni$_.JStringNullableType());
}

final class $ContactsContract$CommonDataKinds$Website$NullableType
    extends jni$_.JObjType<ContactsContract$CommonDataKinds$Website?> {
  @jni$_.internal
  const $ContactsContract$CommonDataKinds$Website$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$CommonDataKinds$Website;';

  @jni$_.internal
  @core$_.override
  ContactsContract$CommonDataKinds$Website? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : ContactsContract$CommonDataKinds$Website.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$CommonDataKinds$Website?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$CommonDataKinds$Website$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$CommonDataKinds$Website$NullableType) &&
        other is $ContactsContract$CommonDataKinds$Website$NullableType;
  }
}

final class $ContactsContract$CommonDataKinds$Website$Type
    extends jni$_.JObjType<ContactsContract$CommonDataKinds$Website> {
  @jni$_.internal
  const $ContactsContract$CommonDataKinds$Website$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$CommonDataKinds$Website;';

  @jni$_.internal
  @core$_.override
  ContactsContract$CommonDataKinds$Website fromReference(jni$_.JReference reference) =>
      ContactsContract$CommonDataKinds$Website.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$CommonDataKinds$Website?> get nullableType =>
      const $ContactsContract$CommonDataKinds$Website$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$CommonDataKinds$Website$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$CommonDataKinds$Website$Type) &&
        other is $ContactsContract$CommonDataKinds$Website$Type;
  }
}

/// from: `android.provider.ContactsContract$CommonDataKinds`
class ContactsContract$CommonDataKinds extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ContactsContract$CommonDataKinds> $type;

  @jni$_.internal
  ContactsContract$CommonDataKinds.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/provider/ContactsContract$CommonDataKinds');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ContactsContract$CommonDataKinds$NullableType();
  static const type = $ContactsContract$CommonDataKinds$Type();
}

final class $ContactsContract$CommonDataKinds$NullableType extends jni$_.JObjType<ContactsContract$CommonDataKinds?> {
  @jni$_.internal
  const $ContactsContract$CommonDataKinds$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$CommonDataKinds;';

  @jni$_.internal
  @core$_.override
  ContactsContract$CommonDataKinds? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : ContactsContract$CommonDataKinds.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$CommonDataKinds?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$CommonDataKinds$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$CommonDataKinds$NullableType) &&
        other is $ContactsContract$CommonDataKinds$NullableType;
  }
}

final class $ContactsContract$CommonDataKinds$Type extends jni$_.JObjType<ContactsContract$CommonDataKinds> {
  @jni$_.internal
  const $ContactsContract$CommonDataKinds$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$CommonDataKinds;';

  @jni$_.internal
  @core$_.override
  ContactsContract$CommonDataKinds fromReference(jni$_.JReference reference) =>
      ContactsContract$CommonDataKinds.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$CommonDataKinds?> get nullableType =>
      const $ContactsContract$CommonDataKinds$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$CommonDataKinds$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$CommonDataKinds$Type) &&
        other is $ContactsContract$CommonDataKinds$Type;
  }
}

/// from: `android.provider.ContactsContract$Contacts$AggregationSuggestions$Builder`
class ContactsContract$Contacts$AggregationSuggestions$Builder extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ContactsContract$Contacts$AggregationSuggestions$Builder> $type;

  @jni$_.internal
  ContactsContract$Contacts$AggregationSuggestions$Builder.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
    r'android/provider/ContactsContract$Contacts$AggregationSuggestions$Builder',
  );

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ContactsContract$Contacts$AggregationSuggestions$Builder$NullableType();
  static const type = $ContactsContract$Contacts$AggregationSuggestions$Builder$Type();
  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory ContactsContract$Contacts$AggregationSuggestions$Builder() {
    return ContactsContract$Contacts$AggregationSuggestions$Builder.fromReference(
      _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr).reference,
    );
  }

  static final _id_setContactId = _class.instanceMethodId(
    r'setContactId',
    r'(J)Landroid/provider/ContactsContract$Contacts$AggregationSuggestions$Builder;',
  );

  static final _setContactId =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int64,)>)
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public android.provider.ContactsContract$Contacts$AggregationSuggestions$Builder setContactId(long j)`
  /// The returned object must be released after use, by calling the [release] method.
  ContactsContract$Contacts$AggregationSuggestions$Builder? setContactId(
    int j,
  ) {
    return _setContactId(
      reference.pointer,
      _id_setContactId as jni$_.JMethodIDPtr,
      j,
    ).object<ContactsContract$Contacts$AggregationSuggestions$Builder?>(
      const $ContactsContract$Contacts$AggregationSuggestions$Builder$NullableType(),
    );
  }

  static final _id_addNameParameter = _class.instanceMethodId(
    r'addNameParameter',
    r'(Ljava/lang/String;)Landroid/provider/ContactsContract$Contacts$AggregationSuggestions$Builder;',
  );

  static final _addNameParameter =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public android.provider.ContactsContract$Contacts$AggregationSuggestions$Builder addNameParameter(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  ContactsContract$Contacts$AggregationSuggestions$Builder? addNameParameter(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _addNameParameter(
      reference.pointer,
      _id_addNameParameter as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<ContactsContract$Contacts$AggregationSuggestions$Builder?>(
      const $ContactsContract$Contacts$AggregationSuggestions$Builder$NullableType(),
    );
  }

  static final _id_setLimit = _class.instanceMethodId(
    r'setLimit',
    r'(I)Landroid/provider/ContactsContract$Contacts$AggregationSuggestions$Builder;',
  );

  static final _setLimit =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public android.provider.ContactsContract$Contacts$AggregationSuggestions$Builder setLimit(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  ContactsContract$Contacts$AggregationSuggestions$Builder? setLimit(
    int i,
  ) {
    return _setLimit(
      reference.pointer,
      _id_setLimit as jni$_.JMethodIDPtr,
      i,
    ).object<ContactsContract$Contacts$AggregationSuggestions$Builder?>(
      const $ContactsContract$Contacts$AggregationSuggestions$Builder$NullableType(),
    );
  }

  static final _id_build = _class.instanceMethodId(
    r'build',
    r'()Landroid/net/Uri;',
  );

  static final _build =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.net.Uri build()`
  /// The returned object must be released after use, by calling the [release] method.
  Uri? build() {
    return _build(reference.pointer, _id_build as jni$_.JMethodIDPtr).object<Uri?>(const $Uri$NullableType());
  }
}

final class $ContactsContract$Contacts$AggregationSuggestions$Builder$NullableType
    extends jni$_.JObjType<ContactsContract$Contacts$AggregationSuggestions$Builder?> {
  @jni$_.internal
  const $ContactsContract$Contacts$AggregationSuggestions$Builder$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$Contacts$AggregationSuggestions$Builder;';

  @jni$_.internal
  @core$_.override
  ContactsContract$Contacts$AggregationSuggestions$Builder? fromReference(jni$_.JReference reference) =>
      reference.isNull
      ? null
      : ContactsContract$Contacts$AggregationSuggestions$Builder.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$Contacts$AggregationSuggestions$Builder?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$Contacts$AggregationSuggestions$Builder$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$Contacts$AggregationSuggestions$Builder$NullableType) &&
        other is $ContactsContract$Contacts$AggregationSuggestions$Builder$NullableType;
  }
}

final class $ContactsContract$Contacts$AggregationSuggestions$Builder$Type
    extends jni$_.JObjType<ContactsContract$Contacts$AggregationSuggestions$Builder> {
  @jni$_.internal
  const $ContactsContract$Contacts$AggregationSuggestions$Builder$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$Contacts$AggregationSuggestions$Builder;';

  @jni$_.internal
  @core$_.override
  ContactsContract$Contacts$AggregationSuggestions$Builder fromReference(jni$_.JReference reference) =>
      ContactsContract$Contacts$AggregationSuggestions$Builder.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$Contacts$AggregationSuggestions$Builder?> get nullableType =>
      const $ContactsContract$Contacts$AggregationSuggestions$Builder$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$Contacts$AggregationSuggestions$Builder$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$Contacts$AggregationSuggestions$Builder$Type) &&
        other is $ContactsContract$Contacts$AggregationSuggestions$Builder$Type;
  }
}

/// from: `android.provider.ContactsContract$Contacts$AggregationSuggestions`
class ContactsContract$Contacts$AggregationSuggestions extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ContactsContract$Contacts$AggregationSuggestions> $type;

  @jni$_.internal
  ContactsContract$Contacts$AggregationSuggestions.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/provider/ContactsContract$Contacts$AggregationSuggestions');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ContactsContract$Contacts$AggregationSuggestions$NullableType();
  static const type = $ContactsContract$Contacts$AggregationSuggestions$Type();
  static final _id_CONTENT_DIRECTORY = _class.staticFieldId(
    r'CONTENT_DIRECTORY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CONTENT_DIRECTORY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CONTENT_DIRECTORY => _id_CONTENT_DIRECTORY.get(_class, const jni$_.JStringNullableType());
}

final class $ContactsContract$Contacts$AggregationSuggestions$NullableType
    extends jni$_.JObjType<ContactsContract$Contacts$AggregationSuggestions?> {
  @jni$_.internal
  const $ContactsContract$Contacts$AggregationSuggestions$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$Contacts$AggregationSuggestions;';

  @jni$_.internal
  @core$_.override
  ContactsContract$Contacts$AggregationSuggestions? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : ContactsContract$Contacts$AggregationSuggestions.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$Contacts$AggregationSuggestions?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$Contacts$AggregationSuggestions$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$Contacts$AggregationSuggestions$NullableType) &&
        other is $ContactsContract$Contacts$AggregationSuggestions$NullableType;
  }
}

final class $ContactsContract$Contacts$AggregationSuggestions$Type
    extends jni$_.JObjType<ContactsContract$Contacts$AggregationSuggestions> {
  @jni$_.internal
  const $ContactsContract$Contacts$AggregationSuggestions$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$Contacts$AggregationSuggestions;';

  @jni$_.internal
  @core$_.override
  ContactsContract$Contacts$AggregationSuggestions fromReference(jni$_.JReference reference) =>
      ContactsContract$Contacts$AggregationSuggestions.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$Contacts$AggregationSuggestions?> get nullableType =>
      const $ContactsContract$Contacts$AggregationSuggestions$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$Contacts$AggregationSuggestions$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$Contacts$AggregationSuggestions$Type) &&
        other is $ContactsContract$Contacts$AggregationSuggestions$Type;
  }
}

/// from: `android.provider.ContactsContract$Contacts$Data`
class ContactsContract$Contacts$Data extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ContactsContract$Contacts$Data> $type;

  @jni$_.internal
  ContactsContract$Contacts$Data.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/provider/ContactsContract$Contacts$Data');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ContactsContract$Contacts$Data$NullableType();
  static const type = $ContactsContract$Contacts$Data$Type();
  static final _id_CONTENT_DIRECTORY = _class.staticFieldId(
    r'CONTENT_DIRECTORY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CONTENT_DIRECTORY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CONTENT_DIRECTORY => _id_CONTENT_DIRECTORY.get(_class, const jni$_.JStringNullableType());
}

final class $ContactsContract$Contacts$Data$NullableType extends jni$_.JObjType<ContactsContract$Contacts$Data?> {
  @jni$_.internal
  const $ContactsContract$Contacts$Data$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$Contacts$Data;';

  @jni$_.internal
  @core$_.override
  ContactsContract$Contacts$Data? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : ContactsContract$Contacts$Data.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$Contacts$Data?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$Contacts$Data$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$Contacts$Data$NullableType) &&
        other is $ContactsContract$Contacts$Data$NullableType;
  }
}

final class $ContactsContract$Contacts$Data$Type extends jni$_.JObjType<ContactsContract$Contacts$Data> {
  @jni$_.internal
  const $ContactsContract$Contacts$Data$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$Contacts$Data;';

  @jni$_.internal
  @core$_.override
  ContactsContract$Contacts$Data fromReference(jni$_.JReference reference) =>
      ContactsContract$Contacts$Data.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$Contacts$Data?> get nullableType =>
      const $ContactsContract$Contacts$Data$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$Contacts$Data$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$Contacts$Data$Type) && other is $ContactsContract$Contacts$Data$Type;
  }
}

/// from: `android.provider.ContactsContract$Contacts$Entity`
class ContactsContract$Contacts$Entity extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ContactsContract$Contacts$Entity> $type;

  @jni$_.internal
  ContactsContract$Contacts$Entity.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/provider/ContactsContract$Contacts$Entity');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ContactsContract$Contacts$Entity$NullableType();
  static const type = $ContactsContract$Contacts$Entity$Type();
  static final _id_CONTENT_DIRECTORY = _class.staticFieldId(
    r'CONTENT_DIRECTORY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CONTENT_DIRECTORY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CONTENT_DIRECTORY => _id_CONTENT_DIRECTORY.get(_class, const jni$_.JStringNullableType());

  static final _id_DATA_ID = _class.staticFieldId(
    r'DATA_ID',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String DATA_ID`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get DATA_ID => _id_DATA_ID.get(_class, const jni$_.JStringNullableType());

  static final _id_RAW_CONTACT_ID = _class.staticFieldId(
    r'RAW_CONTACT_ID',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String RAW_CONTACT_ID`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get RAW_CONTACT_ID => _id_RAW_CONTACT_ID.get(_class, const jni$_.JStringNullableType());
}

final class $ContactsContract$Contacts$Entity$NullableType extends jni$_.JObjType<ContactsContract$Contacts$Entity?> {
  @jni$_.internal
  const $ContactsContract$Contacts$Entity$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$Contacts$Entity;';

  @jni$_.internal
  @core$_.override
  ContactsContract$Contacts$Entity? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : ContactsContract$Contacts$Entity.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$Contacts$Entity?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$Contacts$Entity$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$Contacts$Entity$NullableType) &&
        other is $ContactsContract$Contacts$Entity$NullableType;
  }
}

final class $ContactsContract$Contacts$Entity$Type extends jni$_.JObjType<ContactsContract$Contacts$Entity> {
  @jni$_.internal
  const $ContactsContract$Contacts$Entity$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$Contacts$Entity;';

  @jni$_.internal
  @core$_.override
  ContactsContract$Contacts$Entity fromReference(jni$_.JReference reference) =>
      ContactsContract$Contacts$Entity.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$Contacts$Entity?> get nullableType =>
      const $ContactsContract$Contacts$Entity$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$Contacts$Entity$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$Contacts$Entity$Type) &&
        other is $ContactsContract$Contacts$Entity$Type;
  }
}

/// from: `android.provider.ContactsContract$Contacts$Photo`
class ContactsContract$Contacts$Photo extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ContactsContract$Contacts$Photo> $type;

  @jni$_.internal
  ContactsContract$Contacts$Photo.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/provider/ContactsContract$Contacts$Photo');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ContactsContract$Contacts$Photo$NullableType();
  static const type = $ContactsContract$Contacts$Photo$Type();
  static final _id_CONTENT_DIRECTORY = _class.staticFieldId(
    r'CONTENT_DIRECTORY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CONTENT_DIRECTORY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CONTENT_DIRECTORY => _id_CONTENT_DIRECTORY.get(_class, const jni$_.JStringNullableType());

  static final _id_DISPLAY_PHOTO = _class.staticFieldId(
    r'DISPLAY_PHOTO',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String DISPLAY_PHOTO`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get DISPLAY_PHOTO => _id_DISPLAY_PHOTO.get(_class, const jni$_.JStringNullableType());

  static final _id_PHOTO = _class.staticFieldId(
    r'PHOTO',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String PHOTO`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get PHOTO => _id_PHOTO.get(_class, const jni$_.JStringNullableType());

  static final _id_PHOTO_FILE_ID = _class.staticFieldId(
    r'PHOTO_FILE_ID',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String PHOTO_FILE_ID`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get PHOTO_FILE_ID => _id_PHOTO_FILE_ID.get(_class, const jni$_.JStringNullableType());
}

final class $ContactsContract$Contacts$Photo$NullableType extends jni$_.JObjType<ContactsContract$Contacts$Photo?> {
  @jni$_.internal
  const $ContactsContract$Contacts$Photo$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$Contacts$Photo;';

  @jni$_.internal
  @core$_.override
  ContactsContract$Contacts$Photo? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : ContactsContract$Contacts$Photo.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$Contacts$Photo?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$Contacts$Photo$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$Contacts$Photo$NullableType) &&
        other is $ContactsContract$Contacts$Photo$NullableType;
  }
}

final class $ContactsContract$Contacts$Photo$Type extends jni$_.JObjType<ContactsContract$Contacts$Photo> {
  @jni$_.internal
  const $ContactsContract$Contacts$Photo$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$Contacts$Photo;';

  @jni$_.internal
  @core$_.override
  ContactsContract$Contacts$Photo fromReference(jni$_.JReference reference) =>
      ContactsContract$Contacts$Photo.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$Contacts$Photo?> get nullableType =>
      const $ContactsContract$Contacts$Photo$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$Contacts$Photo$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$Contacts$Photo$Type) &&
        other is $ContactsContract$Contacts$Photo$Type;
  }
}

/// from: `android.provider.ContactsContract$Contacts`
class ContactsContract$Contacts extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ContactsContract$Contacts> $type;

  @jni$_.internal
  ContactsContract$Contacts.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/provider/ContactsContract$Contacts');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ContactsContract$Contacts$NullableType();
  static const type = $ContactsContract$Contacts$Type();
  static final _id_CONTENT_FILTER_URI = _class.staticFieldId(
    r'CONTENT_FILTER_URI',
    r'Landroid/net/Uri;',
  );

  /// from: `static public final android.net.Uri CONTENT_FILTER_URI`
  /// The returned object must be released after use, by calling the [release] method.
  static Uri? get CONTENT_FILTER_URI => _id_CONTENT_FILTER_URI.get(_class, const $Uri$NullableType());

  static final _id_CONTENT_FREQUENT_URI = _class.staticFieldId(
    r'CONTENT_FREQUENT_URI',
    r'Landroid/net/Uri;',
  );

  /// from: `static public final android.net.Uri CONTENT_FREQUENT_URI`
  /// The returned object must be released after use, by calling the [release] method.
  static Uri? get CONTENT_FREQUENT_URI => _id_CONTENT_FREQUENT_URI.get(_class, const $Uri$NullableType());

  static final _id_CONTENT_GROUP_URI = _class.staticFieldId(
    r'CONTENT_GROUP_URI',
    r'Landroid/net/Uri;',
  );

  /// from: `static public final android.net.Uri CONTENT_GROUP_URI`
  /// The returned object must be released after use, by calling the [release] method.
  static Uri? get CONTENT_GROUP_URI => _id_CONTENT_GROUP_URI.get(_class, const $Uri$NullableType());

  static final _id_CONTENT_ITEM_TYPE = _class.staticFieldId(
    r'CONTENT_ITEM_TYPE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CONTENT_ITEM_TYPE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CONTENT_ITEM_TYPE => _id_CONTENT_ITEM_TYPE.get(_class, const jni$_.JStringNullableType());

  static final _id_CONTENT_LOOKUP_URI = _class.staticFieldId(
    r'CONTENT_LOOKUP_URI',
    r'Landroid/net/Uri;',
  );

  /// from: `static public final android.net.Uri CONTENT_LOOKUP_URI`
  /// The returned object must be released after use, by calling the [release] method.
  static Uri? get CONTENT_LOOKUP_URI => _id_CONTENT_LOOKUP_URI.get(_class, const $Uri$NullableType());

  static final _id_CONTENT_MULTI_VCARD_URI = _class.staticFieldId(
    r'CONTENT_MULTI_VCARD_URI',
    r'Landroid/net/Uri;',
  );

  /// from: `static public final android.net.Uri CONTENT_MULTI_VCARD_URI`
  /// The returned object must be released after use, by calling the [release] method.
  static Uri? get CONTENT_MULTI_VCARD_URI => _id_CONTENT_MULTI_VCARD_URI.get(_class, const $Uri$NullableType());

  static final _id_CONTENT_STREQUENT_FILTER_URI = _class.staticFieldId(
    r'CONTENT_STREQUENT_FILTER_URI',
    r'Landroid/net/Uri;',
  );

  /// from: `static public final android.net.Uri CONTENT_STREQUENT_FILTER_URI`
  /// The returned object must be released after use, by calling the [release] method.
  static Uri? get CONTENT_STREQUENT_FILTER_URI =>
      _id_CONTENT_STREQUENT_FILTER_URI.get(_class, const $Uri$NullableType());

  static final _id_CONTENT_STREQUENT_URI = _class.staticFieldId(
    r'CONTENT_STREQUENT_URI',
    r'Landroid/net/Uri;',
  );

  /// from: `static public final android.net.Uri CONTENT_STREQUENT_URI`
  /// The returned object must be released after use, by calling the [release] method.
  static Uri? get CONTENT_STREQUENT_URI => _id_CONTENT_STREQUENT_URI.get(_class, const $Uri$NullableType());

  static final _id_CONTENT_TYPE = _class.staticFieldId(
    r'CONTENT_TYPE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CONTENT_TYPE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CONTENT_TYPE => _id_CONTENT_TYPE.get(_class, const jni$_.JStringNullableType());

  static final _id_CONTENT_URI = _class.staticFieldId(
    r'CONTENT_URI',
    r'Landroid/net/Uri;',
  );

  /// from: `static public final android.net.Uri CONTENT_URI`
  /// The returned object must be released after use, by calling the [release] method.
  static Uri? get CONTENT_URI => _id_CONTENT_URI.get(_class, const $Uri$NullableType());

  static final _id_CONTENT_VCARD_TYPE = _class.staticFieldId(
    r'CONTENT_VCARD_TYPE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CONTENT_VCARD_TYPE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CONTENT_VCARD_TYPE => _id_CONTENT_VCARD_TYPE.get(_class, const jni$_.JStringNullableType());

  static final _id_CONTENT_VCARD_URI = _class.staticFieldId(
    r'CONTENT_VCARD_URI',
    r'Landroid/net/Uri;',
  );

  /// from: `static public final android.net.Uri CONTENT_VCARD_URI`
  /// The returned object must be released after use, by calling the [release] method.
  static Uri? get CONTENT_VCARD_URI => _id_CONTENT_VCARD_URI.get(_class, const $Uri$NullableType());

  static final _id_ENTERPRISE_CONTENT_FILTER_URI = _class.staticFieldId(
    r'ENTERPRISE_CONTENT_FILTER_URI',
    r'Landroid/net/Uri;',
  );

  /// from: `static public final android.net.Uri ENTERPRISE_CONTENT_FILTER_URI`
  /// The returned object must be released after use, by calling the [release] method.
  static Uri? get ENTERPRISE_CONTENT_FILTER_URI =>
      _id_ENTERPRISE_CONTENT_FILTER_URI.get(_class, const $Uri$NullableType());

  static final _id_ENTERPRISE_CONTENT_URI = _class.staticFieldId(
    r'ENTERPRISE_CONTENT_URI',
    r'Landroid/net/Uri;',
  );

  /// from: `static public final android.net.Uri ENTERPRISE_CONTENT_URI`
  /// The returned object must be released after use, by calling the [release] method.
  static Uri? get ENTERPRISE_CONTENT_URI => _id_ENTERPRISE_CONTENT_URI.get(_class, const $Uri$NullableType());

  static final _id_EXTRA_ADDRESS_BOOK_INDEX = _class.staticFieldId(
    r'EXTRA_ADDRESS_BOOK_INDEX',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ADDRESS_BOOK_INDEX`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ADDRESS_BOOK_INDEX =>
      _id_EXTRA_ADDRESS_BOOK_INDEX.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ADDRESS_BOOK_INDEX_COUNTS = _class.staticFieldId(
    r'EXTRA_ADDRESS_BOOK_INDEX_COUNTS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ADDRESS_BOOK_INDEX_COUNTS =>
      _id_EXTRA_ADDRESS_BOOK_INDEX_COUNTS.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ADDRESS_BOOK_INDEX_TITLES = _class.staticFieldId(
    r'EXTRA_ADDRESS_BOOK_INDEX_TITLES',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ADDRESS_BOOK_INDEX_TITLES =>
      _id_EXTRA_ADDRESS_BOOK_INDEX_TITLES.get(_class, const jni$_.JStringNullableType());

  static final _id_QUERY_PARAMETER_VCARD_NO_PHOTO = _class.staticFieldId(
    r'QUERY_PARAMETER_VCARD_NO_PHOTO',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String QUERY_PARAMETER_VCARD_NO_PHOTO`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get QUERY_PARAMETER_VCARD_NO_PHOTO =>
      _id_QUERY_PARAMETER_VCARD_NO_PHOTO.get(_class, const jni$_.JStringNullableType());

  static final _id_getLookupUri = _class.staticMethodId(
    r'getLookupUri',
    r'(Landroid/content/ContentResolver;Landroid/net/Uri;)Landroid/net/Uri;',
  );

  static final _getLookupUri =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public android.net.Uri getLookupUri(android.content.ContentResolver contentResolver, android.net.Uri uri)`
  /// The returned object must be released after use, by calling the [release] method.
  static Uri? getLookupUri(
    jni$_.JObject? contentResolver,
    Uri? uri,
  ) {
    final _$contentResolver = contentResolver?.reference ?? jni$_.jNullReference;
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    return _getLookupUri(
      _class.reference.pointer,
      _id_getLookupUri as jni$_.JMethodIDPtr,
      _$contentResolver.pointer,
      _$uri.pointer,
    ).object<Uri?>(const $Uri$NullableType());
  }

  static final _id_getLookupUri$1 = _class.staticMethodId(
    r'getLookupUri',
    r'(JLjava/lang/String;)Landroid/net/Uri;',
  );

  static final _getLookupUri$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int64, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `static public android.net.Uri getLookupUri(long j, java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static Uri? getLookupUri$1(
    int j,
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _getLookupUri$1(
      _class.reference.pointer,
      _id_getLookupUri$1 as jni$_.JMethodIDPtr,
      j,
      _$string.pointer,
    ).object<Uri?>(const $Uri$NullableType());
  }

  static final _id_lookupContact = _class.staticMethodId(
    r'lookupContact',
    r'(Landroid/content/ContentResolver;Landroid/net/Uri;)Landroid/net/Uri;',
  );

  static final _lookupContact =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public android.net.Uri lookupContact(android.content.ContentResolver contentResolver, android.net.Uri uri)`
  /// The returned object must be released after use, by calling the [release] method.
  static Uri? lookupContact(
    jni$_.JObject? contentResolver,
    Uri? uri,
  ) {
    final _$contentResolver = contentResolver?.reference ?? jni$_.jNullReference;
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    return _lookupContact(
      _class.reference.pointer,
      _id_lookupContact as jni$_.JMethodIDPtr,
      _$contentResolver.pointer,
      _$uri.pointer,
    ).object<Uri?>(const $Uri$NullableType());
  }

  static final _id_markAsContacted = _class.staticMethodId(
    r'markAsContacted',
    r'(Landroid/content/ContentResolver;J)V',
  );

  static final _markAsContacted =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int64)>,
              )
            >
          >('globalEnv_CallStaticVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)
          >();

  /// from: `static public void markAsContacted(android.content.ContentResolver contentResolver, long j)`
  static void markAsContacted(
    jni$_.JObject? contentResolver,
    int j,
  ) {
    final _$contentResolver = contentResolver?.reference ?? jni$_.jNullReference;
    _markAsContacted(
      _class.reference.pointer,
      _id_markAsContacted as jni$_.JMethodIDPtr,
      _$contentResolver.pointer,
      j,
    ).check();
  }

  static final _id_isEnterpriseContactId = _class.staticMethodId(
    r'isEnterpriseContactId',
    r'(J)Z',
  );

  static final _isEnterpriseContactId =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int64,)>)
            >
          >('globalEnv_CallStaticBooleanMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `static public boolean isEnterpriseContactId(long j)`
  static bool isEnterpriseContactId(
    int j,
  ) {
    return _isEnterpriseContactId(_class.reference.pointer, _id_isEnterpriseContactId as jni$_.JMethodIDPtr, j).boolean;
  }

  static final _id_openContactPhotoInputStream = _class.staticMethodId(
    r'openContactPhotoInputStream',
    r'(Landroid/content/ContentResolver;Landroid/net/Uri;Z)Ljava/io/InputStream;',
  );

  static final _openContactPhotoInputStream =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `static public java.io.InputStream openContactPhotoInputStream(android.content.ContentResolver contentResolver, android.net.Uri uri, boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JObject? openContactPhotoInputStream(
    jni$_.JObject? contentResolver,
    Uri? uri,
    bool z,
  ) {
    final _$contentResolver = contentResolver?.reference ?? jni$_.jNullReference;
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    return _openContactPhotoInputStream(
      _class.reference.pointer,
      _id_openContactPhotoInputStream as jni$_.JMethodIDPtr,
      _$contentResolver.pointer,
      _$uri.pointer,
      z ? 1 : 0,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_openContactPhotoInputStream$1 = _class.staticMethodId(
    r'openContactPhotoInputStream',
    r'(Landroid/content/ContentResolver;Landroid/net/Uri;)Ljava/io/InputStream;',
  );

  static final _openContactPhotoInputStream$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public java.io.InputStream openContactPhotoInputStream(android.content.ContentResolver contentResolver, android.net.Uri uri)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JObject? openContactPhotoInputStream$1(
    jni$_.JObject? contentResolver,
    Uri? uri,
  ) {
    final _$contentResolver = contentResolver?.reference ?? jni$_.jNullReference;
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    return _openContactPhotoInputStream$1(
      _class.reference.pointer,
      _id_openContactPhotoInputStream$1 as jni$_.JMethodIDPtr,
      _$contentResolver.pointer,
      _$uri.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }
}

final class $ContactsContract$Contacts$NullableType extends jni$_.JObjType<ContactsContract$Contacts?> {
  @jni$_.internal
  const $ContactsContract$Contacts$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$Contacts;';

  @jni$_.internal
  @core$_.override
  ContactsContract$Contacts? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : ContactsContract$Contacts.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$Contacts?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$Contacts$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$Contacts$NullableType) &&
        other is $ContactsContract$Contacts$NullableType;
  }
}

final class $ContactsContract$Contacts$Type extends jni$_.JObjType<ContactsContract$Contacts> {
  @jni$_.internal
  const $ContactsContract$Contacts$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$Contacts;';

  @jni$_.internal
  @core$_.override
  ContactsContract$Contacts fromReference(jni$_.JReference reference) => ContactsContract$Contacts.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$Contacts?> get nullableType => const $ContactsContract$Contacts$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$Contacts$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$Contacts$Type) && other is $ContactsContract$Contacts$Type;
  }
}

/// from: `android.provider.ContactsContract$Data`
class ContactsContract$Data extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ContactsContract$Data> $type;

  @jni$_.internal
  ContactsContract$Data.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/provider/ContactsContract$Data');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ContactsContract$Data$NullableType();
  static const type = $ContactsContract$Data$Type();
  static final _id_CONTENT_TYPE = _class.staticFieldId(
    r'CONTENT_TYPE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CONTENT_TYPE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CONTENT_TYPE => _id_CONTENT_TYPE.get(_class, const jni$_.JStringNullableType());

  static final _id_CONTENT_URI = _class.staticFieldId(
    r'CONTENT_URI',
    r'Landroid/net/Uri;',
  );

  /// from: `static public final android.net.Uri CONTENT_URI`
  /// The returned object must be released after use, by calling the [release] method.
  static Uri? get CONTENT_URI => _id_CONTENT_URI.get(_class, const $Uri$NullableType());

  static final _id_EXTRA_ADDRESS_BOOK_INDEX = _class.staticFieldId(
    r'EXTRA_ADDRESS_BOOK_INDEX',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ADDRESS_BOOK_INDEX`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ADDRESS_BOOK_INDEX =>
      _id_EXTRA_ADDRESS_BOOK_INDEX.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ADDRESS_BOOK_INDEX_COUNTS = _class.staticFieldId(
    r'EXTRA_ADDRESS_BOOK_INDEX_COUNTS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ADDRESS_BOOK_INDEX_COUNTS =>
      _id_EXTRA_ADDRESS_BOOK_INDEX_COUNTS.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ADDRESS_BOOK_INDEX_TITLES = _class.staticFieldId(
    r'EXTRA_ADDRESS_BOOK_INDEX_TITLES',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ADDRESS_BOOK_INDEX_TITLES =>
      _id_EXTRA_ADDRESS_BOOK_INDEX_TITLES.get(_class, const jni$_.JStringNullableType());

  static final _id_VISIBLE_CONTACTS_ONLY = _class.staticFieldId(
    r'VISIBLE_CONTACTS_ONLY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String VISIBLE_CONTACTS_ONLY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get VISIBLE_CONTACTS_ONLY =>
      _id_VISIBLE_CONTACTS_ONLY.get(_class, const jni$_.JStringNullableType());

  static final _id_getContactLookupUri = _class.staticMethodId(
    r'getContactLookupUri',
    r'(Landroid/content/ContentResolver;Landroid/net/Uri;)Landroid/net/Uri;',
  );

  static final _getContactLookupUri =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public android.net.Uri getContactLookupUri(android.content.ContentResolver contentResolver, android.net.Uri uri)`
  /// The returned object must be released after use, by calling the [release] method.
  static Uri? getContactLookupUri(
    jni$_.JObject? contentResolver,
    Uri? uri,
  ) {
    final _$contentResolver = contentResolver?.reference ?? jni$_.jNullReference;
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    return _getContactLookupUri(
      _class.reference.pointer,
      _id_getContactLookupUri as jni$_.JMethodIDPtr,
      _$contentResolver.pointer,
      _$uri.pointer,
    ).object<Uri?>(const $Uri$NullableType());
  }
}

final class $ContactsContract$Data$NullableType extends jni$_.JObjType<ContactsContract$Data?> {
  @jni$_.internal
  const $ContactsContract$Data$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$Data;';

  @jni$_.internal
  @core$_.override
  ContactsContract$Data? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : ContactsContract$Data.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$Data?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$Data$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$Data$NullableType) && other is $ContactsContract$Data$NullableType;
  }
}

final class $ContactsContract$Data$Type extends jni$_.JObjType<ContactsContract$Data> {
  @jni$_.internal
  const $ContactsContract$Data$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$Data;';

  @jni$_.internal
  @core$_.override
  ContactsContract$Data fromReference(jni$_.JReference reference) => ContactsContract$Data.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$Data?> get nullableType => const $ContactsContract$Data$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$Data$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$Data$Type) && other is $ContactsContract$Data$Type;
  }
}

/// from: `android.provider.ContactsContract$DataUsageFeedback`
class ContactsContract$DataUsageFeedback extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ContactsContract$DataUsageFeedback> $type;

  @jni$_.internal
  ContactsContract$DataUsageFeedback.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/provider/ContactsContract$DataUsageFeedback');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ContactsContract$DataUsageFeedback$NullableType();
  static const type = $ContactsContract$DataUsageFeedback$Type();
  static final _id_DELETE_USAGE_URI = _class.staticFieldId(
    r'DELETE_USAGE_URI',
    r'Landroid/net/Uri;',
  );

  /// from: `static public final android.net.Uri DELETE_USAGE_URI`
  /// The returned object must be released after use, by calling the [release] method.
  static Uri? get DELETE_USAGE_URI => _id_DELETE_USAGE_URI.get(_class, const $Uri$NullableType());

  static final _id_FEEDBACK_URI = _class.staticFieldId(
    r'FEEDBACK_URI',
    r'Landroid/net/Uri;',
  );

  /// from: `static public final android.net.Uri FEEDBACK_URI`
  /// The returned object must be released after use, by calling the [release] method.
  static Uri? get FEEDBACK_URI => _id_FEEDBACK_URI.get(_class, const $Uri$NullableType());

  static final _id_USAGE_TYPE = _class.staticFieldId(
    r'USAGE_TYPE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String USAGE_TYPE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get USAGE_TYPE => _id_USAGE_TYPE.get(_class, const jni$_.JStringNullableType());

  static final _id_USAGE_TYPE_CALL = _class.staticFieldId(
    r'USAGE_TYPE_CALL',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String USAGE_TYPE_CALL`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get USAGE_TYPE_CALL => _id_USAGE_TYPE_CALL.get(_class, const jni$_.JStringNullableType());

  static final _id_USAGE_TYPE_LONG_TEXT = _class.staticFieldId(
    r'USAGE_TYPE_LONG_TEXT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String USAGE_TYPE_LONG_TEXT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get USAGE_TYPE_LONG_TEXT =>
      _id_USAGE_TYPE_LONG_TEXT.get(_class, const jni$_.JStringNullableType());

  static final _id_USAGE_TYPE_SHORT_TEXT = _class.staticFieldId(
    r'USAGE_TYPE_SHORT_TEXT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String USAGE_TYPE_SHORT_TEXT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get USAGE_TYPE_SHORT_TEXT =>
      _id_USAGE_TYPE_SHORT_TEXT.get(_class, const jni$_.JStringNullableType());

  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory ContactsContract$DataUsageFeedback() {
    return ContactsContract$DataUsageFeedback.fromReference(
      _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr).reference,
    );
  }
}

final class $ContactsContract$DataUsageFeedback$NullableType
    extends jni$_.JObjType<ContactsContract$DataUsageFeedback?> {
  @jni$_.internal
  const $ContactsContract$DataUsageFeedback$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$DataUsageFeedback;';

  @jni$_.internal
  @core$_.override
  ContactsContract$DataUsageFeedback? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : ContactsContract$DataUsageFeedback.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$DataUsageFeedback?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$DataUsageFeedback$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$DataUsageFeedback$NullableType) &&
        other is $ContactsContract$DataUsageFeedback$NullableType;
  }
}

final class $ContactsContract$DataUsageFeedback$Type extends jni$_.JObjType<ContactsContract$DataUsageFeedback> {
  @jni$_.internal
  const $ContactsContract$DataUsageFeedback$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$DataUsageFeedback;';

  @jni$_.internal
  @core$_.override
  ContactsContract$DataUsageFeedback fromReference(jni$_.JReference reference) =>
      ContactsContract$DataUsageFeedback.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$DataUsageFeedback?> get nullableType =>
      const $ContactsContract$DataUsageFeedback$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$DataUsageFeedback$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$DataUsageFeedback$Type) &&
        other is $ContactsContract$DataUsageFeedback$Type;
  }
}

/// from: `android.provider.ContactsContract$DeletedContacts`
class ContactsContract$DeletedContacts extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ContactsContract$DeletedContacts> $type;

  @jni$_.internal
  ContactsContract$DeletedContacts.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/provider/ContactsContract$DeletedContacts');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ContactsContract$DeletedContacts$NullableType();
  static const type = $ContactsContract$DeletedContacts$Type();
  static final _id_CONTENT_URI = _class.staticFieldId(
    r'CONTENT_URI',
    r'Landroid/net/Uri;',
  );

  /// from: `static public final android.net.Uri CONTENT_URI`
  /// The returned object must be released after use, by calling the [release] method.
  static Uri? get CONTENT_URI => _id_CONTENT_URI.get(_class, const $Uri$NullableType());

  /// from: `static public final long DAYS_KEPT_MILLISECONDS`
  static const DAYS_KEPT_MILLISECONDS = 2592000000;
}

final class $ContactsContract$DeletedContacts$NullableType extends jni$_.JObjType<ContactsContract$DeletedContacts?> {
  @jni$_.internal
  const $ContactsContract$DeletedContacts$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$DeletedContacts;';

  @jni$_.internal
  @core$_.override
  ContactsContract$DeletedContacts? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : ContactsContract$DeletedContacts.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$DeletedContacts?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$DeletedContacts$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$DeletedContacts$NullableType) &&
        other is $ContactsContract$DeletedContacts$NullableType;
  }
}

final class $ContactsContract$DeletedContacts$Type extends jni$_.JObjType<ContactsContract$DeletedContacts> {
  @jni$_.internal
  const $ContactsContract$DeletedContacts$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$DeletedContacts;';

  @jni$_.internal
  @core$_.override
  ContactsContract$DeletedContacts fromReference(jni$_.JReference reference) =>
      ContactsContract$DeletedContacts.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$DeletedContacts?> get nullableType =>
      const $ContactsContract$DeletedContacts$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$DeletedContacts$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$DeletedContacts$Type) &&
        other is $ContactsContract$DeletedContacts$Type;
  }
}

/// from: `android.provider.ContactsContract$Directory`
class ContactsContract$Directory extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ContactsContract$Directory> $type;

  @jni$_.internal
  ContactsContract$Directory.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/provider/ContactsContract$Directory');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ContactsContract$Directory$NullableType();
  static const type = $ContactsContract$Directory$Type();
  static final _id_ACCOUNT_NAME = _class.staticFieldId(
    r'ACCOUNT_NAME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACCOUNT_NAME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACCOUNT_NAME => _id_ACCOUNT_NAME.get(_class, const jni$_.JStringNullableType());

  static final _id_ACCOUNT_TYPE = _class.staticFieldId(
    r'ACCOUNT_TYPE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACCOUNT_TYPE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACCOUNT_TYPE => _id_ACCOUNT_TYPE.get(_class, const jni$_.JStringNullableType());

  static final _id_CALLER_PACKAGE_PARAM_KEY = _class.staticFieldId(
    r'CALLER_PACKAGE_PARAM_KEY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CALLER_PACKAGE_PARAM_KEY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CALLER_PACKAGE_PARAM_KEY =>
      _id_CALLER_PACKAGE_PARAM_KEY.get(_class, const jni$_.JStringNullableType());

  static final _id_CONTENT_ITEM_TYPE = _class.staticFieldId(
    r'CONTENT_ITEM_TYPE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CONTENT_ITEM_TYPE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CONTENT_ITEM_TYPE => _id_CONTENT_ITEM_TYPE.get(_class, const jni$_.JStringNullableType());

  static final _id_CONTENT_TYPE = _class.staticFieldId(
    r'CONTENT_TYPE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CONTENT_TYPE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CONTENT_TYPE => _id_CONTENT_TYPE.get(_class, const jni$_.JStringNullableType());

  static final _id_CONTENT_URI = _class.staticFieldId(
    r'CONTENT_URI',
    r'Landroid/net/Uri;',
  );

  /// from: `static public final android.net.Uri CONTENT_URI`
  /// The returned object must be released after use, by calling the [release] method.
  static Uri? get CONTENT_URI => _id_CONTENT_URI.get(_class, const $Uri$NullableType());

  /// from: `static public final long DEFAULT`
  static const DEFAULT = 0;
  static final _id_DIRECTORY_AUTHORITY = _class.staticFieldId(
    r'DIRECTORY_AUTHORITY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String DIRECTORY_AUTHORITY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get DIRECTORY_AUTHORITY =>
      _id_DIRECTORY_AUTHORITY.get(_class, const jni$_.JStringNullableType());

  static final _id_DISPLAY_NAME = _class.staticFieldId(
    r'DISPLAY_NAME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String DISPLAY_NAME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get DISPLAY_NAME => _id_DISPLAY_NAME.get(_class, const jni$_.JStringNullableType());

  static final _id_ENTERPRISE_CONTENT_URI = _class.staticFieldId(
    r'ENTERPRISE_CONTENT_URI',
    r'Landroid/net/Uri;',
  );

  /// from: `static public final android.net.Uri ENTERPRISE_CONTENT_URI`
  /// The returned object must be released after use, by calling the [release] method.
  static Uri? get ENTERPRISE_CONTENT_URI => _id_ENTERPRISE_CONTENT_URI.get(_class, const $Uri$NullableType());

  /// from: `static public final long ENTERPRISE_DEFAULT`
  static const ENTERPRISE_DEFAULT = 1000000000;

  /// from: `static public final long ENTERPRISE_LOCAL_INVISIBLE`
  static const ENTERPRISE_LOCAL_INVISIBLE = 1000000001;
  static final _id_EXPORT_SUPPORT = _class.staticFieldId(
    r'EXPORT_SUPPORT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXPORT_SUPPORT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXPORT_SUPPORT => _id_EXPORT_SUPPORT.get(_class, const jni$_.JStringNullableType());

  /// from: `static public final int EXPORT_SUPPORT_ANY_ACCOUNT`
  static const EXPORT_SUPPORT_ANY_ACCOUNT = 2;

  /// from: `static public final int EXPORT_SUPPORT_NONE`
  static const EXPORT_SUPPORT_NONE = 0;

  /// from: `static public final int EXPORT_SUPPORT_SAME_ACCOUNT_ONLY`
  static const EXPORT_SUPPORT_SAME_ACCOUNT_ONLY = 1;

  /// from: `static public final long LOCAL_INVISIBLE`
  static const LOCAL_INVISIBLE = 1;
  static final _id_PACKAGE_NAME = _class.staticFieldId(
    r'PACKAGE_NAME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String PACKAGE_NAME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get PACKAGE_NAME => _id_PACKAGE_NAME.get(_class, const jni$_.JStringNullableType());

  static final _id_PHOTO_SUPPORT = _class.staticFieldId(
    r'PHOTO_SUPPORT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String PHOTO_SUPPORT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get PHOTO_SUPPORT => _id_PHOTO_SUPPORT.get(_class, const jni$_.JStringNullableType());

  /// from: `static public final int PHOTO_SUPPORT_FULL`
  static const PHOTO_SUPPORT_FULL = 3;

  /// from: `static public final int PHOTO_SUPPORT_FULL_SIZE_ONLY`
  static const PHOTO_SUPPORT_FULL_SIZE_ONLY = 2;

  /// from: `static public final int PHOTO_SUPPORT_NONE`
  static const PHOTO_SUPPORT_NONE = 0;

  /// from: `static public final int PHOTO_SUPPORT_THUMBNAIL_ONLY`
  static const PHOTO_SUPPORT_THUMBNAIL_ONLY = 1;
  static final _id_SHORTCUT_SUPPORT = _class.staticFieldId(
    r'SHORTCUT_SUPPORT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SHORTCUT_SUPPORT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get SHORTCUT_SUPPORT => _id_SHORTCUT_SUPPORT.get(_class, const jni$_.JStringNullableType());

  /// from: `static public final int SHORTCUT_SUPPORT_DATA_ITEMS_ONLY`
  static const SHORTCUT_SUPPORT_DATA_ITEMS_ONLY = 1;

  /// from: `static public final int SHORTCUT_SUPPORT_FULL`
  static const SHORTCUT_SUPPORT_FULL = 2;

  /// from: `static public final int SHORTCUT_SUPPORT_NONE`
  static const SHORTCUT_SUPPORT_NONE = 0;
  static final _id_TYPE_RESOURCE_ID = _class.staticFieldId(
    r'TYPE_RESOURCE_ID',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String TYPE_RESOURCE_ID`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get TYPE_RESOURCE_ID => _id_TYPE_RESOURCE_ID.get(_class, const jni$_.JStringNullableType());

  static final _id_isRemoteDirectoryId = _class.staticMethodId(
    r'isRemoteDirectoryId',
    r'(J)Z',
  );

  static final _isRemoteDirectoryId =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int64,)>)
            >
          >('globalEnv_CallStaticBooleanMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `static public boolean isRemoteDirectoryId(long j)`
  static bool isRemoteDirectoryId(
    int j,
  ) {
    return _isRemoteDirectoryId(_class.reference.pointer, _id_isRemoteDirectoryId as jni$_.JMethodIDPtr, j).boolean;
  }

  static final _id_isEnterpriseDirectoryId = _class.staticMethodId(
    r'isEnterpriseDirectoryId',
    r'(J)Z',
  );

  static final _isEnterpriseDirectoryId =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int64,)>)
            >
          >('globalEnv_CallStaticBooleanMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `static public boolean isEnterpriseDirectoryId(long j)`
  static bool isEnterpriseDirectoryId(
    int j,
  ) {
    return _isEnterpriseDirectoryId(
      _class.reference.pointer,
      _id_isEnterpriseDirectoryId as jni$_.JMethodIDPtr,
      j,
    ).boolean;
  }

  static final _id_notifyDirectoryChange = _class.staticMethodId(
    r'notifyDirectoryChange',
    r'(Landroid/content/ContentResolver;)V',
  );

  static final _notifyDirectoryChange =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallStaticVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `static public void notifyDirectoryChange(android.content.ContentResolver contentResolver)`
  static void notifyDirectoryChange(
    jni$_.JObject? contentResolver,
  ) {
    final _$contentResolver = contentResolver?.reference ?? jni$_.jNullReference;
    _notifyDirectoryChange(
      _class.reference.pointer,
      _id_notifyDirectoryChange as jni$_.JMethodIDPtr,
      _$contentResolver.pointer,
    ).check();
  }
}

final class $ContactsContract$Directory$NullableType extends jni$_.JObjType<ContactsContract$Directory?> {
  @jni$_.internal
  const $ContactsContract$Directory$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$Directory;';

  @jni$_.internal
  @core$_.override
  ContactsContract$Directory? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : ContactsContract$Directory.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$Directory?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$Directory$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$Directory$NullableType) &&
        other is $ContactsContract$Directory$NullableType;
  }
}

final class $ContactsContract$Directory$Type extends jni$_.JObjType<ContactsContract$Directory> {
  @jni$_.internal
  const $ContactsContract$Directory$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$Directory;';

  @jni$_.internal
  @core$_.override
  ContactsContract$Directory fromReference(jni$_.JReference reference) => ContactsContract$Directory.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$Directory?> get nullableType => const $ContactsContract$Directory$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$Directory$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$Directory$Type) && other is $ContactsContract$Directory$Type;
  }
}

/// from: `android.provider.ContactsContract$DisplayNameSources`
class ContactsContract$DisplayNameSources extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ContactsContract$DisplayNameSources> $type;

  @jni$_.internal
  ContactsContract$DisplayNameSources.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/provider/ContactsContract$DisplayNameSources');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ContactsContract$DisplayNameSources$NullableType();
  static const type = $ContactsContract$DisplayNameSources$Type();

  /// from: `static public final int EMAIL`
  static const EMAIL = 10;

  /// from: `static public final int NICKNAME`
  static const NICKNAME = 35;

  /// from: `static public final int ORGANIZATION`
  static const ORGANIZATION = 30;

  /// from: `static public final int PHONE`
  static const PHONE = 20;

  /// from: `static public final int STRUCTURED_NAME`
  static const STRUCTURED_NAME = 40;

  /// from: `static public final int STRUCTURED_PHONETIC_NAME`
  static const STRUCTURED_PHONETIC_NAME = 37;

  /// from: `static public final int UNDEFINED`
  static const UNDEFINED = 0;

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $ContactsContract$DisplayNameSources> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
    jni$_.NativeFunction<jni$_.JObjectPtr Function(jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>
  >
  _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $ContactsContract$DisplayNameSources $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'android.provider.ContactsContract$DisplayNameSources',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory ContactsContract$DisplayNameSources.implement(
    $ContactsContract$DisplayNameSources $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return ContactsContract$DisplayNameSources.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $ContactsContract$DisplayNameSources {
  factory $ContactsContract$DisplayNameSources() = _$ContactsContract$DisplayNameSources;
}

final class _$ContactsContract$DisplayNameSources with $ContactsContract$DisplayNameSources {
  _$ContactsContract$DisplayNameSources();
}

final class $ContactsContract$DisplayNameSources$NullableType
    extends jni$_.JObjType<ContactsContract$DisplayNameSources?> {
  @jni$_.internal
  const $ContactsContract$DisplayNameSources$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$DisplayNameSources;';

  @jni$_.internal
  @core$_.override
  ContactsContract$DisplayNameSources? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : ContactsContract$DisplayNameSources.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$DisplayNameSources?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$DisplayNameSources$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$DisplayNameSources$NullableType) &&
        other is $ContactsContract$DisplayNameSources$NullableType;
  }
}

final class $ContactsContract$DisplayNameSources$Type extends jni$_.JObjType<ContactsContract$DisplayNameSources> {
  @jni$_.internal
  const $ContactsContract$DisplayNameSources$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$DisplayNameSources;';

  @jni$_.internal
  @core$_.override
  ContactsContract$DisplayNameSources fromReference(jni$_.JReference reference) =>
      ContactsContract$DisplayNameSources.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$DisplayNameSources?> get nullableType =>
      const $ContactsContract$DisplayNameSources$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$DisplayNameSources$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$DisplayNameSources$Type) &&
        other is $ContactsContract$DisplayNameSources$Type;
  }
}

/// from: `android.provider.ContactsContract$DisplayPhoto`
class ContactsContract$DisplayPhoto extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ContactsContract$DisplayPhoto> $type;

  @jni$_.internal
  ContactsContract$DisplayPhoto.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/provider/ContactsContract$DisplayPhoto');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ContactsContract$DisplayPhoto$NullableType();
  static const type = $ContactsContract$DisplayPhoto$Type();
  static final _id_CONTENT_MAX_DIMENSIONS_URI = _class.staticFieldId(
    r'CONTENT_MAX_DIMENSIONS_URI',
    r'Landroid/net/Uri;',
  );

  /// from: `static public final android.net.Uri CONTENT_MAX_DIMENSIONS_URI`
  /// The returned object must be released after use, by calling the [release] method.
  static Uri? get CONTENT_MAX_DIMENSIONS_URI => _id_CONTENT_MAX_DIMENSIONS_URI.get(_class, const $Uri$NullableType());

  static final _id_CONTENT_URI = _class.staticFieldId(
    r'CONTENT_URI',
    r'Landroid/net/Uri;',
  );

  /// from: `static public final android.net.Uri CONTENT_URI`
  /// The returned object must be released after use, by calling the [release] method.
  static Uri? get CONTENT_URI => _id_CONTENT_URI.get(_class, const $Uri$NullableType());

  static final _id_DISPLAY_MAX_DIM = _class.staticFieldId(
    r'DISPLAY_MAX_DIM',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String DISPLAY_MAX_DIM`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get DISPLAY_MAX_DIM => _id_DISPLAY_MAX_DIM.get(_class, const jni$_.JStringNullableType());

  static final _id_THUMBNAIL_MAX_DIM = _class.staticFieldId(
    r'THUMBNAIL_MAX_DIM',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String THUMBNAIL_MAX_DIM`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get THUMBNAIL_MAX_DIM => _id_THUMBNAIL_MAX_DIM.get(_class, const jni$_.JStringNullableType());
}

final class $ContactsContract$DisplayPhoto$NullableType extends jni$_.JObjType<ContactsContract$DisplayPhoto?> {
  @jni$_.internal
  const $ContactsContract$DisplayPhoto$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$DisplayPhoto;';

  @jni$_.internal
  @core$_.override
  ContactsContract$DisplayPhoto? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : ContactsContract$DisplayPhoto.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$DisplayPhoto?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$DisplayPhoto$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$DisplayPhoto$NullableType) &&
        other is $ContactsContract$DisplayPhoto$NullableType;
  }
}

final class $ContactsContract$DisplayPhoto$Type extends jni$_.JObjType<ContactsContract$DisplayPhoto> {
  @jni$_.internal
  const $ContactsContract$DisplayPhoto$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$DisplayPhoto;';

  @jni$_.internal
  @core$_.override
  ContactsContract$DisplayPhoto fromReference(jni$_.JReference reference) =>
      ContactsContract$DisplayPhoto.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$DisplayPhoto?> get nullableType =>
      const $ContactsContract$DisplayPhoto$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$DisplayPhoto$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$DisplayPhoto$Type) && other is $ContactsContract$DisplayPhoto$Type;
  }
}

/// from: `android.provider.ContactsContract$FullNameStyle`
class ContactsContract$FullNameStyle extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ContactsContract$FullNameStyle> $type;

  @jni$_.internal
  ContactsContract$FullNameStyle.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/provider/ContactsContract$FullNameStyle');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ContactsContract$FullNameStyle$NullableType();
  static const type = $ContactsContract$FullNameStyle$Type();

  /// from: `static public final int CHINESE`
  static const CHINESE = 3;

  /// from: `static public final int CJK`
  static const CJK = 2;

  /// from: `static public final int JAPANESE`
  static const JAPANESE = 4;

  /// from: `static public final int KOREAN`
  static const KOREAN = 5;

  /// from: `static public final int UNDEFINED`
  static const UNDEFINED = 0;

  /// from: `static public final int WESTERN`
  static const WESTERN = 1;

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $ContactsContract$FullNameStyle> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
    jni$_.NativeFunction<jni$_.JObjectPtr Function(jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>
  >
  _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $ContactsContract$FullNameStyle $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'android.provider.ContactsContract$FullNameStyle',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory ContactsContract$FullNameStyle.implement(
    $ContactsContract$FullNameStyle $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return ContactsContract$FullNameStyle.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $ContactsContract$FullNameStyle {
  factory $ContactsContract$FullNameStyle() = _$ContactsContract$FullNameStyle;
}

final class _$ContactsContract$FullNameStyle with $ContactsContract$FullNameStyle {
  _$ContactsContract$FullNameStyle();
}

final class $ContactsContract$FullNameStyle$NullableType extends jni$_.JObjType<ContactsContract$FullNameStyle?> {
  @jni$_.internal
  const $ContactsContract$FullNameStyle$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$FullNameStyle;';

  @jni$_.internal
  @core$_.override
  ContactsContract$FullNameStyle? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : ContactsContract$FullNameStyle.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$FullNameStyle?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$FullNameStyle$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$FullNameStyle$NullableType) &&
        other is $ContactsContract$FullNameStyle$NullableType;
  }
}

final class $ContactsContract$FullNameStyle$Type extends jni$_.JObjType<ContactsContract$FullNameStyle> {
  @jni$_.internal
  const $ContactsContract$FullNameStyle$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$FullNameStyle;';

  @jni$_.internal
  @core$_.override
  ContactsContract$FullNameStyle fromReference(jni$_.JReference reference) =>
      ContactsContract$FullNameStyle.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$FullNameStyle?> get nullableType =>
      const $ContactsContract$FullNameStyle$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$FullNameStyle$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$FullNameStyle$Type) && other is $ContactsContract$FullNameStyle$Type;
  }
}

/// from: `android.provider.ContactsContract$Groups`
class ContactsContract$Groups extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ContactsContract$Groups> $type;

  @jni$_.internal
  ContactsContract$Groups.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/provider/ContactsContract$Groups');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ContactsContract$Groups$NullableType();
  static const type = $ContactsContract$Groups$Type();
  static final _id_CONTENT_ITEM_TYPE = _class.staticFieldId(
    r'CONTENT_ITEM_TYPE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CONTENT_ITEM_TYPE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CONTENT_ITEM_TYPE => _id_CONTENT_ITEM_TYPE.get(_class, const jni$_.JStringNullableType());

  static final _id_CONTENT_SUMMARY_URI = _class.staticFieldId(
    r'CONTENT_SUMMARY_URI',
    r'Landroid/net/Uri;',
  );

  /// from: `static public final android.net.Uri CONTENT_SUMMARY_URI`
  /// The returned object must be released after use, by calling the [release] method.
  static Uri? get CONTENT_SUMMARY_URI => _id_CONTENT_SUMMARY_URI.get(_class, const $Uri$NullableType());

  static final _id_CONTENT_TYPE = _class.staticFieldId(
    r'CONTENT_TYPE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CONTENT_TYPE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CONTENT_TYPE => _id_CONTENT_TYPE.get(_class, const jni$_.JStringNullableType());

  static final _id_CONTENT_URI = _class.staticFieldId(
    r'CONTENT_URI',
    r'Landroid/net/Uri;',
  );

  /// from: `static public final android.net.Uri CONTENT_URI`
  /// The returned object must be released after use, by calling the [release] method.
  static Uri? get CONTENT_URI => _id_CONTENT_URI.get(_class, const $Uri$NullableType());

  static final _id_newEntityIterator = _class.staticMethodId(
    r'newEntityIterator',
    r'(Landroid/database/Cursor;)Landroid/content/EntityIterator;',
  );

  static final _newEntityIterator =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `static public android.content.EntityIterator newEntityIterator(android.database.Cursor cursor)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JObject? newEntityIterator(
    jni$_.JObject? cursor,
  ) {
    final _$cursor = cursor?.reference ?? jni$_.jNullReference;
    return _newEntityIterator(
      _class.reference.pointer,
      _id_newEntityIterator as jni$_.JMethodIDPtr,
      _$cursor.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }
}

final class $ContactsContract$Groups$NullableType extends jni$_.JObjType<ContactsContract$Groups?> {
  @jni$_.internal
  const $ContactsContract$Groups$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$Groups;';

  @jni$_.internal
  @core$_.override
  ContactsContract$Groups? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : ContactsContract$Groups.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$Groups?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$Groups$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$Groups$NullableType) &&
        other is $ContactsContract$Groups$NullableType;
  }
}

final class $ContactsContract$Groups$Type extends jni$_.JObjType<ContactsContract$Groups> {
  @jni$_.internal
  const $ContactsContract$Groups$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$Groups;';

  @jni$_.internal
  @core$_.override
  ContactsContract$Groups fromReference(jni$_.JReference reference) => ContactsContract$Groups.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$Groups?> get nullableType => const $ContactsContract$Groups$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$Groups$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$Groups$Type) && other is $ContactsContract$Groups$Type;
  }
}

/// from: `android.provider.ContactsContract$Intents$Insert`
class ContactsContract$Intents$Insert extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ContactsContract$Intents$Insert> $type;

  @jni$_.internal
  ContactsContract$Intents$Insert.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/provider/ContactsContract$Intents$Insert');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ContactsContract$Intents$Insert$NullableType();
  static const type = $ContactsContract$Intents$Insert$Type();
  static final _id_ACTION = _class.staticFieldId(
    r'ACTION',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION => _id_ACTION.get(_class, const jni$_.JStringNullableType());

  static final _id_COMPANY = _class.staticFieldId(
    r'COMPANY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String COMPANY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get COMPANY => _id_COMPANY.get(_class, const jni$_.JStringNullableType());

  static final _id_DATA = _class.staticFieldId(
    r'DATA',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String DATA`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get DATA => _id_DATA.get(_class, const jni$_.JStringNullableType());

  static final _id_EMAIL = _class.staticFieldId(
    r'EMAIL',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EMAIL`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EMAIL => _id_EMAIL.get(_class, const jni$_.JStringNullableType());

  static final _id_EMAIL_ISPRIMARY = _class.staticFieldId(
    r'EMAIL_ISPRIMARY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EMAIL_ISPRIMARY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EMAIL_ISPRIMARY => _id_EMAIL_ISPRIMARY.get(_class, const jni$_.JStringNullableType());

  static final _id_EMAIL_TYPE = _class.staticFieldId(
    r'EMAIL_TYPE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EMAIL_TYPE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EMAIL_TYPE => _id_EMAIL_TYPE.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_ACCOUNT = _class.staticFieldId(
    r'EXTRA_ACCOUNT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_ACCOUNT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_ACCOUNT => _id_EXTRA_ACCOUNT.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_DATA_SET = _class.staticFieldId(
    r'EXTRA_DATA_SET',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_DATA_SET`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_DATA_SET => _id_EXTRA_DATA_SET.get(_class, const jni$_.JStringNullableType());

  static final _id_FULL_MODE = _class.staticFieldId(
    r'FULL_MODE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FULL_MODE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get FULL_MODE => _id_FULL_MODE.get(_class, const jni$_.JStringNullableType());

  static final _id_IM_HANDLE = _class.staticFieldId(
    r'IM_HANDLE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String IM_HANDLE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get IM_HANDLE => _id_IM_HANDLE.get(_class, const jni$_.JStringNullableType());

  static final _id_IM_ISPRIMARY = _class.staticFieldId(
    r'IM_ISPRIMARY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String IM_ISPRIMARY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get IM_ISPRIMARY => _id_IM_ISPRIMARY.get(_class, const jni$_.JStringNullableType());

  static final _id_IM_PROTOCOL = _class.staticFieldId(
    r'IM_PROTOCOL',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String IM_PROTOCOL`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get IM_PROTOCOL => _id_IM_PROTOCOL.get(_class, const jni$_.JStringNullableType());

  static final _id_JOB_TITLE = _class.staticFieldId(
    r'JOB_TITLE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String JOB_TITLE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get JOB_TITLE => _id_JOB_TITLE.get(_class, const jni$_.JStringNullableType());

  static final _id_NAME = _class.staticFieldId(
    r'NAME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String NAME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get NAME => _id_NAME.get(_class, const jni$_.JStringNullableType());

  static final _id_NOTES = _class.staticFieldId(
    r'NOTES',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String NOTES`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get NOTES => _id_NOTES.get(_class, const jni$_.JStringNullableType());

  static final _id_PHONE = _class.staticFieldId(
    r'PHONE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String PHONE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get PHONE => _id_PHONE.get(_class, const jni$_.JStringNullableType());

  static final _id_PHONETIC_NAME = _class.staticFieldId(
    r'PHONETIC_NAME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String PHONETIC_NAME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get PHONETIC_NAME => _id_PHONETIC_NAME.get(_class, const jni$_.JStringNullableType());

  static final _id_PHONE_ISPRIMARY = _class.staticFieldId(
    r'PHONE_ISPRIMARY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String PHONE_ISPRIMARY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get PHONE_ISPRIMARY => _id_PHONE_ISPRIMARY.get(_class, const jni$_.JStringNullableType());

  static final _id_PHONE_TYPE = _class.staticFieldId(
    r'PHONE_TYPE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String PHONE_TYPE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get PHONE_TYPE => _id_PHONE_TYPE.get(_class, const jni$_.JStringNullableType());

  static final _id_POSTAL = _class.staticFieldId(
    r'POSTAL',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String POSTAL`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get POSTAL => _id_POSTAL.get(_class, const jni$_.JStringNullableType());

  static final _id_POSTAL_ISPRIMARY = _class.staticFieldId(
    r'POSTAL_ISPRIMARY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String POSTAL_ISPRIMARY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get POSTAL_ISPRIMARY => _id_POSTAL_ISPRIMARY.get(_class, const jni$_.JStringNullableType());

  static final _id_POSTAL_TYPE = _class.staticFieldId(
    r'POSTAL_TYPE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String POSTAL_TYPE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get POSTAL_TYPE => _id_POSTAL_TYPE.get(_class, const jni$_.JStringNullableType());

  static final _id_SECONDARY_EMAIL = _class.staticFieldId(
    r'SECONDARY_EMAIL',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SECONDARY_EMAIL`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get SECONDARY_EMAIL => _id_SECONDARY_EMAIL.get(_class, const jni$_.JStringNullableType());

  static final _id_SECONDARY_EMAIL_TYPE = _class.staticFieldId(
    r'SECONDARY_EMAIL_TYPE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SECONDARY_EMAIL_TYPE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get SECONDARY_EMAIL_TYPE =>
      _id_SECONDARY_EMAIL_TYPE.get(_class, const jni$_.JStringNullableType());

  static final _id_SECONDARY_PHONE = _class.staticFieldId(
    r'SECONDARY_PHONE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SECONDARY_PHONE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get SECONDARY_PHONE => _id_SECONDARY_PHONE.get(_class, const jni$_.JStringNullableType());

  static final _id_SECONDARY_PHONE_TYPE = _class.staticFieldId(
    r'SECONDARY_PHONE_TYPE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SECONDARY_PHONE_TYPE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get SECONDARY_PHONE_TYPE =>
      _id_SECONDARY_PHONE_TYPE.get(_class, const jni$_.JStringNullableType());

  static final _id_TERTIARY_EMAIL = _class.staticFieldId(
    r'TERTIARY_EMAIL',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String TERTIARY_EMAIL`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get TERTIARY_EMAIL => _id_TERTIARY_EMAIL.get(_class, const jni$_.JStringNullableType());

  static final _id_TERTIARY_EMAIL_TYPE = _class.staticFieldId(
    r'TERTIARY_EMAIL_TYPE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String TERTIARY_EMAIL_TYPE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get TERTIARY_EMAIL_TYPE =>
      _id_TERTIARY_EMAIL_TYPE.get(_class, const jni$_.JStringNullableType());

  static final _id_TERTIARY_PHONE = _class.staticFieldId(
    r'TERTIARY_PHONE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String TERTIARY_PHONE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get TERTIARY_PHONE => _id_TERTIARY_PHONE.get(_class, const jni$_.JStringNullableType());

  static final _id_TERTIARY_PHONE_TYPE = _class.staticFieldId(
    r'TERTIARY_PHONE_TYPE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String TERTIARY_PHONE_TYPE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get TERTIARY_PHONE_TYPE =>
      _id_TERTIARY_PHONE_TYPE.get(_class, const jni$_.JStringNullableType());

  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory ContactsContract$Intents$Insert() {
    return ContactsContract$Intents$Insert.fromReference(
      _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr).reference,
    );
  }
}

final class $ContactsContract$Intents$Insert$NullableType extends jni$_.JObjType<ContactsContract$Intents$Insert?> {
  @jni$_.internal
  const $ContactsContract$Intents$Insert$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$Intents$Insert;';

  @jni$_.internal
  @core$_.override
  ContactsContract$Intents$Insert? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : ContactsContract$Intents$Insert.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$Intents$Insert?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$Intents$Insert$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$Intents$Insert$NullableType) &&
        other is $ContactsContract$Intents$Insert$NullableType;
  }
}

final class $ContactsContract$Intents$Insert$Type extends jni$_.JObjType<ContactsContract$Intents$Insert> {
  @jni$_.internal
  const $ContactsContract$Intents$Insert$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$Intents$Insert;';

  @jni$_.internal
  @core$_.override
  ContactsContract$Intents$Insert fromReference(jni$_.JReference reference) =>
      ContactsContract$Intents$Insert.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$Intents$Insert?> get nullableType =>
      const $ContactsContract$Intents$Insert$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$Intents$Insert$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$Intents$Insert$Type) &&
        other is $ContactsContract$Intents$Insert$Type;
  }
}

/// from: `android.provider.ContactsContract$Intents`
class ContactsContract$Intents extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ContactsContract$Intents> $type;

  @jni$_.internal
  ContactsContract$Intents.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/provider/ContactsContract$Intents');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ContactsContract$Intents$NullableType();
  static const type = $ContactsContract$Intents$Type();
  static final _id_ACTION_VOICE_SEND_MESSAGE_TO_CONTACTS = _class.staticFieldId(
    r'ACTION_VOICE_SEND_MESSAGE_TO_CONTACTS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_VOICE_SEND_MESSAGE_TO_CONTACTS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_VOICE_SEND_MESSAGE_TO_CONTACTS =>
      _id_ACTION_VOICE_SEND_MESSAGE_TO_CONTACTS.get(_class, const jni$_.JStringNullableType());

  static final _id_ATTACH_IMAGE = _class.staticFieldId(
    r'ATTACH_IMAGE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ATTACH_IMAGE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ATTACH_IMAGE => _id_ATTACH_IMAGE.get(_class, const jni$_.JStringNullableType());

  static final _id_CONTACTS_DATABASE_CREATED = _class.staticFieldId(
    r'CONTACTS_DATABASE_CREATED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CONTACTS_DATABASE_CREATED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CONTACTS_DATABASE_CREATED =>
      _id_CONTACTS_DATABASE_CREATED.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_CREATE_DESCRIPTION = _class.staticFieldId(
    r'EXTRA_CREATE_DESCRIPTION',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_CREATE_DESCRIPTION`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_CREATE_DESCRIPTION =>
      _id_EXTRA_CREATE_DESCRIPTION.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_FORCE_CREATE = _class.staticFieldId(
    r'EXTRA_FORCE_CREATE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_FORCE_CREATE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_FORCE_CREATE => _id_EXTRA_FORCE_CREATE.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_RECIPIENT_CONTACT_CHAT_ID = _class.staticFieldId(
    r'EXTRA_RECIPIENT_CONTACT_CHAT_ID',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_RECIPIENT_CONTACT_CHAT_ID`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_RECIPIENT_CONTACT_CHAT_ID =>
      _id_EXTRA_RECIPIENT_CONTACT_CHAT_ID.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_RECIPIENT_CONTACT_NAME = _class.staticFieldId(
    r'EXTRA_RECIPIENT_CONTACT_NAME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_RECIPIENT_CONTACT_NAME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_RECIPIENT_CONTACT_NAME =>
      _id_EXTRA_RECIPIENT_CONTACT_NAME.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_RECIPIENT_CONTACT_URI = _class.staticFieldId(
    r'EXTRA_RECIPIENT_CONTACT_URI',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_RECIPIENT_CONTACT_URI`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_RECIPIENT_CONTACT_URI =>
      _id_EXTRA_RECIPIENT_CONTACT_URI.get(_class, const jni$_.JStringNullableType());

  static final _id_INVITE_CONTACT = _class.staticFieldId(
    r'INVITE_CONTACT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String INVITE_CONTACT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get INVITE_CONTACT => _id_INVITE_CONTACT.get(_class, const jni$_.JStringNullableType());

  static final _id_METADATA_ACCOUNT_TYPE = _class.staticFieldId(
    r'METADATA_ACCOUNT_TYPE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String METADATA_ACCOUNT_TYPE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get METADATA_ACCOUNT_TYPE =>
      _id_METADATA_ACCOUNT_TYPE.get(_class, const jni$_.JStringNullableType());

  static final _id_METADATA_MIMETYPE = _class.staticFieldId(
    r'METADATA_MIMETYPE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String METADATA_MIMETYPE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get METADATA_MIMETYPE => _id_METADATA_MIMETYPE.get(_class, const jni$_.JStringNullableType());

  static final _id_SEARCH_SUGGESTION_CLICKED = _class.staticFieldId(
    r'SEARCH_SUGGESTION_CLICKED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SEARCH_SUGGESTION_CLICKED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get SEARCH_SUGGESTION_CLICKED =>
      _id_SEARCH_SUGGESTION_CLICKED.get(_class, const jni$_.JStringNullableType());

  static final _id_SEARCH_SUGGESTION_CREATE_CONTACT_CLICKED = _class.staticFieldId(
    r'SEARCH_SUGGESTION_CREATE_CONTACT_CLICKED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SEARCH_SUGGESTION_CREATE_CONTACT_CLICKED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get SEARCH_SUGGESTION_CREATE_CONTACT_CLICKED =>
      _id_SEARCH_SUGGESTION_CREATE_CONTACT_CLICKED.get(_class, const jni$_.JStringNullableType());

  static final _id_SEARCH_SUGGESTION_DIAL_NUMBER_CLICKED = _class.staticFieldId(
    r'SEARCH_SUGGESTION_DIAL_NUMBER_CLICKED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SEARCH_SUGGESTION_DIAL_NUMBER_CLICKED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get SEARCH_SUGGESTION_DIAL_NUMBER_CLICKED =>
      _id_SEARCH_SUGGESTION_DIAL_NUMBER_CLICKED.get(_class, const jni$_.JStringNullableType());

  static final _id_SHOW_OR_CREATE_CONTACT = _class.staticFieldId(
    r'SHOW_OR_CREATE_CONTACT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SHOW_OR_CREATE_CONTACT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get SHOW_OR_CREATE_CONTACT =>
      _id_SHOW_OR_CREATE_CONTACT.get(_class, const jni$_.JStringNullableType());

  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory ContactsContract$Intents() {
    return ContactsContract$Intents.fromReference(
      _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr).reference,
    );
  }
}

final class $ContactsContract$Intents$NullableType extends jni$_.JObjType<ContactsContract$Intents?> {
  @jni$_.internal
  const $ContactsContract$Intents$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$Intents;';

  @jni$_.internal
  @core$_.override
  ContactsContract$Intents? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : ContactsContract$Intents.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$Intents?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$Intents$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$Intents$NullableType) &&
        other is $ContactsContract$Intents$NullableType;
  }
}

final class $ContactsContract$Intents$Type extends jni$_.JObjType<ContactsContract$Intents> {
  @jni$_.internal
  const $ContactsContract$Intents$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$Intents;';

  @jni$_.internal
  @core$_.override
  ContactsContract$Intents fromReference(jni$_.JReference reference) => ContactsContract$Intents.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$Intents?> get nullableType => const $ContactsContract$Intents$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$Intents$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$Intents$Type) && other is $ContactsContract$Intents$Type;
  }
}

/// from: `android.provider.ContactsContract$PhoneLookup`
class ContactsContract$PhoneLookup extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ContactsContract$PhoneLookup> $type;

  @jni$_.internal
  ContactsContract$PhoneLookup.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/provider/ContactsContract$PhoneLookup');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ContactsContract$PhoneLookup$NullableType();
  static const type = $ContactsContract$PhoneLookup$Type();
  static final _id_CONTENT_FILTER_URI = _class.staticFieldId(
    r'CONTENT_FILTER_URI',
    r'Landroid/net/Uri;',
  );

  /// from: `static public final android.net.Uri CONTENT_FILTER_URI`
  /// The returned object must be released after use, by calling the [release] method.
  static Uri? get CONTENT_FILTER_URI => _id_CONTENT_FILTER_URI.get(_class, const $Uri$NullableType());

  static final _id_ENTERPRISE_CONTENT_FILTER_URI = _class.staticFieldId(
    r'ENTERPRISE_CONTENT_FILTER_URI',
    r'Landroid/net/Uri;',
  );

  /// from: `static public final android.net.Uri ENTERPRISE_CONTENT_FILTER_URI`
  /// The returned object must be released after use, by calling the [release] method.
  static Uri? get ENTERPRISE_CONTENT_FILTER_URI =>
      _id_ENTERPRISE_CONTENT_FILTER_URI.get(_class, const $Uri$NullableType());

  static final _id_QUERY_PARAMETER_SIP_ADDRESS = _class.staticFieldId(
    r'QUERY_PARAMETER_SIP_ADDRESS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String QUERY_PARAMETER_SIP_ADDRESS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get QUERY_PARAMETER_SIP_ADDRESS =>
      _id_QUERY_PARAMETER_SIP_ADDRESS.get(_class, const jni$_.JStringNullableType());
}

final class $ContactsContract$PhoneLookup$NullableType extends jni$_.JObjType<ContactsContract$PhoneLookup?> {
  @jni$_.internal
  const $ContactsContract$PhoneLookup$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$PhoneLookup;';

  @jni$_.internal
  @core$_.override
  ContactsContract$PhoneLookup? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : ContactsContract$PhoneLookup.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$PhoneLookup?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$PhoneLookup$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$PhoneLookup$NullableType) &&
        other is $ContactsContract$PhoneLookup$NullableType;
  }
}

final class $ContactsContract$PhoneLookup$Type extends jni$_.JObjType<ContactsContract$PhoneLookup> {
  @jni$_.internal
  const $ContactsContract$PhoneLookup$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$PhoneLookup;';

  @jni$_.internal
  @core$_.override
  ContactsContract$PhoneLookup fromReference(jni$_.JReference reference) => ContactsContract$PhoneLookup.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$PhoneLookup?> get nullableType => const $ContactsContract$PhoneLookup$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$PhoneLookup$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$PhoneLookup$Type) && other is $ContactsContract$PhoneLookup$Type;
  }
}

/// from: `android.provider.ContactsContract$PhoneticNameStyle`
class ContactsContract$PhoneticNameStyle extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ContactsContract$PhoneticNameStyle> $type;

  @jni$_.internal
  ContactsContract$PhoneticNameStyle.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/provider/ContactsContract$PhoneticNameStyle');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ContactsContract$PhoneticNameStyle$NullableType();
  static const type = $ContactsContract$PhoneticNameStyle$Type();

  /// from: `static public final int JAPANESE`
  static const JAPANESE = 4;

  /// from: `static public final int KOREAN`
  static const KOREAN = 5;

  /// from: `static public final int PINYIN`
  static const PINYIN = 3;

  /// from: `static public final int UNDEFINED`
  static const UNDEFINED = 0;

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $ContactsContract$PhoneticNameStyle> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
    jni$_.NativeFunction<jni$_.JObjectPtr Function(jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>
  >
  _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $ContactsContract$PhoneticNameStyle $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'android.provider.ContactsContract$PhoneticNameStyle',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory ContactsContract$PhoneticNameStyle.implement(
    $ContactsContract$PhoneticNameStyle $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return ContactsContract$PhoneticNameStyle.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $ContactsContract$PhoneticNameStyle {
  factory $ContactsContract$PhoneticNameStyle() = _$ContactsContract$PhoneticNameStyle;
}

final class _$ContactsContract$PhoneticNameStyle with $ContactsContract$PhoneticNameStyle {
  _$ContactsContract$PhoneticNameStyle();
}

final class $ContactsContract$PhoneticNameStyle$NullableType
    extends jni$_.JObjType<ContactsContract$PhoneticNameStyle?> {
  @jni$_.internal
  const $ContactsContract$PhoneticNameStyle$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$PhoneticNameStyle;';

  @jni$_.internal
  @core$_.override
  ContactsContract$PhoneticNameStyle? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : ContactsContract$PhoneticNameStyle.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$PhoneticNameStyle?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$PhoneticNameStyle$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$PhoneticNameStyle$NullableType) &&
        other is $ContactsContract$PhoneticNameStyle$NullableType;
  }
}

final class $ContactsContract$PhoneticNameStyle$Type extends jni$_.JObjType<ContactsContract$PhoneticNameStyle> {
  @jni$_.internal
  const $ContactsContract$PhoneticNameStyle$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$PhoneticNameStyle;';

  @jni$_.internal
  @core$_.override
  ContactsContract$PhoneticNameStyle fromReference(jni$_.JReference reference) =>
      ContactsContract$PhoneticNameStyle.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$PhoneticNameStyle?> get nullableType =>
      const $ContactsContract$PhoneticNameStyle$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$PhoneticNameStyle$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$PhoneticNameStyle$Type) &&
        other is $ContactsContract$PhoneticNameStyle$Type;
  }
}

/// from: `android.provider.ContactsContract$PinnedPositions`
class ContactsContract$PinnedPositions extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ContactsContract$PinnedPositions> $type;

  @jni$_.internal
  ContactsContract$PinnedPositions.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/provider/ContactsContract$PinnedPositions');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ContactsContract$PinnedPositions$NullableType();
  static const type = $ContactsContract$PinnedPositions$Type();

  /// from: `static public final int DEMOTED`
  static const DEMOTED = -1;

  /// from: `static public final int UNPINNED`
  static const UNPINNED = 0;
  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory ContactsContract$PinnedPositions() {
    return ContactsContract$PinnedPositions.fromReference(
      _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr).reference,
    );
  }

  static final _id_undemote = _class.staticMethodId(
    r'undemote',
    r'(Landroid/content/ContentResolver;J)V',
  );

  static final _undemote =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int64)>,
              )
            >
          >('globalEnv_CallStaticVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)
          >();

  /// from: `static public void undemote(android.content.ContentResolver contentResolver, long j)`
  static void undemote(
    jni$_.JObject? contentResolver,
    int j,
  ) {
    final _$contentResolver = contentResolver?.reference ?? jni$_.jNullReference;
    _undemote(_class.reference.pointer, _id_undemote as jni$_.JMethodIDPtr, _$contentResolver.pointer, j).check();
  }

  static final _id_pin = _class.staticMethodId(
    r'pin',
    r'(Landroid/content/ContentResolver;JI)V',
  );

  static final _pin =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int64, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallStaticVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
            )
          >();

  /// from: `static public void pin(android.content.ContentResolver contentResolver, long j, int i)`
  static void pin(
    jni$_.JObject? contentResolver,
    int j,
    int i,
  ) {
    final _$contentResolver = contentResolver?.reference ?? jni$_.jNullReference;
    _pin(_class.reference.pointer, _id_pin as jni$_.JMethodIDPtr, _$contentResolver.pointer, j, i).check();
  }
}

final class $ContactsContract$PinnedPositions$NullableType extends jni$_.JObjType<ContactsContract$PinnedPositions?> {
  @jni$_.internal
  const $ContactsContract$PinnedPositions$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$PinnedPositions;';

  @jni$_.internal
  @core$_.override
  ContactsContract$PinnedPositions? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : ContactsContract$PinnedPositions.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$PinnedPositions?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$PinnedPositions$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$PinnedPositions$NullableType) &&
        other is $ContactsContract$PinnedPositions$NullableType;
  }
}

final class $ContactsContract$PinnedPositions$Type extends jni$_.JObjType<ContactsContract$PinnedPositions> {
  @jni$_.internal
  const $ContactsContract$PinnedPositions$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$PinnedPositions;';

  @jni$_.internal
  @core$_.override
  ContactsContract$PinnedPositions fromReference(jni$_.JReference reference) =>
      ContactsContract$PinnedPositions.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$PinnedPositions?> get nullableType =>
      const $ContactsContract$PinnedPositions$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$PinnedPositions$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$PinnedPositions$Type) &&
        other is $ContactsContract$PinnedPositions$Type;
  }
}

/// from: `android.provider.ContactsContract$Presence`
class ContactsContract$Presence extends ContactsContract$StatusUpdates {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ContactsContract$Presence> $type;

  @jni$_.internal
  ContactsContract$Presence.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/provider/ContactsContract$Presence');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ContactsContract$Presence$NullableType();
  static const type = $ContactsContract$Presence$Type();
  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory ContactsContract$Presence() {
    return ContactsContract$Presence.fromReference(
      _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr).reference,
    );
  }
}

final class $ContactsContract$Presence$NullableType extends jni$_.JObjType<ContactsContract$Presence?> {
  @jni$_.internal
  const $ContactsContract$Presence$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$Presence;';

  @jni$_.internal
  @core$_.override
  ContactsContract$Presence? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : ContactsContract$Presence.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const $ContactsContract$StatusUpdates$NullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$Presence?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 2;

  @core$_.override
  int get hashCode => ($ContactsContract$Presence$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$Presence$NullableType) &&
        other is $ContactsContract$Presence$NullableType;
  }
}

final class $ContactsContract$Presence$Type extends jni$_.JObjType<ContactsContract$Presence> {
  @jni$_.internal
  const $ContactsContract$Presence$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$Presence;';

  @jni$_.internal
  @core$_.override
  ContactsContract$Presence fromReference(jni$_.JReference reference) => ContactsContract$Presence.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const $ContactsContract$StatusUpdates$NullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$Presence?> get nullableType => const $ContactsContract$Presence$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 2;

  @core$_.override
  int get hashCode => ($ContactsContract$Presence$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$Presence$Type) && other is $ContactsContract$Presence$Type;
  }
}

/// from: `android.provider.ContactsContract$Profile`
class ContactsContract$Profile extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ContactsContract$Profile> $type;

  @jni$_.internal
  ContactsContract$Profile.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/provider/ContactsContract$Profile');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ContactsContract$Profile$NullableType();
  static const type = $ContactsContract$Profile$Type();
  static final _id_CONTENT_RAW_CONTACTS_URI = _class.staticFieldId(
    r'CONTENT_RAW_CONTACTS_URI',
    r'Landroid/net/Uri;',
  );

  /// from: `static public final android.net.Uri CONTENT_RAW_CONTACTS_URI`
  /// The returned object must be released after use, by calling the [release] method.
  static Uri? get CONTENT_RAW_CONTACTS_URI => _id_CONTENT_RAW_CONTACTS_URI.get(_class, const $Uri$NullableType());

  static final _id_CONTENT_URI = _class.staticFieldId(
    r'CONTENT_URI',
    r'Landroid/net/Uri;',
  );

  /// from: `static public final android.net.Uri CONTENT_URI`
  /// The returned object must be released after use, by calling the [release] method.
  static Uri? get CONTENT_URI => _id_CONTENT_URI.get(_class, const $Uri$NullableType());

  static final _id_CONTENT_VCARD_URI = _class.staticFieldId(
    r'CONTENT_VCARD_URI',
    r'Landroid/net/Uri;',
  );

  /// from: `static public final android.net.Uri CONTENT_VCARD_URI`
  /// The returned object must be released after use, by calling the [release] method.
  static Uri? get CONTENT_VCARD_URI => _id_CONTENT_VCARD_URI.get(_class, const $Uri$NullableType());

  /// from: `static public final long MIN_ID`
  static const MIN_ID = 9223372034707292160;
}

final class $ContactsContract$Profile$NullableType extends jni$_.JObjType<ContactsContract$Profile?> {
  @jni$_.internal
  const $ContactsContract$Profile$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$Profile;';

  @jni$_.internal
  @core$_.override
  ContactsContract$Profile? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : ContactsContract$Profile.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$Profile?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$Profile$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$Profile$NullableType) &&
        other is $ContactsContract$Profile$NullableType;
  }
}

final class $ContactsContract$Profile$Type extends jni$_.JObjType<ContactsContract$Profile> {
  @jni$_.internal
  const $ContactsContract$Profile$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$Profile;';

  @jni$_.internal
  @core$_.override
  ContactsContract$Profile fromReference(jni$_.JReference reference) => ContactsContract$Profile.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$Profile?> get nullableType => const $ContactsContract$Profile$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$Profile$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$Profile$Type) && other is $ContactsContract$Profile$Type;
  }
}

/// from: `android.provider.ContactsContract$ProfileSyncState`
class ContactsContract$ProfileSyncState extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ContactsContract$ProfileSyncState> $type;

  @jni$_.internal
  ContactsContract$ProfileSyncState.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/provider/ContactsContract$ProfileSyncState');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ContactsContract$ProfileSyncState$NullableType();
  static const type = $ContactsContract$ProfileSyncState$Type();
  static final _id_CONTENT_DIRECTORY = _class.staticFieldId(
    r'CONTENT_DIRECTORY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CONTENT_DIRECTORY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CONTENT_DIRECTORY => _id_CONTENT_DIRECTORY.get(_class, const jni$_.JStringNullableType());

  static final _id_CONTENT_URI = _class.staticFieldId(
    r'CONTENT_URI',
    r'Landroid/net/Uri;',
  );

  /// from: `static public final android.net.Uri CONTENT_URI`
  /// The returned object must be released after use, by calling the [release] method.
  static Uri? get CONTENT_URI => _id_CONTENT_URI.get(_class, const $Uri$NullableType());

  static final _id_get = _class.staticMethodId(
    r'get',
    r'(Landroid/content/ContentProviderClient;Landroid/accounts/Account;)[B',
  );

  static final _get =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public byte[] get(android.content.ContentProviderClient contentProviderClient, android.accounts.Account account)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JByteArray? get(
    jni$_.JObject? contentProviderClient,
    jni$_.JObject? account,
  ) {
    final _$contentProviderClient = contentProviderClient?.reference ?? jni$_.jNullReference;
    final _$account = account?.reference ?? jni$_.jNullReference;
    return _get(
      _class.reference.pointer,
      _id_get as jni$_.JMethodIDPtr,
      _$contentProviderClient.pointer,
      _$account.pointer,
    ).object<jni$_.JByteArray?>(const jni$_.JByteArrayNullableType());
  }

  static final _id_getWithUri = _class.staticMethodId(
    r'getWithUri',
    r'(Landroid/content/ContentProviderClient;Landroid/accounts/Account;)Landroid/util/Pair;',
  );

  static final _getWithUri =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public android.util.Pair<android.net.Uri, byte[]> getWithUri(android.content.ContentProviderClient contentProviderClient, android.accounts.Account account)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JObject? getWithUri(
    jni$_.JObject? contentProviderClient,
    jni$_.JObject? account,
  ) {
    final _$contentProviderClient = contentProviderClient?.reference ?? jni$_.jNullReference;
    final _$account = account?.reference ?? jni$_.jNullReference;
    return _getWithUri(
      _class.reference.pointer,
      _id_getWithUri as jni$_.JMethodIDPtr,
      _$contentProviderClient.pointer,
      _$account.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_set = _class.staticMethodId(
    r'set',
    r'(Landroid/content/ContentProviderClient;Landroid/accounts/Account;[B)V',
  );

  static final _set =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallStaticVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public void set(android.content.ContentProviderClient contentProviderClient, android.accounts.Account account, byte[] bs)`
  static void set(
    jni$_.JObject? contentProviderClient,
    jni$_.JObject? account,
    jni$_.JByteArray? bs,
  ) {
    final _$contentProviderClient = contentProviderClient?.reference ?? jni$_.jNullReference;
    final _$account = account?.reference ?? jni$_.jNullReference;
    final _$bs = bs?.reference ?? jni$_.jNullReference;
    _set(
      _class.reference.pointer,
      _id_set as jni$_.JMethodIDPtr,
      _$contentProviderClient.pointer,
      _$account.pointer,
      _$bs.pointer,
    ).check();
  }

  static final _id_newSetOperation = _class.staticMethodId(
    r'newSetOperation',
    r'(Landroid/accounts/Account;[B)Landroid/content/ContentProviderOperation;',
  );

  static final _newSetOperation =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public android.content.ContentProviderOperation newSetOperation(android.accounts.Account account, byte[] bs)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JObject? newSetOperation(
    jni$_.JObject? account,
    jni$_.JByteArray? bs,
  ) {
    final _$account = account?.reference ?? jni$_.jNullReference;
    final _$bs = bs?.reference ?? jni$_.jNullReference;
    return _newSetOperation(
      _class.reference.pointer,
      _id_newSetOperation as jni$_.JMethodIDPtr,
      _$account.pointer,
      _$bs.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }
}

final class $ContactsContract$ProfileSyncState$NullableType extends jni$_.JObjType<ContactsContract$ProfileSyncState?> {
  @jni$_.internal
  const $ContactsContract$ProfileSyncState$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$ProfileSyncState;';

  @jni$_.internal
  @core$_.override
  ContactsContract$ProfileSyncState? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : ContactsContract$ProfileSyncState.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$ProfileSyncState?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$ProfileSyncState$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$ProfileSyncState$NullableType) &&
        other is $ContactsContract$ProfileSyncState$NullableType;
  }
}

final class $ContactsContract$ProfileSyncState$Type extends jni$_.JObjType<ContactsContract$ProfileSyncState> {
  @jni$_.internal
  const $ContactsContract$ProfileSyncState$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$ProfileSyncState;';

  @jni$_.internal
  @core$_.override
  ContactsContract$ProfileSyncState fromReference(jni$_.JReference reference) =>
      ContactsContract$ProfileSyncState.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$ProfileSyncState?> get nullableType =>
      const $ContactsContract$ProfileSyncState$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$ProfileSyncState$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$ProfileSyncState$Type) &&
        other is $ContactsContract$ProfileSyncState$Type;
  }
}

/// from: `android.provider.ContactsContract$ProviderStatus`
class ContactsContract$ProviderStatus extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ContactsContract$ProviderStatus> $type;

  @jni$_.internal
  ContactsContract$ProviderStatus.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/provider/ContactsContract$ProviderStatus');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ContactsContract$ProviderStatus$NullableType();
  static const type = $ContactsContract$ProviderStatus$Type();
  static final _id_CONTENT_TYPE = _class.staticFieldId(
    r'CONTENT_TYPE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CONTENT_TYPE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CONTENT_TYPE => _id_CONTENT_TYPE.get(_class, const jni$_.JStringNullableType());

  static final _id_CONTENT_URI = _class.staticFieldId(
    r'CONTENT_URI',
    r'Landroid/net/Uri;',
  );

  /// from: `static public final android.net.Uri CONTENT_URI`
  /// The returned object must be released after use, by calling the [release] method.
  static Uri? get CONTENT_URI => _id_CONTENT_URI.get(_class, const $Uri$NullableType());

  static final _id_DATABASE_CREATION_TIMESTAMP = _class.staticFieldId(
    r'DATABASE_CREATION_TIMESTAMP',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String DATABASE_CREATION_TIMESTAMP`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get DATABASE_CREATION_TIMESTAMP =>
      _id_DATABASE_CREATION_TIMESTAMP.get(_class, const jni$_.JStringNullableType());

  static final _id_STATUS = _class.staticFieldId(
    r'STATUS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String STATUS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get STATUS => _id_STATUS.get(_class, const jni$_.JStringNullableType());

  /// from: `static public final int STATUS_BUSY`
  static const STATUS_BUSY = 1;

  /// from: `static public final int STATUS_EMPTY`
  static const STATUS_EMPTY = 2;

  /// from: `static public final int STATUS_NORMAL`
  static const STATUS_NORMAL = 0;
}

final class $ContactsContract$ProviderStatus$NullableType extends jni$_.JObjType<ContactsContract$ProviderStatus?> {
  @jni$_.internal
  const $ContactsContract$ProviderStatus$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$ProviderStatus;';

  @jni$_.internal
  @core$_.override
  ContactsContract$ProviderStatus? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : ContactsContract$ProviderStatus.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$ProviderStatus?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$ProviderStatus$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$ProviderStatus$NullableType) &&
        other is $ContactsContract$ProviderStatus$NullableType;
  }
}

final class $ContactsContract$ProviderStatus$Type extends jni$_.JObjType<ContactsContract$ProviderStatus> {
  @jni$_.internal
  const $ContactsContract$ProviderStatus$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$ProviderStatus;';

  @jni$_.internal
  @core$_.override
  ContactsContract$ProviderStatus fromReference(jni$_.JReference reference) =>
      ContactsContract$ProviderStatus.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$ProviderStatus?> get nullableType =>
      const $ContactsContract$ProviderStatus$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$ProviderStatus$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$ProviderStatus$Type) &&
        other is $ContactsContract$ProviderStatus$Type;
  }
}

/// from: `android.provider.ContactsContract$QuickContact`
class ContactsContract$QuickContact extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ContactsContract$QuickContact> $type;

  @jni$_.internal
  ContactsContract$QuickContact.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/provider/ContactsContract$QuickContact');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ContactsContract$QuickContact$NullableType();
  static const type = $ContactsContract$QuickContact$Type();
  static final _id_ACTION_QUICK_CONTACT = _class.staticFieldId(
    r'ACTION_QUICK_CONTACT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_QUICK_CONTACT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_QUICK_CONTACT =>
      _id_ACTION_QUICK_CONTACT.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_EXCLUDE_MIMES = _class.staticFieldId(
    r'EXTRA_EXCLUDE_MIMES',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_EXCLUDE_MIMES`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_EXCLUDE_MIMES =>
      _id_EXTRA_EXCLUDE_MIMES.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_MODE = _class.staticFieldId(
    r'EXTRA_MODE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_MODE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_MODE => _id_EXTRA_MODE.get(_class, const jni$_.JStringNullableType());

  static final _id_EXTRA_PRIORITIZED_MIMETYPE = _class.staticFieldId(
    r'EXTRA_PRIORITIZED_MIMETYPE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_PRIORITIZED_MIMETYPE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get EXTRA_PRIORITIZED_MIMETYPE =>
      _id_EXTRA_PRIORITIZED_MIMETYPE.get(_class, const jni$_.JStringNullableType());

  /// from: `static public final int MODE_LARGE`
  static const MODE_LARGE = 3;

  /// from: `static public final int MODE_MEDIUM`
  static const MODE_MEDIUM = 2;

  /// from: `static public final int MODE_SMALL`
  static const MODE_SMALL = 1;
  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory ContactsContract$QuickContact() {
    return ContactsContract$QuickContact.fromReference(
      _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr).reference,
    );
  }

  static final _id_showQuickContact = _class.staticMethodId(
    r'showQuickContact',
    r'(Landroid/content/Context;Landroid/view/View;Landroid/net/Uri;I[Ljava/lang/String;)V',
  );

  static final _showQuickContact =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallStaticVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public void showQuickContact(android.content.Context context, android.view.View view, android.net.Uri uri, int i, java.lang.String[] strings)`
  static void showQuickContact(
    Context? context,
    jni$_.JObject? view,
    Uri? uri,
    int i,
    jni$_.JArray<jni$_.JString?>? strings,
  ) {
    final _$context = context?.reference ?? jni$_.jNullReference;
    final _$view = view?.reference ?? jni$_.jNullReference;
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    final _$strings = strings?.reference ?? jni$_.jNullReference;
    _showQuickContact(
      _class.reference.pointer,
      _id_showQuickContact as jni$_.JMethodIDPtr,
      _$context.pointer,
      _$view.pointer,
      _$uri.pointer,
      i,
      _$strings.pointer,
    ).check();
  }

  static final _id_showQuickContact$1 = _class.staticMethodId(
    r'showQuickContact',
    r'(Landroid/content/Context;Landroid/graphics/Rect;Landroid/net/Uri;I[Ljava/lang/String;)V',
  );

  static final _showQuickContact$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallStaticVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public void showQuickContact(android.content.Context context, android.graphics.Rect rect, android.net.Uri uri, int i, java.lang.String[] strings)`
  static void showQuickContact$1(
    Context? context,
    jni$_.JObject? rect,
    Uri? uri,
    int i,
    jni$_.JArray<jni$_.JString?>? strings,
  ) {
    final _$context = context?.reference ?? jni$_.jNullReference;
    final _$rect = rect?.reference ?? jni$_.jNullReference;
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    final _$strings = strings?.reference ?? jni$_.jNullReference;
    _showQuickContact$1(
      _class.reference.pointer,
      _id_showQuickContact$1 as jni$_.JMethodIDPtr,
      _$context.pointer,
      _$rect.pointer,
      _$uri.pointer,
      i,
      _$strings.pointer,
    ).check();
  }

  static final _id_showQuickContact$2 = _class.staticMethodId(
    r'showQuickContact',
    r'(Landroid/content/Context;Landroid/view/View;Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _showQuickContact$2 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallStaticVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public void showQuickContact(android.content.Context context, android.view.View view, android.net.Uri uri, java.lang.String[] strings, java.lang.String string)`
  static void showQuickContact$2(
    Context? context,
    jni$_.JObject? view,
    Uri? uri,
    jni$_.JArray<jni$_.JString?>? strings,
    jni$_.JString? string,
  ) {
    final _$context = context?.reference ?? jni$_.jNullReference;
    final _$view = view?.reference ?? jni$_.jNullReference;
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    final _$strings = strings?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    _showQuickContact$2(
      _class.reference.pointer,
      _id_showQuickContact$2 as jni$_.JMethodIDPtr,
      _$context.pointer,
      _$view.pointer,
      _$uri.pointer,
      _$strings.pointer,
      _$string.pointer,
    ).check();
  }

  static final _id_showQuickContact$3 = _class.staticMethodId(
    r'showQuickContact',
    r'(Landroid/content/Context;Landroid/graphics/Rect;Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _showQuickContact$3 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallStaticVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public void showQuickContact(android.content.Context context, android.graphics.Rect rect, android.net.Uri uri, java.lang.String[] strings, java.lang.String string)`
  static void showQuickContact$3(
    Context? context,
    jni$_.JObject? rect,
    Uri? uri,
    jni$_.JArray<jni$_.JString?>? strings,
    jni$_.JString? string,
  ) {
    final _$context = context?.reference ?? jni$_.jNullReference;
    final _$rect = rect?.reference ?? jni$_.jNullReference;
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    final _$strings = strings?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    _showQuickContact$3(
      _class.reference.pointer,
      _id_showQuickContact$3 as jni$_.JMethodIDPtr,
      _$context.pointer,
      _$rect.pointer,
      _$uri.pointer,
      _$strings.pointer,
      _$string.pointer,
    ).check();
  }
}

final class $ContactsContract$QuickContact$NullableType extends jni$_.JObjType<ContactsContract$QuickContact?> {
  @jni$_.internal
  const $ContactsContract$QuickContact$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$QuickContact;';

  @jni$_.internal
  @core$_.override
  ContactsContract$QuickContact? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : ContactsContract$QuickContact.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$QuickContact?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$QuickContact$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$QuickContact$NullableType) &&
        other is $ContactsContract$QuickContact$NullableType;
  }
}

final class $ContactsContract$QuickContact$Type extends jni$_.JObjType<ContactsContract$QuickContact> {
  @jni$_.internal
  const $ContactsContract$QuickContact$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$QuickContact;';

  @jni$_.internal
  @core$_.override
  ContactsContract$QuickContact fromReference(jni$_.JReference reference) =>
      ContactsContract$QuickContact.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$QuickContact?> get nullableType =>
      const $ContactsContract$QuickContact$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$QuickContact$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$QuickContact$Type) && other is $ContactsContract$QuickContact$Type;
  }
}

/// from: `android.provider.ContactsContract$RawContacts$Data`
class ContactsContract$RawContacts$Data extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ContactsContract$RawContacts$Data> $type;

  @jni$_.internal
  ContactsContract$RawContacts$Data.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/provider/ContactsContract$RawContacts$Data');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ContactsContract$RawContacts$Data$NullableType();
  static const type = $ContactsContract$RawContacts$Data$Type();
  static final _id_CONTENT_DIRECTORY = _class.staticFieldId(
    r'CONTENT_DIRECTORY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CONTENT_DIRECTORY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CONTENT_DIRECTORY => _id_CONTENT_DIRECTORY.get(_class, const jni$_.JStringNullableType());
}

final class $ContactsContract$RawContacts$Data$NullableType extends jni$_.JObjType<ContactsContract$RawContacts$Data?> {
  @jni$_.internal
  const $ContactsContract$RawContacts$Data$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$RawContacts$Data;';

  @jni$_.internal
  @core$_.override
  ContactsContract$RawContacts$Data? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : ContactsContract$RawContacts$Data.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$RawContacts$Data?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$RawContacts$Data$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$RawContacts$Data$NullableType) &&
        other is $ContactsContract$RawContacts$Data$NullableType;
  }
}

final class $ContactsContract$RawContacts$Data$Type extends jni$_.JObjType<ContactsContract$RawContacts$Data> {
  @jni$_.internal
  const $ContactsContract$RawContacts$Data$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$RawContacts$Data;';

  @jni$_.internal
  @core$_.override
  ContactsContract$RawContacts$Data fromReference(jni$_.JReference reference) =>
      ContactsContract$RawContacts$Data.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$RawContacts$Data?> get nullableType =>
      const $ContactsContract$RawContacts$Data$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$RawContacts$Data$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$RawContacts$Data$Type) &&
        other is $ContactsContract$RawContacts$Data$Type;
  }
}

/// from: `android.provider.ContactsContract$RawContacts$DisplayPhoto`
class ContactsContract$RawContacts$DisplayPhoto extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ContactsContract$RawContacts$DisplayPhoto> $type;

  @jni$_.internal
  ContactsContract$RawContacts$DisplayPhoto.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/provider/ContactsContract$RawContacts$DisplayPhoto');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ContactsContract$RawContacts$DisplayPhoto$NullableType();
  static const type = $ContactsContract$RawContacts$DisplayPhoto$Type();
  static final _id_CONTENT_DIRECTORY = _class.staticFieldId(
    r'CONTENT_DIRECTORY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CONTENT_DIRECTORY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CONTENT_DIRECTORY => _id_CONTENT_DIRECTORY.get(_class, const jni$_.JStringNullableType());
}

final class $ContactsContract$RawContacts$DisplayPhoto$NullableType
    extends jni$_.JObjType<ContactsContract$RawContacts$DisplayPhoto?> {
  @jni$_.internal
  const $ContactsContract$RawContacts$DisplayPhoto$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$RawContacts$DisplayPhoto;';

  @jni$_.internal
  @core$_.override
  ContactsContract$RawContacts$DisplayPhoto? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : ContactsContract$RawContacts$DisplayPhoto.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$RawContacts$DisplayPhoto?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$RawContacts$DisplayPhoto$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$RawContacts$DisplayPhoto$NullableType) &&
        other is $ContactsContract$RawContacts$DisplayPhoto$NullableType;
  }
}

final class $ContactsContract$RawContacts$DisplayPhoto$Type
    extends jni$_.JObjType<ContactsContract$RawContacts$DisplayPhoto> {
  @jni$_.internal
  const $ContactsContract$RawContacts$DisplayPhoto$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$RawContacts$DisplayPhoto;';

  @jni$_.internal
  @core$_.override
  ContactsContract$RawContacts$DisplayPhoto fromReference(jni$_.JReference reference) =>
      ContactsContract$RawContacts$DisplayPhoto.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$RawContacts$DisplayPhoto?> get nullableType =>
      const $ContactsContract$RawContacts$DisplayPhoto$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$RawContacts$DisplayPhoto$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$RawContacts$DisplayPhoto$Type) &&
        other is $ContactsContract$RawContacts$DisplayPhoto$Type;
  }
}

/// from: `android.provider.ContactsContract$RawContacts$Entity`
class ContactsContract$RawContacts$Entity extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ContactsContract$RawContacts$Entity> $type;

  @jni$_.internal
  ContactsContract$RawContacts$Entity.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/provider/ContactsContract$RawContacts$Entity');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ContactsContract$RawContacts$Entity$NullableType();
  static const type = $ContactsContract$RawContacts$Entity$Type();
  static final _id_CONTENT_DIRECTORY = _class.staticFieldId(
    r'CONTENT_DIRECTORY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CONTENT_DIRECTORY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CONTENT_DIRECTORY => _id_CONTENT_DIRECTORY.get(_class, const jni$_.JStringNullableType());

  static final _id_DATA_ID = _class.staticFieldId(
    r'DATA_ID',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String DATA_ID`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get DATA_ID => _id_DATA_ID.get(_class, const jni$_.JStringNullableType());
}

final class $ContactsContract$RawContacts$Entity$NullableType
    extends jni$_.JObjType<ContactsContract$RawContacts$Entity?> {
  @jni$_.internal
  const $ContactsContract$RawContacts$Entity$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$RawContacts$Entity;';

  @jni$_.internal
  @core$_.override
  ContactsContract$RawContacts$Entity? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : ContactsContract$RawContacts$Entity.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$RawContacts$Entity?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$RawContacts$Entity$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$RawContacts$Entity$NullableType) &&
        other is $ContactsContract$RawContacts$Entity$NullableType;
  }
}

final class $ContactsContract$RawContacts$Entity$Type extends jni$_.JObjType<ContactsContract$RawContacts$Entity> {
  @jni$_.internal
  const $ContactsContract$RawContacts$Entity$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$RawContacts$Entity;';

  @jni$_.internal
  @core$_.override
  ContactsContract$RawContacts$Entity fromReference(jni$_.JReference reference) =>
      ContactsContract$RawContacts$Entity.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$RawContacts$Entity?> get nullableType =>
      const $ContactsContract$RawContacts$Entity$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$RawContacts$Entity$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$RawContacts$Entity$Type) &&
        other is $ContactsContract$RawContacts$Entity$Type;
  }
}

/// from: `android.provider.ContactsContract$RawContacts`
class ContactsContract$RawContacts extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ContactsContract$RawContacts> $type;

  @jni$_.internal
  ContactsContract$RawContacts.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/provider/ContactsContract$RawContacts');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ContactsContract$RawContacts$NullableType();
  static const type = $ContactsContract$RawContacts$Type();

  /// from: `static public final int AGGREGATION_MODE_DEFAULT`
  static const AGGREGATION_MODE_DEFAULT = 0;

  /// from: `static public final int AGGREGATION_MODE_DISABLED`
  static const AGGREGATION_MODE_DISABLED = 3;

  /// from: `static public final int AGGREGATION_MODE_IMMEDIATE`
  static const AGGREGATION_MODE_IMMEDIATE = 1;

  /// from: `static public final int AGGREGATION_MODE_SUSPENDED`
  static const AGGREGATION_MODE_SUSPENDED = 2;
  static final _id_CONTENT_ITEM_TYPE = _class.staticFieldId(
    r'CONTENT_ITEM_TYPE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CONTENT_ITEM_TYPE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CONTENT_ITEM_TYPE => _id_CONTENT_ITEM_TYPE.get(_class, const jni$_.JStringNullableType());

  static final _id_CONTENT_TYPE = _class.staticFieldId(
    r'CONTENT_TYPE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CONTENT_TYPE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CONTENT_TYPE => _id_CONTENT_TYPE.get(_class, const jni$_.JStringNullableType());

  static final _id_CONTENT_URI = _class.staticFieldId(
    r'CONTENT_URI',
    r'Landroid/net/Uri;',
  );

  /// from: `static public final android.net.Uri CONTENT_URI`
  /// The returned object must be released after use, by calling the [release] method.
  static Uri? get CONTENT_URI => _id_CONTENT_URI.get(_class, const $Uri$NullableType());

  static final _id_getContactLookupUri = _class.staticMethodId(
    r'getContactLookupUri',
    r'(Landroid/content/ContentResolver;Landroid/net/Uri;)Landroid/net/Uri;',
  );

  static final _getContactLookupUri =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public android.net.Uri getContactLookupUri(android.content.ContentResolver contentResolver, android.net.Uri uri)`
  /// The returned object must be released after use, by calling the [release] method.
  static Uri? getContactLookupUri(
    jni$_.JObject? contentResolver,
    Uri? uri,
  ) {
    final _$contentResolver = contentResolver?.reference ?? jni$_.jNullReference;
    final _$uri = uri?.reference ?? jni$_.jNullReference;
    return _getContactLookupUri(
      _class.reference.pointer,
      _id_getContactLookupUri as jni$_.JMethodIDPtr,
      _$contentResolver.pointer,
      _$uri.pointer,
    ).object<Uri?>(const $Uri$NullableType());
  }

  static final _id_getLocalAccountName = _class.staticMethodId(
    r'getLocalAccountName',
    r'(Landroid/content/Context;)Ljava/lang/String;',
  );

  static final _getLocalAccountName =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `static public java.lang.String getLocalAccountName(android.content.Context context)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? getLocalAccountName(
    Context? context,
  ) {
    final _$context = context?.reference ?? jni$_.jNullReference;
    return _getLocalAccountName(
      _class.reference.pointer,
      _id_getLocalAccountName as jni$_.JMethodIDPtr,
      _$context.pointer,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getLocalAccountType = _class.staticMethodId(
    r'getLocalAccountType',
    r'(Landroid/content/Context;)Ljava/lang/String;',
  );

  static final _getLocalAccountType =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `static public java.lang.String getLocalAccountType(android.content.Context context)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? getLocalAccountType(
    Context? context,
  ) {
    final _$context = context?.reference ?? jni$_.jNullReference;
    return _getLocalAccountType(
      _class.reference.pointer,
      _id_getLocalAccountType as jni$_.JMethodIDPtr,
      _$context.pointer,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_newEntityIterator = _class.staticMethodId(
    r'newEntityIterator',
    r'(Landroid/database/Cursor;)Landroid/content/EntityIterator;',
  );

  static final _newEntityIterator =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `static public android.content.EntityIterator newEntityIterator(android.database.Cursor cursor)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JObject? newEntityIterator(
    jni$_.JObject? cursor,
  ) {
    final _$cursor = cursor?.reference ?? jni$_.jNullReference;
    return _newEntityIterator(
      _class.reference.pointer,
      _id_newEntityIterator as jni$_.JMethodIDPtr,
      _$cursor.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }
}

final class $ContactsContract$RawContacts$NullableType extends jni$_.JObjType<ContactsContract$RawContacts?> {
  @jni$_.internal
  const $ContactsContract$RawContacts$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$RawContacts;';

  @jni$_.internal
  @core$_.override
  ContactsContract$RawContacts? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : ContactsContract$RawContacts.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$RawContacts?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$RawContacts$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$RawContacts$NullableType) &&
        other is $ContactsContract$RawContacts$NullableType;
  }
}

final class $ContactsContract$RawContacts$Type extends jni$_.JObjType<ContactsContract$RawContacts> {
  @jni$_.internal
  const $ContactsContract$RawContacts$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$RawContacts;';

  @jni$_.internal
  @core$_.override
  ContactsContract$RawContacts fromReference(jni$_.JReference reference) => ContactsContract$RawContacts.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$RawContacts?> get nullableType => const $ContactsContract$RawContacts$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$RawContacts$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$RawContacts$Type) && other is $ContactsContract$RawContacts$Type;
  }
}

/// from: `android.provider.ContactsContract$RawContactsEntity`
class ContactsContract$RawContactsEntity extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ContactsContract$RawContactsEntity> $type;

  @jni$_.internal
  ContactsContract$RawContactsEntity.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/provider/ContactsContract$RawContactsEntity');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ContactsContract$RawContactsEntity$NullableType();
  static const type = $ContactsContract$RawContactsEntity$Type();
  static final _id_CONTENT_TYPE = _class.staticFieldId(
    r'CONTENT_TYPE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CONTENT_TYPE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CONTENT_TYPE => _id_CONTENT_TYPE.get(_class, const jni$_.JStringNullableType());

  static final _id_CONTENT_URI = _class.staticFieldId(
    r'CONTENT_URI',
    r'Landroid/net/Uri;',
  );

  /// from: `static public final android.net.Uri CONTENT_URI`
  /// The returned object must be released after use, by calling the [release] method.
  static Uri? get CONTENT_URI => _id_CONTENT_URI.get(_class, const $Uri$NullableType());

  static final _id_DATA_ID = _class.staticFieldId(
    r'DATA_ID',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String DATA_ID`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get DATA_ID => _id_DATA_ID.get(_class, const jni$_.JStringNullableType());

  static final _id_PROFILE_CONTENT_URI = _class.staticFieldId(
    r'PROFILE_CONTENT_URI',
    r'Landroid/net/Uri;',
  );

  /// from: `static public final android.net.Uri PROFILE_CONTENT_URI`
  /// The returned object must be released after use, by calling the [release] method.
  static Uri? get PROFILE_CONTENT_URI => _id_PROFILE_CONTENT_URI.get(_class, const $Uri$NullableType());
}

final class $ContactsContract$RawContactsEntity$NullableType
    extends jni$_.JObjType<ContactsContract$RawContactsEntity?> {
  @jni$_.internal
  const $ContactsContract$RawContactsEntity$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$RawContactsEntity;';

  @jni$_.internal
  @core$_.override
  ContactsContract$RawContactsEntity? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : ContactsContract$RawContactsEntity.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$RawContactsEntity?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$RawContactsEntity$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$RawContactsEntity$NullableType) &&
        other is $ContactsContract$RawContactsEntity$NullableType;
  }
}

final class $ContactsContract$RawContactsEntity$Type extends jni$_.JObjType<ContactsContract$RawContactsEntity> {
  @jni$_.internal
  const $ContactsContract$RawContactsEntity$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$RawContactsEntity;';

  @jni$_.internal
  @core$_.override
  ContactsContract$RawContactsEntity fromReference(jni$_.JReference reference) =>
      ContactsContract$RawContactsEntity.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$RawContactsEntity?> get nullableType =>
      const $ContactsContract$RawContactsEntity$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$RawContactsEntity$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$RawContactsEntity$Type) &&
        other is $ContactsContract$RawContactsEntity$Type;
  }
}

/// from: `android.provider.ContactsContract$SearchSnippets`
class ContactsContract$SearchSnippets extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ContactsContract$SearchSnippets> $type;

  @jni$_.internal
  ContactsContract$SearchSnippets.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/provider/ContactsContract$SearchSnippets');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ContactsContract$SearchSnippets$NullableType();
  static const type = $ContactsContract$SearchSnippets$Type();
  static final _id_DEFERRED_SNIPPETING_KEY = _class.staticFieldId(
    r'DEFERRED_SNIPPETING_KEY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String DEFERRED_SNIPPETING_KEY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get DEFERRED_SNIPPETING_KEY =>
      _id_DEFERRED_SNIPPETING_KEY.get(_class, const jni$_.JStringNullableType());

  static final _id_SNIPPET = _class.staticFieldId(
    r'SNIPPET',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SNIPPET`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get SNIPPET => _id_SNIPPET.get(_class, const jni$_.JStringNullableType());

  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory ContactsContract$SearchSnippets() {
    return ContactsContract$SearchSnippets.fromReference(
      _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr).reference,
    );
  }
}

final class $ContactsContract$SearchSnippets$NullableType extends jni$_.JObjType<ContactsContract$SearchSnippets?> {
  @jni$_.internal
  const $ContactsContract$SearchSnippets$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$SearchSnippets;';

  @jni$_.internal
  @core$_.override
  ContactsContract$SearchSnippets? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : ContactsContract$SearchSnippets.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$SearchSnippets?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$SearchSnippets$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$SearchSnippets$NullableType) &&
        other is $ContactsContract$SearchSnippets$NullableType;
  }
}

final class $ContactsContract$SearchSnippets$Type extends jni$_.JObjType<ContactsContract$SearchSnippets> {
  @jni$_.internal
  const $ContactsContract$SearchSnippets$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$SearchSnippets;';

  @jni$_.internal
  @core$_.override
  ContactsContract$SearchSnippets fromReference(jni$_.JReference reference) =>
      ContactsContract$SearchSnippets.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$SearchSnippets?> get nullableType =>
      const $ContactsContract$SearchSnippets$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$SearchSnippets$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$SearchSnippets$Type) &&
        other is $ContactsContract$SearchSnippets$Type;
  }
}

/// from: `android.provider.ContactsContract$Settings`
class ContactsContract$Settings extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ContactsContract$Settings> $type;

  @jni$_.internal
  ContactsContract$Settings.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/provider/ContactsContract$Settings');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ContactsContract$Settings$NullableType();
  static const type = $ContactsContract$Settings$Type();
  static final _id_ACTION_SET_DEFAULT_ACCOUNT = _class.staticFieldId(
    r'ACTION_SET_DEFAULT_ACCOUNT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_SET_DEFAULT_ACCOUNT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_SET_DEFAULT_ACCOUNT =>
      _id_ACTION_SET_DEFAULT_ACCOUNT.get(_class, const jni$_.JStringNullableType());

  static final _id_CONTENT_ITEM_TYPE = _class.staticFieldId(
    r'CONTENT_ITEM_TYPE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CONTENT_ITEM_TYPE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CONTENT_ITEM_TYPE => _id_CONTENT_ITEM_TYPE.get(_class, const jni$_.JStringNullableType());

  static final _id_CONTENT_TYPE = _class.staticFieldId(
    r'CONTENT_TYPE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CONTENT_TYPE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CONTENT_TYPE => _id_CONTENT_TYPE.get(_class, const jni$_.JStringNullableType());

  static final _id_CONTENT_URI = _class.staticFieldId(
    r'CONTENT_URI',
    r'Landroid/net/Uri;',
  );

  /// from: `static public final android.net.Uri CONTENT_URI`
  /// The returned object must be released after use, by calling the [release] method.
  static Uri? get CONTENT_URI => _id_CONTENT_URI.get(_class, const $Uri$NullableType());

  static final _id_getDefaultAccount = _class.staticMethodId(
    r'getDefaultAccount',
    r'(Landroid/content/ContentResolver;)Landroid/accounts/Account;',
  );

  static final _getDefaultAccount =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `static public android.accounts.Account getDefaultAccount(android.content.ContentResolver contentResolver)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JObject? getDefaultAccount(
    jni$_.JObject? contentResolver,
  ) {
    final _$contentResolver = contentResolver?.reference ?? jni$_.jNullReference;
    return _getDefaultAccount(
      _class.reference.pointer,
      _id_getDefaultAccount as jni$_.JMethodIDPtr,
      _$contentResolver.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }
}

final class $ContactsContract$Settings$NullableType extends jni$_.JObjType<ContactsContract$Settings?> {
  @jni$_.internal
  const $ContactsContract$Settings$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$Settings;';

  @jni$_.internal
  @core$_.override
  ContactsContract$Settings? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : ContactsContract$Settings.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$Settings?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$Settings$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$Settings$NullableType) &&
        other is $ContactsContract$Settings$NullableType;
  }
}

final class $ContactsContract$Settings$Type extends jni$_.JObjType<ContactsContract$Settings> {
  @jni$_.internal
  const $ContactsContract$Settings$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$Settings;';

  @jni$_.internal
  @core$_.override
  ContactsContract$Settings fromReference(jni$_.JReference reference) => ContactsContract$Settings.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$Settings?> get nullableType => const $ContactsContract$Settings$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$Settings$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$Settings$Type) && other is $ContactsContract$Settings$Type;
  }
}

/// from: `android.provider.ContactsContract$SimAccount`
class ContactsContract$SimAccount extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ContactsContract$SimAccount> $type;

  @jni$_.internal
  ContactsContract$SimAccount.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/provider/ContactsContract$SimAccount');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ContactsContract$SimAccount$NullableType();
  static const type = $ContactsContract$SimAccount$Type();

  /// from: `static public final int ADN_EF_TYPE`
  static const ADN_EF_TYPE = 1;
  static final _id_CREATOR = _class.staticFieldId(
    r'CREATOR',
    r'Landroid/os/Parcelable$Creator;',
  );

  /// from: `static public final android.os.Parcelable$Creator<android.provider.ContactsContract$SimAccount> CREATOR`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JObject? get CREATOR => _id_CREATOR.get(_class, const jni$_.JObjectNullableType());

  /// from: `static public final int FDN_EF_TYPE`
  static const FDN_EF_TYPE = 2;

  /// from: `static public final int SDN_EF_TYPE`
  static const SDN_EF_TYPE = 3;

  /// from: `static public final int UNKNOWN_EF_TYPE`
  static const UNKNOWN_EF_TYPE = 0;
  static final _id_getAccountName = _class.instanceMethodId(
    r'getAccountName',
    r'()Ljava/lang/String;',
  );

  static final _getAccountName =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.lang.String getAccountName()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getAccountName() {
    return _getAccountName(
      reference.pointer,
      _id_getAccountName as jni$_.JMethodIDPtr,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getAccountType = _class.instanceMethodId(
    r'getAccountType',
    r'()Ljava/lang/String;',
  );

  static final _getAccountType =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public java.lang.String getAccountType()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getAccountType() {
    return _getAccountType(
      reference.pointer,
      _id_getAccountType as jni$_.JMethodIDPtr,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getSimSlotIndex = _class.instanceMethodId(
    r'getSimSlotIndex',
    r'()I',
  );

  static final _getSimSlotIndex =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int getSimSlotIndex()`
  int getSimSlotIndex() {
    return _getSimSlotIndex(reference.pointer, _id_getSimSlotIndex as jni$_.JMethodIDPtr).integer;
  }

  static final _id_getEfType = _class.instanceMethodId(
    r'getEfType',
    r'()I',
  );

  static final _getEfType =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int getEfType()`
  int getEfType() {
    return _getEfType(reference.pointer, _id_getEfType as jni$_.JMethodIDPtr).integer;
  }

  static final _id_hashCode$1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int hashCode()`
  int hashCode$1() {
    return _hashCode$1(reference.pointer, _id_hashCode$1 as jni$_.JMethodIDPtr).integer;
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(
    jni$_.JObject? object,
  ) {
    final _$object = object?.reference ?? jni$_.jNullReference;
    return _equals(reference.pointer, _id_equals as jni$_.JMethodIDPtr, _$object.pointer).boolean;
  }

  static final _id_writeToParcel = _class.instanceMethodId(
    r'writeToParcel',
    r'(Landroid/os/Parcel;I)V',
  );

  static final _writeToParcel =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)
          >();

  /// from: `public void writeToParcel(android.os.Parcel parcel, int i)`
  void writeToParcel(
    jni$_.JObject? parcel,
    int i,
  ) {
    final _$parcel = parcel?.reference ?? jni$_.jNullReference;
    _writeToParcel(reference.pointer, _id_writeToParcel as jni$_.JMethodIDPtr, _$parcel.pointer, i).check();
  }

  static final _id_describeContents = _class.instanceMethodId(
    r'describeContents',
    r'()I',
  );

  static final _describeContents =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int describeContents()`
  int describeContents() {
    return _describeContents(reference.pointer, _id_describeContents as jni$_.JMethodIDPtr).integer;
  }
}

final class $ContactsContract$SimAccount$NullableType extends jni$_.JObjType<ContactsContract$SimAccount?> {
  @jni$_.internal
  const $ContactsContract$SimAccount$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$SimAccount;';

  @jni$_.internal
  @core$_.override
  ContactsContract$SimAccount? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : ContactsContract$SimAccount.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$SimAccount?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$SimAccount$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$SimAccount$NullableType) &&
        other is $ContactsContract$SimAccount$NullableType;
  }
}

final class $ContactsContract$SimAccount$Type extends jni$_.JObjType<ContactsContract$SimAccount> {
  @jni$_.internal
  const $ContactsContract$SimAccount$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$SimAccount;';

  @jni$_.internal
  @core$_.override
  ContactsContract$SimAccount fromReference(jni$_.JReference reference) => ContactsContract$SimAccount.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$SimAccount?> get nullableType => const $ContactsContract$SimAccount$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$SimAccount$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$SimAccount$Type) && other is $ContactsContract$SimAccount$Type;
  }
}

/// from: `android.provider.ContactsContract$SimContacts`
class ContactsContract$SimContacts extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ContactsContract$SimContacts> $type;

  @jni$_.internal
  ContactsContract$SimContacts.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/provider/ContactsContract$SimContacts');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ContactsContract$SimContacts$NullableType();
  static const type = $ContactsContract$SimContacts$Type();
  static final _id_ACTION_SIM_ACCOUNTS_CHANGED = _class.staticFieldId(
    r'ACTION_SIM_ACCOUNTS_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_SIM_ACCOUNTS_CHANGED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get ACTION_SIM_ACCOUNTS_CHANGED =>
      _id_ACTION_SIM_ACCOUNTS_CHANGED.get(_class, const jni$_.JStringNullableType());

  static final _id_getSimAccounts = _class.staticMethodId(
    r'getSimAccounts',
    r'(Landroid/content/ContentResolver;)Ljava/util/List;',
  );

  static final _getSimAccounts =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `static public java.util.List<android.provider.ContactsContract$SimAccount> getSimAccounts(android.content.ContentResolver contentResolver)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JList<ContactsContract$SimAccount?>? getSimAccounts(
    jni$_.JObject? contentResolver,
  ) {
    final _$contentResolver = contentResolver?.reference ?? jni$_.jNullReference;
    return _getSimAccounts(
      _class.reference.pointer,
      _id_getSimAccounts as jni$_.JMethodIDPtr,
      _$contentResolver.pointer,
    ).object<jni$_.JList<ContactsContract$SimAccount?>?>(
      const jni$_.JListNullableType<ContactsContract$SimAccount?>($ContactsContract$SimAccount$NullableType()),
    );
  }
}

final class $ContactsContract$SimContacts$NullableType extends jni$_.JObjType<ContactsContract$SimContacts?> {
  @jni$_.internal
  const $ContactsContract$SimContacts$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$SimContacts;';

  @jni$_.internal
  @core$_.override
  ContactsContract$SimContacts? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : ContactsContract$SimContacts.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$SimContacts?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$SimContacts$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$SimContacts$NullableType) &&
        other is $ContactsContract$SimContacts$NullableType;
  }
}

final class $ContactsContract$SimContacts$Type extends jni$_.JObjType<ContactsContract$SimContacts> {
  @jni$_.internal
  const $ContactsContract$SimContacts$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$SimContacts;';

  @jni$_.internal
  @core$_.override
  ContactsContract$SimContacts fromReference(jni$_.JReference reference) => ContactsContract$SimContacts.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$SimContacts?> get nullableType => const $ContactsContract$SimContacts$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$SimContacts$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$SimContacts$Type) && other is $ContactsContract$SimContacts$Type;
  }
}

/// from: `android.provider.ContactsContract$StatusUpdates`
class ContactsContract$StatusUpdates extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ContactsContract$StatusUpdates> $type;

  @jni$_.internal
  ContactsContract$StatusUpdates.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/provider/ContactsContract$StatusUpdates');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ContactsContract$StatusUpdates$NullableType();
  static const type = $ContactsContract$StatusUpdates$Type();
  static final _id_CONTENT_ITEM_TYPE = _class.staticFieldId(
    r'CONTENT_ITEM_TYPE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CONTENT_ITEM_TYPE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CONTENT_ITEM_TYPE => _id_CONTENT_ITEM_TYPE.get(_class, const jni$_.JStringNullableType());

  static final _id_CONTENT_TYPE = _class.staticFieldId(
    r'CONTENT_TYPE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CONTENT_TYPE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CONTENT_TYPE => _id_CONTENT_TYPE.get(_class, const jni$_.JStringNullableType());

  static final _id_CONTENT_URI = _class.staticFieldId(
    r'CONTENT_URI',
    r'Landroid/net/Uri;',
  );

  /// from: `static public final android.net.Uri CONTENT_URI`
  /// The returned object must be released after use, by calling the [release] method.
  static Uri? get CONTENT_URI => _id_CONTENT_URI.get(_class, const $Uri$NullableType());

  static final _id_PROFILE_CONTENT_URI = _class.staticFieldId(
    r'PROFILE_CONTENT_URI',
    r'Landroid/net/Uri;',
  );

  /// from: `static public final android.net.Uri PROFILE_CONTENT_URI`
  /// The returned object must be released after use, by calling the [release] method.
  static Uri? get PROFILE_CONTENT_URI => _id_PROFILE_CONTENT_URI.get(_class, const $Uri$NullableType());

  static final _id_getPresenceIconResourceId = _class.staticMethodId(
    r'getPresenceIconResourceId',
    r'(I)I',
  );

  static final _getPresenceIconResourceId =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallStaticIntMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `static public final int getPresenceIconResourceId(int i)`
  static int getPresenceIconResourceId(
    int i,
  ) {
    return _getPresenceIconResourceId(
      _class.reference.pointer,
      _id_getPresenceIconResourceId as jni$_.JMethodIDPtr,
      i,
    ).integer;
  }

  static final _id_getPresencePrecedence = _class.staticMethodId(
    r'getPresencePrecedence',
    r'(I)I',
  );

  static final _getPresencePrecedence =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int32,)>)
            >
          >('globalEnv_CallStaticIntMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `static public final int getPresencePrecedence(int i)`
  static int getPresencePrecedence(
    int i,
  ) {
    return _getPresencePrecedence(_class.reference.pointer, _id_getPresencePrecedence as jni$_.JMethodIDPtr, i).integer;
  }
}

final class $ContactsContract$StatusUpdates$NullableType extends jni$_.JObjType<ContactsContract$StatusUpdates?> {
  @jni$_.internal
  const $ContactsContract$StatusUpdates$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$StatusUpdates;';

  @jni$_.internal
  @core$_.override
  ContactsContract$StatusUpdates? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : ContactsContract$StatusUpdates.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$StatusUpdates?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$StatusUpdates$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$StatusUpdates$NullableType) &&
        other is $ContactsContract$StatusUpdates$NullableType;
  }
}

final class $ContactsContract$StatusUpdates$Type extends jni$_.JObjType<ContactsContract$StatusUpdates> {
  @jni$_.internal
  const $ContactsContract$StatusUpdates$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$StatusUpdates;';

  @jni$_.internal
  @core$_.override
  ContactsContract$StatusUpdates fromReference(jni$_.JReference reference) =>
      ContactsContract$StatusUpdates.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$StatusUpdates?> get nullableType =>
      const $ContactsContract$StatusUpdates$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$StatusUpdates$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$StatusUpdates$Type) && other is $ContactsContract$StatusUpdates$Type;
  }
}

/// from: `android.provider.ContactsContract$SyncState`
class ContactsContract$SyncState extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ContactsContract$SyncState> $type;

  @jni$_.internal
  ContactsContract$SyncState.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/provider/ContactsContract$SyncState');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ContactsContract$SyncState$NullableType();
  static const type = $ContactsContract$SyncState$Type();
  static final _id_CONTENT_DIRECTORY = _class.staticFieldId(
    r'CONTENT_DIRECTORY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CONTENT_DIRECTORY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CONTENT_DIRECTORY => _id_CONTENT_DIRECTORY.get(_class, const jni$_.JStringNullableType());

  static final _id_CONTENT_URI = _class.staticFieldId(
    r'CONTENT_URI',
    r'Landroid/net/Uri;',
  );

  /// from: `static public final android.net.Uri CONTENT_URI`
  /// The returned object must be released after use, by calling the [release] method.
  static Uri? get CONTENT_URI => _id_CONTENT_URI.get(_class, const $Uri$NullableType());

  static final _id_get = _class.staticMethodId(
    r'get',
    r'(Landroid/content/ContentProviderClient;Landroid/accounts/Account;)[B',
  );

  static final _get =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public byte[] get(android.content.ContentProviderClient contentProviderClient, android.accounts.Account account)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JByteArray? get(
    jni$_.JObject? contentProviderClient,
    jni$_.JObject? account,
  ) {
    final _$contentProviderClient = contentProviderClient?.reference ?? jni$_.jNullReference;
    final _$account = account?.reference ?? jni$_.jNullReference;
    return _get(
      _class.reference.pointer,
      _id_get as jni$_.JMethodIDPtr,
      _$contentProviderClient.pointer,
      _$account.pointer,
    ).object<jni$_.JByteArray?>(const jni$_.JByteArrayNullableType());
  }

  static final _id_getWithUri = _class.staticMethodId(
    r'getWithUri',
    r'(Landroid/content/ContentProviderClient;Landroid/accounts/Account;)Landroid/util/Pair;',
  );

  static final _getWithUri =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public android.util.Pair<android.net.Uri, byte[]> getWithUri(android.content.ContentProviderClient contentProviderClient, android.accounts.Account account)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JObject? getWithUri(
    jni$_.JObject? contentProviderClient,
    jni$_.JObject? account,
  ) {
    final _$contentProviderClient = contentProviderClient?.reference ?? jni$_.jNullReference;
    final _$account = account?.reference ?? jni$_.jNullReference;
    return _getWithUri(
      _class.reference.pointer,
      _id_getWithUri as jni$_.JMethodIDPtr,
      _$contentProviderClient.pointer,
      _$account.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_set = _class.staticMethodId(
    r'set',
    r'(Landroid/content/ContentProviderClient;Landroid/accounts/Account;[B)V',
  );

  static final _set =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallStaticVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public void set(android.content.ContentProviderClient contentProviderClient, android.accounts.Account account, byte[] bs)`
  static void set(
    jni$_.JObject? contentProviderClient,
    jni$_.JObject? account,
    jni$_.JByteArray? bs,
  ) {
    final _$contentProviderClient = contentProviderClient?.reference ?? jni$_.jNullReference;
    final _$account = account?.reference ?? jni$_.jNullReference;
    final _$bs = bs?.reference ?? jni$_.jNullReference;
    _set(
      _class.reference.pointer,
      _id_set as jni$_.JMethodIDPtr,
      _$contentProviderClient.pointer,
      _$account.pointer,
      _$bs.pointer,
    ).check();
  }

  static final _id_newSetOperation = _class.staticMethodId(
    r'newSetOperation',
    r'(Landroid/accounts/Account;[B)Landroid/content/ContentProviderOperation;',
  );

  static final _newSetOperation =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public android.content.ContentProviderOperation newSetOperation(android.accounts.Account account, byte[] bs)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JObject? newSetOperation(
    jni$_.JObject? account,
    jni$_.JByteArray? bs,
  ) {
    final _$account = account?.reference ?? jni$_.jNullReference;
    final _$bs = bs?.reference ?? jni$_.jNullReference;
    return _newSetOperation(
      _class.reference.pointer,
      _id_newSetOperation as jni$_.JMethodIDPtr,
      _$account.pointer,
      _$bs.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }
}

final class $ContactsContract$SyncState$NullableType extends jni$_.JObjType<ContactsContract$SyncState?> {
  @jni$_.internal
  const $ContactsContract$SyncState$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$SyncState;';

  @jni$_.internal
  @core$_.override
  ContactsContract$SyncState? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : ContactsContract$SyncState.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$SyncState?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$SyncState$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$SyncState$NullableType) &&
        other is $ContactsContract$SyncState$NullableType;
  }
}

final class $ContactsContract$SyncState$Type extends jni$_.JObjType<ContactsContract$SyncState> {
  @jni$_.internal
  const $ContactsContract$SyncState$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract$SyncState;';

  @jni$_.internal
  @core$_.override
  ContactsContract$SyncState fromReference(jni$_.JReference reference) => ContactsContract$SyncState.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract$SyncState?> get nullableType => const $ContactsContract$SyncState$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$SyncState$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$SyncState$Type) && other is $ContactsContract$SyncState$Type;
  }
}

/// from: `android.provider.ContactsContract`
class ContactsContract extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ContactsContract> $type;

  @jni$_.internal
  ContactsContract.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/provider/ContactsContract');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ContactsContract$NullableType();
  static const type = $ContactsContract$Type();
  static final _id_AUTHORITY = _class.staticFieldId(
    r'AUTHORITY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String AUTHORITY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get AUTHORITY => _id_AUTHORITY.get(_class, const jni$_.JStringNullableType());

  static final _id_AUTHORITY_URI = _class.staticFieldId(
    r'AUTHORITY_URI',
    r'Landroid/net/Uri;',
  );

  /// from: `static public final android.net.Uri AUTHORITY_URI`
  /// The returned object must be released after use, by calling the [release] method.
  static Uri? get AUTHORITY_URI => _id_AUTHORITY_URI.get(_class, const $Uri$NullableType());

  static final _id_CALLER_IS_SYNCADAPTER = _class.staticFieldId(
    r'CALLER_IS_SYNCADAPTER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CALLER_IS_SYNCADAPTER`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get CALLER_IS_SYNCADAPTER =>
      _id_CALLER_IS_SYNCADAPTER.get(_class, const jni$_.JStringNullableType());

  static final _id_DEFERRED_SNIPPETING = _class.staticFieldId(
    r'DEFERRED_SNIPPETING',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String DEFERRED_SNIPPETING`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get DEFERRED_SNIPPETING =>
      _id_DEFERRED_SNIPPETING.get(_class, const jni$_.JStringNullableType());

  static final _id_DEFERRED_SNIPPETING_QUERY = _class.staticFieldId(
    r'DEFERRED_SNIPPETING_QUERY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String DEFERRED_SNIPPETING_QUERY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get DEFERRED_SNIPPETING_QUERY =>
      _id_DEFERRED_SNIPPETING_QUERY.get(_class, const jni$_.JStringNullableType());

  static final _id_DIRECTORY_PARAM_KEY = _class.staticFieldId(
    r'DIRECTORY_PARAM_KEY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String DIRECTORY_PARAM_KEY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get DIRECTORY_PARAM_KEY =>
      _id_DIRECTORY_PARAM_KEY.get(_class, const jni$_.JStringNullableType());

  static final _id_LIMIT_PARAM_KEY = _class.staticFieldId(
    r'LIMIT_PARAM_KEY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String LIMIT_PARAM_KEY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get LIMIT_PARAM_KEY => _id_LIMIT_PARAM_KEY.get(_class, const jni$_.JStringNullableType());

  static final _id_PRIMARY_ACCOUNT_NAME = _class.staticFieldId(
    r'PRIMARY_ACCOUNT_NAME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String PRIMARY_ACCOUNT_NAME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get PRIMARY_ACCOUNT_NAME =>
      _id_PRIMARY_ACCOUNT_NAME.get(_class, const jni$_.JStringNullableType());

  static final _id_PRIMARY_ACCOUNT_TYPE = _class.staticFieldId(
    r'PRIMARY_ACCOUNT_TYPE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String PRIMARY_ACCOUNT_TYPE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get PRIMARY_ACCOUNT_TYPE =>
      _id_PRIMARY_ACCOUNT_TYPE.get(_class, const jni$_.JStringNullableType());

  static final _id_REMOVE_DUPLICATE_ENTRIES = _class.staticFieldId(
    r'REMOVE_DUPLICATE_ENTRIES',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String REMOVE_DUPLICATE_ENTRIES`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get REMOVE_DUPLICATE_ENTRIES =>
      _id_REMOVE_DUPLICATE_ENTRIES.get(_class, const jni$_.JStringNullableType());

  static final _id_STREQUENT_PHONE_ONLY = _class.staticFieldId(
    r'STREQUENT_PHONE_ONLY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String STREQUENT_PHONE_ONLY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? get STREQUENT_PHONE_ONLY =>
      _id_STREQUENT_PHONE_ONLY.get(_class, const jni$_.JStringNullableType());

  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory ContactsContract() {
    return ContactsContract.fromReference(_new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr).reference);
  }

  static final _id_isProfileId = _class.staticMethodId(
    r'isProfileId',
    r'(J)Z',
  );

  static final _isProfileId =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.VarArgs<(jni$_.Int64,)>)
            >
          >('globalEnv_CallStaticBooleanMethod')
          .asFunction<jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `static public boolean isProfileId(long j)`
  static bool isProfileId(
    int j,
  ) {
    return _isProfileId(_class.reference.pointer, _id_isProfileId as jni$_.JMethodIDPtr, j).boolean;
  }
}

final class $ContactsContract$NullableType extends jni$_.JObjType<ContactsContract?> {
  @jni$_.internal
  const $ContactsContract$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract;';

  @jni$_.internal
  @core$_.override
  ContactsContract? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : ContactsContract.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$NullableType) && other is $ContactsContract$NullableType;
  }
}

final class $ContactsContract$Type extends jni$_.JObjType<ContactsContract> {
  @jni$_.internal
  const $ContactsContract$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/provider/ContactsContract;';

  @jni$_.internal
  @core$_.override
  ContactsContract fromReference(jni$_.JReference reference) => ContactsContract.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ContactsContract?> get nullableType => const $ContactsContract$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ContactsContract$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContactsContract$Type) && other is $ContactsContract$Type;
  }
}

/// from: `com.example.android_intent.ActivityResultListenerProxy$Companion`
class ActivityResultListenerProxy$Companion extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ActivityResultListenerProxy$Companion> $type;

  @jni$_.internal
  ActivityResultListenerProxy$Companion.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'com/example/android_intent/ActivityResultListenerProxy$Companion');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ActivityResultListenerProxy$Companion$NullableType();
  static const type = $ActivityResultListenerProxy$Companion$Type();
  static final _id_getInstance = _class.instanceMethodId(
    r'getInstance',
    r'()Lcom/example/android_intent/ActivityResultListenerProxy;',
  );

  static final _getInstance =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public final com.example.android_intent.ActivityResultListenerProxy getInstance()`
  /// The returned object must be released after use, by calling the [release] method.
  ActivityResultListenerProxy getInstance() {
    return _getInstance(
      reference.pointer,
      _id_getInstance as jni$_.JMethodIDPtr,
    ).object<ActivityResultListenerProxy>(const $ActivityResultListenerProxy$Type());
  }

  static final _id_new$ = _class.constructorId(
    r'(Lkotlin/jvm/internal/DefaultConstructorMarker;)V',
  );

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `synthetic public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)`
  /// The returned object must be released after use, by calling the [release] method.
  factory ActivityResultListenerProxy$Companion(
    jni$_.JObject? defaultConstructorMarker,
  ) {
    final _$defaultConstructorMarker = defaultConstructorMarker?.reference ?? jni$_.jNullReference;
    return ActivityResultListenerProxy$Companion.fromReference(
      _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr, _$defaultConstructorMarker.pointer).reference,
    );
  }
}

final class $ActivityResultListenerProxy$Companion$NullableType
    extends jni$_.JObjType<ActivityResultListenerProxy$Companion?> {
  @jni$_.internal
  const $ActivityResultListenerProxy$Companion$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lcom/example/android_intent/ActivityResultListenerProxy$Companion;';

  @jni$_.internal
  @core$_.override
  ActivityResultListenerProxy$Companion? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : ActivityResultListenerProxy$Companion.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ActivityResultListenerProxy$Companion?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ActivityResultListenerProxy$Companion$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ActivityResultListenerProxy$Companion$NullableType) &&
        other is $ActivityResultListenerProxy$Companion$NullableType;
  }
}

final class $ActivityResultListenerProxy$Companion$Type extends jni$_.JObjType<ActivityResultListenerProxy$Companion> {
  @jni$_.internal
  const $ActivityResultListenerProxy$Companion$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lcom/example/android_intent/ActivityResultListenerProxy$Companion;';

  @jni$_.internal
  @core$_.override
  ActivityResultListenerProxy$Companion fromReference(jni$_.JReference reference) =>
      ActivityResultListenerProxy$Companion.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ActivityResultListenerProxy$Companion?> get nullableType =>
      const $ActivityResultListenerProxy$Companion$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ActivityResultListenerProxy$Companion$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ActivityResultListenerProxy$Companion$Type) &&
        other is $ActivityResultListenerProxy$Companion$Type;
  }
}

/// from: `com.example.android_intent.ActivityResultListenerProxy$OnResultListener`
class ActivityResultListenerProxy$OnResultListener extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ActivityResultListenerProxy$OnResultListener> $type;

  @jni$_.internal
  ActivityResultListenerProxy$OnResultListener.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
    r'com/example/android_intent/ActivityResultListenerProxy$OnResultListener',
  );

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ActivityResultListenerProxy$OnResultListener$NullableType();
  static const type = $ActivityResultListenerProxy$OnResultListener$Type();
  static final _id_onResult = _class.instanceMethodId(
    r'onResult',
    r'(IILjava/lang/String;)V',
  );

  static final _onResult =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public abstract void onResult(int i, int i1, java.lang.String string)`
  void onResult(
    int i,
    int i1,
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    _onResult(reference.pointer, _id_onResult as jni$_.JMethodIDPtr, i, i1, _$string.pointer).check();
  }

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $ActivityResultListenerProxy$OnResultListener> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
    jni$_.NativeFunction<jni$_.JObjectPtr Function(jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>
  >
  _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onResult(IILjava/lang/String;)V') {
        _$impls[$p]!.onResult(
          $a![0]!.as(const jni$_.JIntegerType(), releaseOriginal: true).intValue(releaseOriginal: true),
          $a![1]!.as(const jni$_.JIntegerType(), releaseOriginal: true).intValue(releaseOriginal: true),
          $a![2]?.as(const jni$_.JStringType(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $ActivityResultListenerProxy$OnResultListener $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'com.example.android_intent.ActivityResultListenerProxy$OnResultListener',
      $p,
      _$invokePointer,
      [
        if ($impl.onResult$async) r'onResult(IILjava/lang/String;)V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory ActivityResultListenerProxy$OnResultListener.implement(
    $ActivityResultListenerProxy$OnResultListener $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return ActivityResultListenerProxy$OnResultListener.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $ActivityResultListenerProxy$OnResultListener {
  factory $ActivityResultListenerProxy$OnResultListener({
    required void Function(int i, int i1, jni$_.JString? string) onResult,
    bool onResult$async,
  }) = _$ActivityResultListenerProxy$OnResultListener;

  void onResult(int i, int i1, jni$_.JString? string);
  bool get onResult$async => false;
}

final class _$ActivityResultListenerProxy$OnResultListener with $ActivityResultListenerProxy$OnResultListener {
  _$ActivityResultListenerProxy$OnResultListener({
    required void Function(int i, int i1, jni$_.JString? string) onResult,
    this.onResult$async = false,
  }) : _onResult = onResult;

  final void Function(int i, int i1, jni$_.JString? string) _onResult;
  final bool onResult$async;

  void onResult(int i, int i1, jni$_.JString? string) {
    return _onResult(i, i1, string);
  }
}

final class $ActivityResultListenerProxy$OnResultListener$NullableType
    extends jni$_.JObjType<ActivityResultListenerProxy$OnResultListener?> {
  @jni$_.internal
  const $ActivityResultListenerProxy$OnResultListener$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lcom/example/android_intent/ActivityResultListenerProxy$OnResultListener;';

  @jni$_.internal
  @core$_.override
  ActivityResultListenerProxy$OnResultListener? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : ActivityResultListenerProxy$OnResultListener.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ActivityResultListenerProxy$OnResultListener?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ActivityResultListenerProxy$OnResultListener$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ActivityResultListenerProxy$OnResultListener$NullableType) &&
        other is $ActivityResultListenerProxy$OnResultListener$NullableType;
  }
}

final class $ActivityResultListenerProxy$OnResultListener$Type
    extends jni$_.JObjType<ActivityResultListenerProxy$OnResultListener> {
  @jni$_.internal
  const $ActivityResultListenerProxy$OnResultListener$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lcom/example/android_intent/ActivityResultListenerProxy$OnResultListener;';

  @jni$_.internal
  @core$_.override
  ActivityResultListenerProxy$OnResultListener fromReference(jni$_.JReference reference) =>
      ActivityResultListenerProxy$OnResultListener.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ActivityResultListenerProxy$OnResultListener?> get nullableType =>
      const $ActivityResultListenerProxy$OnResultListener$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ActivityResultListenerProxy$OnResultListener$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ActivityResultListenerProxy$OnResultListener$Type) &&
        other is $ActivityResultListenerProxy$OnResultListener$Type;
  }
}

/// from: `com.example.android_intent.ActivityResultListenerProxy`
class ActivityResultListenerProxy extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ActivityResultListenerProxy> $type;

  @jni$_.internal
  ActivityResultListenerProxy.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'com/example/android_intent/ActivityResultListenerProxy');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ActivityResultListenerProxy$NullableType();
  static const type = $ActivityResultListenerProxy$Type();
  static final _id_Companion = _class.staticFieldId(
    r'Companion',
    r'Lcom/example/android_intent/ActivityResultListenerProxy$Companion;',
  );

  /// from: `static public final com.example.android_intent.ActivityResultListenerProxy$Companion Companion`
  /// The returned object must be released after use, by calling the [release] method.
  static ActivityResultListenerProxy$Companion get Companion =>
      _id_Companion.get(_class, const $ActivityResultListenerProxy$Companion$Type());

  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory ActivityResultListenerProxy() {
    return ActivityResultListenerProxy.fromReference(
      _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr).reference,
    );
  }

  static final _id_setOnResultListener = _class.instanceMethodId(
    r'setOnResultListener',
    r'(Lcom/example/android_intent/ActivityResultListenerProxy$OnResultListener;)V',
  );

  static final _setOnResultListener =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public final void setOnResultListener(com.example.android_intent.ActivityResultListenerProxy$OnResultListener onResultListener)`
  void setOnResultListener(
    ActivityResultListenerProxy$OnResultListener onResultListener,
  ) {
    final _$onResultListener = onResultListener.reference;
    _setOnResultListener(
      reference.pointer,
      _id_setOnResultListener as jni$_.JMethodIDPtr,
      _$onResultListener.pointer,
    ).check();
  }

  static final _id_onResult = _class.instanceMethodId(
    r'onResult',
    r'(IILandroid/content/Intent;)Z',
  );

  static final _onResult =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Int32, jni$_.Pointer<jni$_.Void>)>,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, int, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public final boolean onResult(int i, int i1, android.content.Intent intent)`
  bool onResult(
    int i,
    int i1,
    Intent? intent,
  ) {
    final _$intent = intent?.reference ?? jni$_.jNullReference;
    return _onResult(reference.pointer, _id_onResult as jni$_.JMethodIDPtr, i, i1, _$intent.pointer).boolean;
  }

  static final _id_onAttachedToEngine = _class.instanceMethodId(
    r'onAttachedToEngine',
    r'(Lio/flutter/embedding/engine/plugins/FlutterPlugin$FlutterPluginBinding;)V',
  );

  static final _onAttachedToEngine =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void onAttachedToEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding flutterPluginBinding)`
  void onAttachedToEngine(
    jni$_.JObject flutterPluginBinding,
  ) {
    final _$flutterPluginBinding = flutterPluginBinding.reference;
    _onAttachedToEngine(
      reference.pointer,
      _id_onAttachedToEngine as jni$_.JMethodIDPtr,
      _$flutterPluginBinding.pointer,
    ).check();
  }

  static final _id_onDetachedFromEngine = _class.instanceMethodId(
    r'onDetachedFromEngine',
    r'(Lio/flutter/embedding/engine/plugins/FlutterPlugin$FlutterPluginBinding;)V',
  );

  static final _onDetachedFromEngine =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void onDetachedFromEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding flutterPluginBinding)`
  void onDetachedFromEngine(
    jni$_.JObject flutterPluginBinding,
  ) {
    final _$flutterPluginBinding = flutterPluginBinding.reference;
    _onDetachedFromEngine(
      reference.pointer,
      _id_onDetachedFromEngine as jni$_.JMethodIDPtr,
      _$flutterPluginBinding.pointer,
    ).check();
  }

  static final _id_onAttachedToActivity = _class.instanceMethodId(
    r'onAttachedToActivity',
    r'(Lio/flutter/embedding/engine/plugins/activity/ActivityPluginBinding;)V',
  );

  static final _onAttachedToActivity =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void onAttachedToActivity(io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding activityPluginBinding)`
  void onAttachedToActivity(
    jni$_.JObject activityPluginBinding,
  ) {
    final _$activityPluginBinding = activityPluginBinding.reference;
    _onAttachedToActivity(
      reference.pointer,
      _id_onAttachedToActivity as jni$_.JMethodIDPtr,
      _$activityPluginBinding.pointer,
    ).check();
  }

  static final _id_onDetachedFromActivityForConfigChanges = _class.instanceMethodId(
    r'onDetachedFromActivityForConfigChanges',
    r'()V',
  );

  static final _onDetachedFromActivityForConfigChanges =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void onDetachedFromActivityForConfigChanges()`
  void onDetachedFromActivityForConfigChanges() {
    _onDetachedFromActivityForConfigChanges(
      reference.pointer,
      _id_onDetachedFromActivityForConfigChanges as jni$_.JMethodIDPtr,
    ).check();
  }

  static final _id_onReattachedToActivityForConfigChanges = _class.instanceMethodId(
    r'onReattachedToActivityForConfigChanges',
    r'(Lio/flutter/embedding/engine/plugins/activity/ActivityPluginBinding;)V',
  );

  static final _onReattachedToActivityForConfigChanges =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)
          >();

  /// from: `public void onReattachedToActivityForConfigChanges(io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding activityPluginBinding)`
  void onReattachedToActivityForConfigChanges(
    jni$_.JObject activityPluginBinding,
  ) {
    final _$activityPluginBinding = activityPluginBinding.reference;
    _onReattachedToActivityForConfigChanges(
      reference.pointer,
      _id_onReattachedToActivityForConfigChanges as jni$_.JMethodIDPtr,
      _$activityPluginBinding.pointer,
    ).check();
  }

  static final _id_onDetachedFromActivity = _class.instanceMethodId(
    r'onDetachedFromActivity',
    r'()V',
  );

  static final _onDetachedFromActivity =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallVoidMethod')
          .asFunction<
            jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void onDetachedFromActivity()`
  void onDetachedFromActivity() {
    _onDetachedFromActivity(reference.pointer, _id_onDetachedFromActivity as jni$_.JMethodIDPtr).check();
  }
}

final class $ActivityResultListenerProxy$NullableType extends jni$_.JObjType<ActivityResultListenerProxy?> {
  @jni$_.internal
  const $ActivityResultListenerProxy$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lcom/example/android_intent/ActivityResultListenerProxy;';

  @jni$_.internal
  @core$_.override
  ActivityResultListenerProxy? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : ActivityResultListenerProxy.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ActivityResultListenerProxy?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ActivityResultListenerProxy$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ActivityResultListenerProxy$NullableType) &&
        other is $ActivityResultListenerProxy$NullableType;
  }
}

final class $ActivityResultListenerProxy$Type extends jni$_.JObjType<ActivityResultListenerProxy> {
  @jni$_.internal
  const $ActivityResultListenerProxy$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lcom/example/android_intent/ActivityResultListenerProxy;';

  @jni$_.internal
  @core$_.override
  ActivityResultListenerProxy fromReference(jni$_.JReference reference) => ActivityResultListenerProxy.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ActivityResultListenerProxy?> get nullableType => const $ActivityResultListenerProxy$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ActivityResultListenerProxy$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ActivityResultListenerProxy$Type) && other is $ActivityResultListenerProxy$Type;
  }
}

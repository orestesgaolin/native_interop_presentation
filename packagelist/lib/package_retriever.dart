// AUTO GENERATED BY JNIGEN 0.14.2. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: comment_references
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

/// from: `com.example.packagelist.PackageRetriever`
class PackageRetriever extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<PackageRetriever> $type;

  @jni$_.internal
  PackageRetriever.fromReference(jni$_.JReference reference)
    : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
    r'com/example/packagelist/PackageRetriever',
  );

  /// The type which includes information such as the signature of this class.
  static const nullableType = $PackageRetriever$NullableType();
  static const type = $PackageRetriever$Type();
  static final _id_new$ = _class.constructorId(r'()V');

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory PackageRetriever() {
    return PackageRetriever.fromReference(
      _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr).reference,
    );
  }

  static final _id_getInstalledPackages = _class.instanceMethodId(
    r'getInstalledPackages',
    r'(Landroid/content/Context;)Ljava/util/List;',
  );

  static final _getInstalledPackages =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public final java.util.List<java.lang.String> getInstalledPackages(android.content.Context context)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JList<jni$_.JString> getInstalledPackages(jni$_.JObject context) {
    final _$context = context.reference;
    return _getInstalledPackages(
      reference.pointer,
      _id_getInstalledPackages as jni$_.JMethodIDPtr,
      _$context.pointer,
    ).object<jni$_.JList<jni$_.JString>>(
      const jni$_.JListType<jni$_.JString>(jni$_.JStringType()),
    );
  }

  static final _id_getPackageDrawable = _class.instanceMethodId(
    r'getPackageDrawable',
    r'(Landroid/content/Context;Ljava/lang/String;)[B',
  );

  static final _getPackageDrawable =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public final byte[] getPackageDrawable(android.content.Context context, java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JByteArray getPackageDrawable(
    jni$_.JObject context,
    jni$_.JString string,
  ) {
    final _$context = context.reference;
    final _$string = string.reference;
    return _getPackageDrawable(
      reference.pointer,
      _id_getPackageDrawable as jni$_.JMethodIDPtr,
      _$context.pointer,
      _$string.pointer,
    ).object<jni$_.JByteArray>(const jni$_.JByteArrayType());
  }
}

final class $PackageRetriever$NullableType
    extends jni$_.JObjType<PackageRetriever?> {
  @jni$_.internal
  const $PackageRetriever$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lcom/example/packagelist/PackageRetriever;';

  @jni$_.internal
  @core$_.override
  PackageRetriever? fromReference(jni$_.JReference reference) =>
      reference.isNull ? null : PackageRetriever.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<PackageRetriever?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($PackageRetriever$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($PackageRetriever$NullableType) &&
        other is $PackageRetriever$NullableType;
  }
}

final class $PackageRetriever$Type extends jni$_.JObjType<PackageRetriever> {
  @jni$_.internal
  const $PackageRetriever$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lcom/example/packagelist/PackageRetriever;';

  @jni$_.internal
  @core$_.override
  PackageRetriever fromReference(jni$_.JReference reference) =>
      PackageRetriever.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<PackageRetriever?> get nullableType =>
      const $PackageRetriever$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($PackageRetriever$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($PackageRetriever$Type) &&
        other is $PackageRetriever$Type;
  }
}

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

/// from: `com.example.pdf.PDFViewController`
class PDFViewController extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<PDFViewController> $type;

  @jni$_.internal
  PDFViewController.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      jni$_.JClass.forName(r'com/example/pdf/PDFViewController');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $PDFViewController$NullableType();
  static const type = $PDFViewController$Type();
  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory PDFViewController() {
    return PDFViewController.fromReference(
        _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr)
            .reference);
  }

  static final _id_setPage = _class.instanceMethodId(
    r'setPage',
    r'(I)V',
  );

  static final _setPage = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setPage(int i)`
  void setPage(
    int i,
  ) {
    _setPage(reference.pointer, _id_setPage as jni$_.JMethodIDPtr, i).check();
  }

  static final _id_getPageCount = _class.instanceMethodId(
    r'getPageCount',
    r'()I',
  );

  static final _getPageCount = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int getPageCount()`
  int getPageCount() {
    return _getPageCount(
            reference.pointer, _id_getPageCount as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_getCurrentPage = _class.instanceMethodId(
    r'getCurrentPage',
    r'()I',
  );

  static final _getCurrentPage = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int getCurrentPage()`
  int getCurrentPage() {
    return _getCurrentPage(
            reference.pointer, _id_getCurrentPage as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_enableSwipe = _class.instanceMethodId(
    r'enableSwipe',
    r'(Z)V',
  );

  static final _enableSwipe = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void enableSwipe(boolean z)`
  void enableSwipe(
    bool z,
  ) {
    _enableSwipe(
            reference.pointer, _id_enableSwipe as jni$_.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_nightMode = _class.instanceMethodId(
    r'nightMode',
    r'(Z)V',
  );

  static final _nightMode = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void nightMode(boolean z)`
  void nightMode(
    bool z,
  ) {
    _nightMode(
            reference.pointer, _id_nightMode as jni$_.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_setPageFling = _class.instanceMethodId(
    r'setPageFling',
    r'(Z)V',
  );

  static final _setPageFling = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setPageFling(boolean z)`
  void setPageFling(
    bool z,
  ) {
    _setPageFling(reference.pointer, _id_setPageFling as jni$_.JMethodIDPtr,
            z ? 1 : 0)
        .check();
  }

  static final _id_setPageSnap = _class.instanceMethodId(
    r'setPageSnap',
    r'(Z)V',
  );

  static final _setPageSnap = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void setPageSnap(boolean z)`
  void setPageSnap(
    bool z,
  ) {
    _setPageSnap(
            reference.pointer, _id_setPageSnap as jni$_.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_setPdfStatusListener = _class.instanceMethodId(
    r'setPdfStatusListener',
    r'(Lcom/example/pdf/PDFStatusListener;)V',
  );

  static final _setPdfStatusListener = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void setPdfStatusListener(com.example.pdf.PDFStatusListener pDFStatusListener)`
  void setPdfStatusListener(
    PDFStatusListener? pDFStatusListener,
  ) {
    final _$pDFStatusListener =
        pDFStatusListener?.reference ?? jni$_.jNullReference;
    _setPdfStatusListener(
            reference.pointer,
            _id_setPdfStatusListener as jni$_.JMethodIDPtr,
            _$pDFStatusListener.pointer)
        .check();
  }
}

final class $PDFViewController$NullableType
    extends jni$_.JObjType<PDFViewController?> {
  @jni$_.internal
  const $PDFViewController$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lcom/example/pdf/PDFViewController;';

  @jni$_.internal
  @core$_.override
  PDFViewController? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : PDFViewController.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<PDFViewController?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($PDFViewController$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($PDFViewController$NullableType) &&
        other is $PDFViewController$NullableType;
  }
}

final class $PDFViewController$Type extends jni$_.JObjType<PDFViewController> {
  @jni$_.internal
  const $PDFViewController$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lcom/example/pdf/PDFViewController;';

  @jni$_.internal
  @core$_.override
  PDFViewController fromReference(jni$_.JReference reference) =>
      PDFViewController.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<PDFViewController?> get nullableType =>
      const $PDFViewController$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($PDFViewController$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($PDFViewController$Type) &&
        other is $PDFViewController$Type;
  }
}

/// from: `com.example.pdf.PDFStatusListener`
class PDFStatusListener extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<PDFStatusListener> $type;

  @jni$_.internal
  PDFStatusListener.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      jni$_.JClass.forName(r'com/example/pdf/PDFStatusListener');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $PDFStatusListener$NullableType();
  static const type = $PDFStatusListener$Type();
  static final _id_onLoaded = _class.instanceMethodId(
    r'onLoaded',
    r'()V',
  );

  static final _onLoaded = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract void onLoaded()`
  void onLoaded() {
    _onLoaded(reference.pointer, _id_onLoaded as jni$_.JMethodIDPtr).check();
  }

  static final _id_onPageChanged = _class.instanceMethodId(
    r'onPageChanged',
    r'(II)V',
  );

  static final _onPageChanged = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Int32, jni$_.Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int, int)>();

  /// from: `public abstract void onPageChanged(int i, int i1)`
  void onPageChanged(
    int i,
    int i1,
  ) {
    _onPageChanged(
            reference.pointer, _id_onPageChanged as jni$_.JMethodIDPtr, i, i1)
        .check();
  }

  static final _id_onError = _class.instanceMethodId(
    r'onError',
    r'(Ljava/lang/String;)V',
  );

  static final _onError = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void onError(java.lang.String string)`
  void onError(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    _onError(reference.pointer, _id_onError as jni$_.JMethodIDPtr,
            _$string.pointer)
        .check();
  }

  static final _id_onDisposed = _class.instanceMethodId(
    r'onDisposed',
    r'()V',
  );

  static final _onDisposed = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract void onDisposed()`
  void onDisposed() {
    _onDisposed(reference.pointer, _id_onDisposed as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_onLinkRequested = _class.instanceMethodId(
    r'onLinkRequested',
    r'(Ljava/lang/String;)V',
  );

  static final _onLinkRequested = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void onLinkRequested(java.lang.String string)`
  void onLinkRequested(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    _onLinkRequested(reference.pointer,
            _id_onLinkRequested as jni$_.JMethodIDPtr, _$string.pointer)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $PDFStatusListener> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
          jni$_.NativeFunction<
              jni$_.JObjectPtr Function(
                  jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>>
      _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onLoaded()V') {
        _$impls[$p]!.onLoaded();
        return jni$_.nullptr;
      }
      if ($d == r'onPageChanged(II)V') {
        _$impls[$p]!.onPageChanged(
          $a![0]!
              .as(const jni$_.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
          $a![1]!
              .as(const jni$_.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
      if ($d == r'onError(Ljava/lang/String;)V') {
        _$impls[$p]!.onError(
          $a![0]?.as(const jni$_.JStringType(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
      if ($d == r'onDisposed()V') {
        _$impls[$p]!.onDisposed();
        return jni$_.nullptr;
      }
      if ($d == r'onLinkRequested(Ljava/lang/String;)V') {
        _$impls[$p]!.onLinkRequested(
          $a![0]?.as(const jni$_.JStringType(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $PDFStatusListener $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'com.example.pdf.PDFStatusListener',
      $p,
      _$invokePointer,
      [
        if ($impl.onLoaded$async) r'onLoaded()V',
        if ($impl.onPageChanged$async) r'onPageChanged(II)V',
        if ($impl.onError$async) r'onError(Ljava/lang/String;)V',
        if ($impl.onDisposed$async) r'onDisposed()V',
        if ($impl.onLinkRequested$async)
          r'onLinkRequested(Ljava/lang/String;)V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory PDFStatusListener.implement(
    $PDFStatusListener $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return PDFStatusListener.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $PDFStatusListener {
  factory $PDFStatusListener({
    required void Function() onLoaded,
    bool onLoaded$async,
    required void Function(int i, int i1) onPageChanged,
    bool onPageChanged$async,
    required void Function(jni$_.JString? string) onError,
    bool onError$async,
    required void Function() onDisposed,
    bool onDisposed$async,
    required void Function(jni$_.JString? string) onLinkRequested,
    bool onLinkRequested$async,
  }) = _$PDFStatusListener;

  void onLoaded();
  bool get onLoaded$async => false;
  void onPageChanged(int i, int i1);
  bool get onPageChanged$async => false;
  void onError(jni$_.JString? string);
  bool get onError$async => false;
  void onDisposed();
  bool get onDisposed$async => false;
  void onLinkRequested(jni$_.JString? string);
  bool get onLinkRequested$async => false;
}

final class _$PDFStatusListener with $PDFStatusListener {
  _$PDFStatusListener({
    required void Function() onLoaded,
    this.onLoaded$async = false,
    required void Function(int i, int i1) onPageChanged,
    this.onPageChanged$async = false,
    required void Function(jni$_.JString? string) onError,
    this.onError$async = false,
    required void Function() onDisposed,
    this.onDisposed$async = false,
    required void Function(jni$_.JString? string) onLinkRequested,
    this.onLinkRequested$async = false,
  })  : _onLoaded = onLoaded,
        _onPageChanged = onPageChanged,
        _onError = onError,
        _onDisposed = onDisposed,
        _onLinkRequested = onLinkRequested;

  final void Function() _onLoaded;
  final bool onLoaded$async;
  final void Function(int i, int i1) _onPageChanged;
  final bool onPageChanged$async;
  final void Function(jni$_.JString? string) _onError;
  final bool onError$async;
  final void Function() _onDisposed;
  final bool onDisposed$async;
  final void Function(jni$_.JString? string) _onLinkRequested;
  final bool onLinkRequested$async;

  void onLoaded() {
    return _onLoaded();
  }

  void onPageChanged(int i, int i1) {
    return _onPageChanged(i, i1);
  }

  void onError(jni$_.JString? string) {
    return _onError(string);
  }

  void onDisposed() {
    return _onDisposed();
  }

  void onLinkRequested(jni$_.JString? string) {
    return _onLinkRequested(string);
  }
}

final class $PDFStatusListener$NullableType
    extends jni$_.JObjType<PDFStatusListener?> {
  @jni$_.internal
  const $PDFStatusListener$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lcom/example/pdf/PDFStatusListener;';

  @jni$_.internal
  @core$_.override
  PDFStatusListener? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : PDFStatusListener.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<PDFStatusListener?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($PDFStatusListener$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($PDFStatusListener$NullableType) &&
        other is $PDFStatusListener$NullableType;
  }
}

final class $PDFStatusListener$Type extends jni$_.JObjType<PDFStatusListener> {
  @jni$_.internal
  const $PDFStatusListener$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lcom/example/pdf/PDFStatusListener;';

  @jni$_.internal
  @core$_.override
  PDFStatusListener fromReference(jni$_.JReference reference) =>
      PDFStatusListener.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<PDFStatusListener?> get nullableType =>
      const $PDFStatusListener$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($PDFStatusListener$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($PDFStatusListener$Type) &&
        other is $PDFStatusListener$Type;
  }
}
